{"version":3,"file":"static/js/8623.9c54f8ca.chunk.js","mappings":"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","sources":["views/settings/setting.js","../node_modules/@coreui/icons/src/free/cil-settings.ts","../node_modules/@coreui/react/src/components/backdrop/CBackdrop.tsx","../node_modules/@coreui/react/src/components/conditional-portal/CConditionalPortal.tsx","../node_modules/@coreui/react/src/components/modal/CModalContent.tsx","../node_modules/@coreui/react/src/components/modal/CModalDialog.tsx","../node_modules/@coreui/react/src/components/modal/CModal.tsx","../node_modules/@coreui/react/src/components/modal/CModalBody.tsx","../node_modules/@coreui/react/src/components/modal/CModalFooter.tsx","../node_modules/@coreui/react/src/components/modal/CModalHeader.tsx","../node_modules/@coreui/react/src/components/nav/CNavItem.tsx","../node_modules/@coreui/react/src/components/nav/CNavLink.tsx","../node_modules/@coreui/react/src/components/sidebar/CSidebarNav.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nimport { cilAirplay, cilPen, cilSettings, cilX } from '@coreui/icons';\r\nimport CIcon from '@coreui/icons-react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CContainer,\r\n    CForm,\r\n    CFormCheck,\r\n    CFormInput,\r\n    CFormLabel,\r\n    CFormSelect,\r\n    CInputGroup,\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CNavbar,\r\n    CNavbarBrand,\r\n    CNavbarNav,\r\n    CNavbarToggler,\r\n    CNavItem,\r\n    CNavLink,\r\n    CRow,\r\n    CTable,\r\n    CTableBody,\r\n    CTableDataCell,\r\n    CTableHead,\r\n    CTableHeaderCell,\r\n    CTableRow,\r\n    CFormSwitch\r\n} from '@coreui/react';\r\n\r\nconst Settings = () => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [showBarimt, setshowBarimt] = useState(false);\r\n  const [posFormVisible, setPosFormVisible] = useState(false);\r\n  const [branches, setBranches] = useState([]);\r\n  const [subBranches, setSubBranches] = useState([]);\r\n  const [selectedBranch, setSelectedBranch] = useState('');\r\n  const [showAddBranchButton, setShowAddBranchButton] = useState(false);\r\n  const [showOrderSection, setShowOrderSection] = useState(false); // State for order section\r\n  const [registrationNumber, setRegistrationNumber] = useState('');\r\n  const [taxPayerName, setTaxPayerName] = useState('');\r\n  const [taxpayerNo, setTaxpayerNo] = useState('');\r\n  const [isVATPayer, setIsVATPayer] = useState(false);\r\n\r\n  // State for new branch form\r\n  const [newBranchName, setNewBranchName] = useState('');\r\n  const [newBranchType, setNewBranchType] = useState('');\r\n  const [newBranchLocation, setNewBranchLocation] = useState('');\r\n  const [newBranchContact, setNewBranchContact] = useState('');\r\n\r\n  // State for editing branch\r\n  const [editingBranch, setEditingBranch] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchBranches = async () => {\r\n            const url = 'https://api.ebarimt.mn/api/info/check/getBranchInfo';\r\n            const options = {\r\n                method: 'GET',\r\n                headers: { Accept: 'application/json' },\r\n            };\r\n\r\n            try {\r\n                const response = await fetch(url, options);\r\n                const data = await response.json();\r\n                console.log('API Data:', data);\r\n                const dataArray = Array.isArray(data) ? data : data.data || [];\r\n\r\n                if (Array.isArray(dataArray)) {\r\n                    const groupedBranches = dataArray.reduce((acc, curr) => {\r\n                        const { branchCode, branchName, subBranchCode, subBranchName } = curr;\r\n                        if (!acc[branchCode]) {\r\n                            acc[branchCode] = { branchCode, branchName, subBranches: [], location: '', contact: '' };\r\n                        }\r\n                        acc[branchCode].subBranches.push({ subBranchCode, subBranchName });\r\n                        return acc;\r\n                    }, {});\r\n\r\n                    setBranches(Object.values(groupedBranches));\r\n                } else {\r\n                    console.error('Unexpected data format:', dataArray);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching branch data:', error);\r\n            }\r\n        };\r\n\r\n        fetchBranches();\r\n    }, []);\r\n    const handleToggleBarimtSection = () => {\r\n        setshowBarimt(true);  // Always show the section when the button is clicked\r\n    };\r\n\r\n    const handleCheckRegistration = async () => {\r\n        const firstApiUrl = `https://api.ebarimt.mn/api/info/check/getTinInfo?regNo=${registrationNumber}`;\r\n        const firstApiOptions = {\r\n            method: 'GET',\r\n            headers: { Accept: 'application/json' },\r\n        };\r\n\r\n        try {\r\n            const firstApiResponse = await fetch(firstApiUrl, firstApiOptions);\r\n            const firstApiData = await firstApiResponse.json();\r\n\r\n\r\n            const tin = firstApiData?.data; // Adjust this based on the actual response structure\r\n\r\n            if (tin) {\r\n                const secondApiUrl = `https://api.ebarimt.mn/api/info/check/getInfo?tin=${tin}`;\r\n                const secondApiOptions = {\r\n                    method: 'GET',\r\n                    headers: { Accept: 'application/json' },\r\n                };\r\n\r\n                const secondApiResponse = await fetch(secondApiUrl, secondApiOptions);\r\n                const secondApiData = await secondApiResponse.json();\r\n                console.log(secondApiData)\r\n                setTaxPayerName(secondApiData.data.name);\r\n                setTaxpayerNo(tin);\r\n                setIsVATPayer(secondApiData.data.vatPayer);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    };\r\n    const handleBranchChange = (event) => {\r\n        const branchId = event.target.value;\r\n        setSelectedBranch(branchId);\r\n        const selectedBranchData = branches.find(branch => branch.branchCode === branchId);\r\n        setSubBranches(selectedBranchData ? selectedBranchData.subBranches : []);\r\n    };\r\n\r\n\r\n  const handleEditBranch = (branch) => {\r\n    setEditingBranch(branch);\r\n    setNewBranchName(branch.branchName);\r\n    setNewBranchLocation(branch.location);\r\n    setNewBranchContact(branch.contact);\r\n    setVisible(true); // Open the modal to edit\r\n  };\r\n\r\n    const handleDeleteBranch = async (branchId) => {\r\n        const confirmDelete = window.confirm('Are you sure you want to delete this branch?');\r\n        if (confirmDelete) {\r\n\r\n            const url = `https://api.ebarimt.mn/api/info/check/deleteBranch/${branchId}`;\r\n            const options = {\r\n                method: 'DELETE',\r\n                headers: { Accept: 'application/json' },\r\n            };\r\n\r\n            try {\r\n                const response = await fetch(url, options);\r\n                if (response.ok) {\r\n\r\n                    setBranches(branches.filter(branch => branch.branchCode !== branchId));\r\n                } else {\r\n                    console.error('Failed to delete branch:', response.statusText);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error deleting branch:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleEditPOS = (posId) => {\r\n\r\n        console.log(`Edit POS with ID: ${posId}`);\r\n    };\r\n\r\n    const handleDeletePOS = (posId) => {\r\n\r\n        console.log(`Delete POS with ID: ${posId}`);\r\n    };\r\n\r\n    const handleAddBranch = () => {\r\n        const newBranch = {\r\n            branchCode: Date.now(),\r\n            branchName: newBranchName,\r\n            location: newBranchLocation,\r\n            contact: newBranchContact,\r\n            subBranches: []\r\n        };\r\n        if (editingBranch) {\r\n\r\n            setBranches(branches.map(branch =>\r\n                branch.branchCode === editingBranch.branchCode ? newBranch : branch\r\n            ));\r\n            setEditingBranch(null);\r\n        } else {\r\n\r\n            setBranches([...branches, newBranch]);\r\n        }\r\n        setNewBranchName('');\r\n        setNewBranchType('');\r\n        setNewBranchLocation('');\r\n        setNewBranchContact('');\r\n        setVisible(false);\r\n    };\r\n\r\n  return (\r\n    //gue huuhde ene arai bishe \r\n    <div className=\"app-container d-flex flex-column\">\r\n      {/* <nav className=\"d-flex gap-5\">\r\n        <h3><CIcon icon={cilSettings} /> Тохиргоо</h3>\r\n        <div className='d-flex gap-3'> \r\n        <CButton onClick={() => {\r\n          setShowAddBranchButton(false);\r\n          setShowOrderSection(true); // Show the order section\r\n        }} color='primary'>Нэмэлт тохиргоо</CButton>\r\n        <CButton onClick={() => {\r\n          setShowAddBranchButton(true);\r\n          setShowOrderSection(false); // Hide the order section\r\n        }} color='primary' >Салбарууд</CButton>\r\n      </div>\r\n      </nav> */}\r\n      <CNavbar expand=\"lg\" className='border rounded-3'>\r\n        <CContainer fluid>\r\n          <CNavbarBrand > <h3><CIcon icon={cilSettings} /> Тохиргоо</h3></CNavbarBrand>\r\n          <CNavbarToggler\r\n            aria-label=\"Toggle navigation\"\r\n            aria-expanded={visible}\r\n            onClick={() => setVisible(!visible)}\r\n          />\r\n          <CCollapse className=\"navbar-collapse\" visible={visible}>\r\n            <CNavbarNav>\r\n              <CNavItem className={`${showOrderSection ? 'border-bottom fw-bold' : ''}`}>\r\n                <CNavLink active onClick={() => {\r\n                  setShowAddBranchButton(false);\r\n                  setShowOrderSection(true);\r\n                }}>\r\n                  Нэмэлт тохиргоо\r\n                </CNavLink>\r\n              </CNavItem>\r\n              <CNavItem className={`${showAddBranchButton ? 'border-bottom fw-bold' : ''} `}>\r\n                <CNavLink onClick={() => {\r\n                  setShowAddBranchButton(true);\r\n                  setShowOrderSection(false); // Hide the order section\r\n                }} className='cursour-pointer'>Салбарууд</CNavLink>\r\n              </CNavItem>\r\n              {/* <CNavItem>\r\n              <CNavLink href=\"#\" disabled>\r\n                Disabled\r\n              </CNavLink>\r\n            </CNavItem> */}\r\n            </CNavbarNav>\r\n          </CCollapse>\r\n        </CContainer>\r\n      </CNavbar>\r\n      <main className=\"content\">\r\n        <CCardBody className='mx-2'>\r\n          {showOrderSection && (\r\n            <CCard >\r\n              <CCardHeader>Нэмэлт тохиргоо</CCardHeader>\r\n              <CCardBody>\r\n                <CRow >\r\n                  <div className='d-flex justify-content-between'>\r\n                    <div className='d-flex flex-column gap-0'>\r\n                      <CFormLabel><b>Захиалга авах</b></CFormLabel>\r\n                      <CFormLabel className='md-2'><i>Захиалга хадгалах, засварлах, зөвшөөрөх  Дэлгэрэнгүй</i></CFormLabel></div>\r\n                    <CFormSwitch className='d-flex align-items-center' defaultChecked />\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className='d-flex justify-content-between'>\r\n                    <div className='d-flex flex-column gap-0'>\r\n                      <CFormLabel><b>Касс хүлээлцэх</b></CFormLabel>\r\n                      <CFormLabel><i>Кассын үлдэгдлийн хяналт, бүртгэлДэлгэрэнгүй</i></CFormLabel></div>\r\n                    <CFormSwitch className='d-flex align-items-center' defaultChecked />\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className='d-flex justify-content-between'>\r\n                    <div className='d-flex flex-column gap-0'>\r\n                      <CFormLabel><b>Цагийн тохиргоо</b></CFormLabel>\r\n                      <CFormLabel><i>Ажилчдын цагийн бүртгэл, цагийн тохируулгын хяналтДэлгэрэнгүй</i></CFormLabel></div>\r\n                    <CFormSwitch className='d-flex align-items-center' defaultChecked />\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className='d-flex justify-content-between'>\r\n                    <div className='d-flex flex-column gap-0'>\r\n                      <CFormLabel><b>Гал тогооны Захиалга</b></CFormLabel>\r\n                      <CFormLabel><i>Гал  тогооны захиалгыг баримт хэвлэгч болон дэлгэц рүү илгээхДэлгэрэнгүй</i></CFormLabel></div>\r\n                    <CFormSwitch className='d-flex align-items-center' defaultChecked />\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className='d-flex justify-content-between'>\r\n                    <div className='d-flex flex-column gap-0'>\r\n                      <CFormLabel><b>Хэрэглэгчийн дэлгэц</b></CFormLabel>\r\n                      <CFormLabel><i>Худалдан авалт хийхэд захиалгын мэдээллийг үйлчлүүлэгчид харуулахДэлгэрэнгүй</i></CFormLabel></div>\r\n                    <CFormSwitch className='d-flex align-items-center' defaultChecked />\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className='d-flex justify-content-between'>\r\n                    <div className='d-flex flex-column gap-0'>\r\n                      <CFormLabel><b>Хоолны төлөв</b></CFormLabel>\r\n                      <CFormLabel><i>Хоолны захиалгыг энд идэх, авч явах, хүргэлттэй гэсэн мөн бусад нэмэлт төлөвийг тэмдэглэх боломжтойДэлгэрэнгүй</i></CFormLabel></div>\r\n                    <CFormSwitch className='d-flex align-items-center' defaultChecked />\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className='d-flex justify-content-between'>\r\n                    <div className='d-flex flex-column gap-0'>\r\n                      <CFormLabel><b>Аюулгүй нөөцийн үлдэгдэл</b></CFormLabel>\r\n                      <CFormLabel><i>Цөөн буюу нөөцгүй барааны мэдээлэл авахДэлгэрэнгүй</i></CFormLabel></div>\r\n                    <CFormSwitch className='d-flex align-items-center' defaultChecked />\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className='d-flex justify-content-between'>\r\n                    <div className='d-flex flex-column gap-0'>\r\n                      <CFormLabel><b>Хасах борлуулалтын мэдээлэл</b></CFormLabel>\r\n                      <CFormLabel><i>Үлдэгдлээс их бараа зарагдах гэж байгааг касс дээр сануулахДэлгэрэнгүй</i></CFormLabel></div>\r\n                    <CFormSwitch className='d-flex align-items-center' defaultChecked />\r\n                  </div>\r\n                </CRow>\r\n                <CRow>\r\n                  <div className='d-flex justify-content-between'>\r\n                    <div className='d-flex flex-column gap-0'>\r\n                      <CFormLabel><b>Бар кодоос жин оруулах</b></CFormLabel>\r\n                      <CFormLabel><i>Жин оруулсан барааны бар кодыг уншихад жин бүртгэхДэлгэрэнгүй</i></CFormLabel></div>\r\n                    <CFormSwitch className='d-flex align-items-center' defaultChecked />\r\n                  </div>\r\n                </CRow>\r\n              </CCardBody>\r\n            </CCard>)}\r\n\r\n          <CCardBody className='max-2'>\r\n            {showOrderSection && (\r\n              <CCard>\r\n                <CCardHeader>Кассын төлбөрийн төрөл</CCardHeader>\r\n                <CCardBody>\r\n                  <CRow>\r\n                    <div className='d-flex justify-content-between'>\r\n                      <CButton color='primary'> +Төрөл нэмэх</CButton>\r\n                    </div>\r\n                    <CTable>\r\n                      <CTableHead>\r\n                        <CTableRow>\r\n                          <CTableHeaderCell><CFormCheck defaultChecked /></CTableHeaderCell>\r\n                          <CTableHeaderCell>Нэр</CTableHeaderCell>\r\n                          <CTableHeaderCell>Ангилал</CTableHeaderCell>\r\n                        </CTableRow>\r\n                      </CTableHead>\r\n                      <CTableBody>\r\n                        <CTableRow>\r\n                          <CTableDataCell><CFormCheck defaultChecked /></CTableDataCell>\r\n                          <CTableDataCell>Бэлэн мөнгө</CTableDataCell>\r\n                          <CTableDataCell>Бэлэн мөнгө</CTableDataCell>\r\n                        </CTableRow>\r\n                        <CTableRow>\r\n                          <CTableDataCell><CFormCheck defaultChecked /></CTableDataCell>\r\n                          <CTableDataCell>Дансаар</CTableDataCell>\r\n                          <CTableDataCell>Бэлэн бус</CTableDataCell>\r\n                        </CTableRow>\r\n                        <CTableRow>\r\n                          <CTableDataCell><CFormCheck defaultChecked /></CTableDataCell>\r\n                          <CTableDataCell>Картаар</CTableDataCell>\r\n                          <CTableDataCell>Бэлэн бус</CTableDataCell>\r\n                        </CTableRow>\r\n                        <CTableRow>\r\n                          <CTableDataCell><CFormCheck defaultChecked /></CTableDataCell>\r\n                          <CTableDataCell>Voucher</CTableDataCell>\r\n                          <CTableDataCell>Бэлэн бус</CTableDataCell>\r\n                        </CTableRow>\r\n                        <CTableRow>\r\n                          <CTableDataCell><CFormCheck defaultChecked /></CTableDataCell>\r\n                          <CTableDataCell>GiftCard</CTableDataCell>\r\n                          <CTableDataCell>Бусад</CTableDataCell>\r\n                        </CTableRow>\r\n                      </CTableBody>\r\n                    </CTable>\r\n                  </CRow>\r\n                </CCardBody>\r\n              </CCard>\r\n            )}\r\n\r\n            <CCardBody className='max-2'>\r\n              {showOrderSection && (\r\n                <CCard>\r\n                  <CCardHeader>НӨАТ-ын баримт хэвлэх</CCardHeader>\r\n                  <CCardBody>\r\n                    <div className=\"container mt-5\">\r\n                      {!showBarimt && (\r\n                        <CButton color='primary' onClick={handleToggleBarimtSection}>\r\n                          +Хүсэлт нэмэх\r\n                        </CButton>\r\n                      )}\r\n                      {showBarimt && (\r\n\r\n                                        <div className='mt-2'>\r\n\r\n                          <CFormLabel>Регистерийн дугаар</CFormLabel>\r\n                          <CInputGroup className='mb-2'>\r\n                            <CFormInput\r\n                              id=\"registrationNumber\"\r\n                              placeholder=\"Регистрийн дугаар\"\r\n                              value={registrationNumber}\r\n                              onChange={(e) => setRegistrationNumber(e.target.value)}\r\n                            />\r\n                            <CButton color=\"primary\" onClick={handleCheckRegistration}>Шалгах</CButton>\r\n                          </CInputGroup>\r\n                          <CFormLabel>Татвар төлөгчийн нэр</CFormLabel>\r\n                          <CFormInput\r\n                            id=\"taxPayerName\"\r\n                            placeholder=\"Татвар төлөгчийн нэр\"\r\n                            value={taxPayerName}\r\n                            readOnly\r\n                          />\r\n                          <CFormLabel>Татвар төлөгчийн дугаар</CFormLabel>\r\n                          <CFormInput\r\n                            id=\"taxpayerNo\"\r\n                            placeholder=\"Татвар төлөгчийн дугаар\"\r\n                            value={taxpayerNo}\r\n                            readOnly\r\n                          />\r\n                          <CFormCheck\r\n                            id=\"flexCheckDefault\"\r\n                            label=\"НӨАТ төлөгч эсэх\"\r\n                            checked={isVATPayer}\r\n                            readOnly\r\n                          />\r\n                        </div>\r\n\r\n                      )}\r\n                    </div>\r\n                    <CTable>\r\n\r\n                      <CTableRow>\r\n\r\n                        <CTableHeaderCell><CFormCheck /></CTableHeaderCell>\r\n                        <CTableHeaderCell>Салбар</CTableHeaderCell>\r\n                        <CTableHeaderCell>Дүүрэг/Аймаг</CTableHeaderCell>\r\n                        <CTableHeaderCell>Хороо/Сум </CTableHeaderCell>\r\n                        <CTableHeaderCell>Терминал</CTableHeaderCell>\r\n                        <CTableHeaderCell>Системийн төрөл </CTableHeaderCell>\r\n\r\n\r\n                      </CTableRow>\r\n                      <CTableDataCell><CFormCheck /></CTableDataCell>\r\n                      <CTableDataCell>hii</CTableDataCell>\r\n                      <CTableDataCell><CFormSelect\r\n                        value={selectedBranch}\r\n                        onChange={handleBranchChange}\r\n                      >\r\n                        <option value=\"\" disabled>Сонгоно уу...</option>\r\n                        {branches.map((branch) => (\r\n                          <option key={branch.branchCode} value={branch.branchCode}>\r\n                            {branch.branchName}\r\n                          </option>))}\r\n                      </CFormSelect></CTableDataCell>\r\n                      <CTableDataCell> <CFormSelect\r\n                    value=\"\"\r\n                    onChange={(handleBranchChange) => { }}\r\n                  >\r\n                    <option value=\"\" disabled>Сонгоно уу...</option>\r\n                    {subBranches.map((subBranch) => (\r\n                      <option key={subBranch.subBranchCode} value={subBranch.subBranchCode}>\r\n                        {subBranch.subBranchName}\r\n                      </option>\r\n                    ))}\r\n                    </CFormSelect>\r\n                      </CTableDataCell>\r\n\r\n                    </CTable>\r\n                  </CCardBody>\r\n                </CCard>\r\n              )}\r\n            </CCardBody>\r\n\r\n\r\n            <div >\r\n              {showAddBranchButton && (\r\n                <div >\r\n                  <div>\r\n                    <CButton color=\"primary\" onClick={() => setVisible(true)} >\r\n                      Салбар нэмэх\r\n                    </CButton>\r\n                    <CTable>\r\n                      <CTableHead>\r\n                        <CTableRow>\r\n                          <CTableHeaderCell>#</CTableHeaderCell>\r\n                          <CTableHeaderCell>Нэр</CTableHeaderCell>\r\n                          <CTableHeaderCell>Хаяг</CTableHeaderCell>\r\n                          <CTableHeaderCell>Пос тоо</CTableHeaderCell>\r\n                          <CTableHeaderCell>Actions</CTableHeaderCell>\r\n                        </CTableRow>\r\n                      </CTableHead>\r\n                      <CTableBody>\r\n                        {branches.map((branch, index) => (\r\n                          <CTableRow key={branch.branchCode}>\r\n                            <CTableDataCell>{index + 1}</CTableDataCell> {/* Order number */}\r\n                            <CTableDataCell>{branch.branchName}</CTableDataCell>\r\n                            <CTableDataCell>{branch.location || 'N/A'}</CTableDataCell>\r\n                            <CTableDataCell>{branch.subBranches.length}</CTableDataCell>\r\n                            <CTableDataCell>\r\n                              <CButton color=\"warning\" onClick={() => handleEditBranch(branch)}>\r\n                                <CIcon icon={cilPen}></CIcon>\r\n                              </CButton>\r\n                              <CButton color=\"danger\" onClick={() => handleDeleteBranch(branch.branchCode)}>\r\n                                <CIcon icon={cilX} />\r\n                              </CButton>\r\n                            </CTableDataCell>\r\n                          </CTableRow>\r\n                        ))}\r\n                      </CTableBody>\r\n                    </CTable>\r\n                  </div>\r\n                  <div>\r\n                    <CButton color=\"primary\" onClick={() => setPosFormVisible(true)}>\r\n                      Пос төхөөрөмж\r\n                    </CButton>\r\n                    <CTable>\r\n                      <CTableHead>\r\n                        <CTableRow>\r\n                          <CTableHeaderCell>#</CTableHeaderCell>\r\n                          <CTableHeaderCell>Нэр</CTableHeaderCell>\r\n                          <CTableHeaderCell>Салбар</CTableHeaderCell>\r\n                          <CTableHeaderCell>Төлөв</CTableHeaderCell>\r\n                          <CTableHeaderCell>Систем</CTableHeaderCell>\r\n                          <CTableHeaderCell>НӨАТ</CTableHeaderCell>\r\n                          <CTableHeaderCell>Actions</CTableHeaderCell>\r\n                        </CTableRow>\r\n                      </CTableHead>\r\n                      <CTableBody>\r\n                        {/* Add data rows here */}\r\n                        <CTableRow>\r\n                          <CTableDataCell>1</CTableDataCell>\r\n                          <CTableDataCell>POS Device 1</CTableDataCell>\r\n                          <CTableDataCell>Branch A</CTableDataCell>\r\n                          <CTableDataCell>Active</CTableDataCell>\r\n                          <CTableDataCell>Type 1</CTableDataCell>\r\n                          <CTableDataCell>VAT Included</CTableDataCell>\r\n                          <CTableDataCell>\r\n                            <CButton color=\"warning\" onClick={() => handleEditPOS(1)}>\r\n                              Edit\r\n                            </CButton>\r\n                            <CButton color=\"danger\" onClick={() => handleDeletePOS(1)}>\r\n                              Delete\r\n                            </CButton>\r\n                          </CTableDataCell>\r\n                        </CTableRow>\r\n                        {/* Add more data rows as needed */}\r\n                      </CTableBody>\r\n                    </CTable>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </CCardBody>\r\n\r\n          <CModal\r\n            visible={visible}\r\n            onClose={() => setVisible(false)}\r\n            aria-labelledby=\"LiveDemoExampleLabel\"\r\n          >\r\n            <CModalHeader>\r\n              <CModalTitle id=\"LiveDemoExampleLabel\">\r\n                {editingBranch ? 'Салбар засах' : 'Салбар бүртгүүлэх'}\r\n              </CModalTitle>\r\n            </CModalHeader>\r\n            <CModalBody>\r\n              <CForm className=\"row g-3\">\r\n                <CRow md={4}>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"OrganizationName\"\r\n                    label=\"Салбарын нэр\"\r\n                    value={newBranchName}\r\n                    onChange={(e) => setNewBranchName(e.target.value)}\r\n                  />\r\n                </CRow>\r\n                <CRow md={4}>\r\n                  <CFormSelect\r\n                    id=\"OrganizationType\"\r\n                    label=\"Салбарын төрөл\"\r\n                    value={newBranchType}\r\n                    onChange={(e) => setNewBranchType(e.target.value)}\r\n                  >\r\n                    <option value=\"\" disabled>Сонгоно уу...</option>\r\n                    <option value=\"store\">Дэлгүүр</option>\r\n                    <option value=\"restaurant\">Ресторан</option>\r\n                    <option value=\"fastfood\">Түргэн хоол</option>\r\n                    <option value=\"salon\">Салон</option>\r\n                    <option value=\"pharmacy\">Эмийн сан</option>\r\n                    <option value=\"hotel\">Зочид Буудал</option>\r\n                  </CFormSelect>\r\n                </CRow>\r\n                <CRow md={4}>\r\n                  <CFormSelect\r\n                    id=\"branchName\"\r\n                    label=\"Аймаг/Xот\"\r\n                    value={selectedBranch}\r\n                    onChange={handleBranchChange}\r\n                  >\r\n                    <option value=\"\" disabled>Сонгоно уу...</option>\r\n                    {branches.map((branch) => (\r\n                      <option key={branch.branchCode} value={branch.branchCode}>\r\n                        {branch.branchName}\r\n                      </option>\r\n                    ))}\r\n                  </CFormSelect>\r\n                </CRow>\r\n                <CRow md={4}>\r\n                  <CFormSelect\r\n                    id=\"subbranchName\"\r\n                    label=\"Cум/Дүүрэг\"\r\n                    value=\"\"\r\n                    onChange={(handleBranchChange) => { }}\r\n                  >\r\n                    <option value=\"\" disabled>Сонгоно уу...</option>\r\n                    {subBranches.map((subBranch) => (\r\n                      <option key={subBranch.subBranchCode} value={subBranch.subBranchCode}>\r\n                        {subBranch.subBranchName}\r\n                      </option>\r\n                    ))}\r\n                  </CFormSelect>\r\n                </CRow>\r\n                <CRow md={4}>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"branchAddress\"\r\n                    label=\"Салбарын хаяг\"\r\n                    value={newBranchLocation}\r\n                    onChange={(e) => setNewBranchLocation(e.target.value)}\r\n                  />\r\n                </CRow>\r\n                <CRow md={3}>\r\n\r\n\r\n                  <CIcon icon={cilAirplay}></CIcon>\r\n                </CRow>\r\n\r\n                <CRow md={3}>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"branchPhoneNumber\"\r\n                    label=\"Утас\"\r\n                    value={newBranchContact}\r\n                    onChange={(e) => setNewBranchContact(e.target.value)}\r\n                  />\r\n                </CRow>\r\n\r\n                <CCol xs={12}>\r\n                  <CButton color=\"primary\" type=\"button\" onClick={handleAddBranch}>\r\n                    Save changes\r\n                  </CButton>\r\n                </CCol>\r\n              </CForm>\r\n            </CModalBody>\r\n            <CModalFooter>\r\n              <CButton color=\"secondary\" onClick={() => setVisible(false)}>\r\n              </CButton>\r\n            </CModalFooter>\r\n          </CModal>\r\n\r\n          <CModal\r\n            visible={posFormVisible}\r\n            onClose={() => setPosFormVisible(false)}\r\n            aria-labelledby=\"PosModalLabel\"\r\n          >\r\n            <CModalHeader>\r\n              <CModalTitle id=\"PosModalLabel\">ПОС төхөөрөмж бүртгүүлэх</CModalTitle>\r\n            </CModalHeader>\r\n            <CModalBody>\r\n              <CForm className=\"row g-3\">\r\n                <CRow md={4}>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"posName\"\r\n                    label=\"ПОС нэр\"\r\n                  />\r\n                </CRow>\r\n                <CRow md={4}>\r\n                  <CFormSelect\r\n                    id=\"posBranch\"\r\n                    label=\"Салбар\"\r\n                    value=\"\"\r\n                    onChange={() => { }}\r\n                  >\r\n                    <option value=\"\" disabled>Сонгоно уу...</option>\r\n                    {branches.map((branch) => (\r\n                      <option key={branch.branchCode} value={branch.branchCode}>\r\n                        {branch.branchName}\r\n                      </option>\r\n                    ))}\r\n                  </CFormSelect>\r\n                </CRow>\r\n                <CRow md={4}>\r\n                  <CFormSelect\r\n                    id=\"posSystemType\"\r\n                    label=\"Системийн төрөл\"\r\n                    value=\"\"\r\n                    onChange={() => { }}\r\n                  >\r\n                    <option value=\"\" disabled>Сонгоно уу...</option>\r\n                    <option value=\"type1\">Төрөл 1</option>\r\n                    <option value=\"type2\">Төрөл 2</option>\r\n                    <option value=\"type3\">Төрөл 3</option>\r\n                  </CFormSelect>\r\n                </CRow>\r\n\r\n              </CForm>\r\n            </CModalBody>\r\n            <CModalFooter>\r\n            </CModalFooter>\r\n          </CModal>\r\n\r\n        </CCardBody>\r\n      </main>\r\n    </div >\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\nexport default Settings;\r\n","export var cilSettings = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M245.151,168a88,88,0,1,0,88,88A88.1,88.1,0,0,0,245.151,168Zm0,144a56,56,0,1,1,56-56A56.063,56.063,0,0,1,245.151,312Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M464.7,322.319l-31.77-26.153a193.081,193.081,0,0,0,0-80.332l31.77-26.153a19.941,19.941,0,0,0,4.606-25.439l-32.612-56.483a19.936,19.936,0,0,0-24.337-8.73l-38.561,14.447a192.038,192.038,0,0,0-69.54-40.192L297.49,32.713A19.936,19.936,0,0,0,277.762,16H212.54a19.937,19.937,0,0,0-19.728,16.712L186.05,73.284a192.03,192.03,0,0,0-69.54,40.192L77.945,99.027a19.937,19.937,0,0,0-24.334,8.731L21,164.245a19.94,19.94,0,0,0,4.61,25.438l31.767,26.151a193.081,193.081,0,0,0,0,80.332l-31.77,26.153A19.942,19.942,0,0,0,21,347.758l32.612,56.483a19.937,19.937,0,0,0,24.337,8.73l38.562-14.447a192.03,192.03,0,0,0,69.54,40.192l6.762,40.571A19.937,19.937,0,0,0,212.54,496h65.222a19.936,19.936,0,0,0,19.728-16.712l6.763-40.572a192.038,192.038,0,0,0,69.54-40.192l38.564,14.449a19.938,19.938,0,0,0,24.334-8.731L469.3,347.755A19.939,19.939,0,0,0,464.7,322.319Zm-50.636,57.12-48.109-18.024-7.285,7.334a159.955,159.955,0,0,1-72.625,41.973l-10,2.636L267.6,464h-44.89l-8.442-50.642-10-2.636a159.955,159.955,0,0,1-72.625-41.973l-7.285-7.334L76.241,379.439,53.8,340.562l39.629-32.624-2.7-9.973a160.9,160.9,0,0,1,0-83.93l2.7-9.972L53.8,171.439l22.446-38.878,48.109,18.024,7.285-7.334a159.955,159.955,0,0,1,72.625-41.973l10-2.636L222.706,48H267.6l8.442,50.642,10,2.636a159.955,159.955,0,0,1,72.625,41.973l7.285,7.334,48.109-18.024,22.447,38.877-39.629,32.625,2.7,9.972a160.9,160.9,0,0,1,0,83.93l-2.7,9.973,39.629,32.623Z' class='ci-primary'/>\"];\n","import React, { forwardRef, HTMLAttributes, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { useForkedRef } from '../../hooks'\n\nexport interface CBackdropProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Toggle the visibility of modal component.\n   */\n  visible?: boolean\n}\n\nexport const CBackdrop = forwardRef<HTMLDivElement, CBackdropProps>(\n  ({ className = 'modal-backdrop', visible, ...rest }, ref) => {\n    const backdropRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, backdropRef)\n\n    return (\n      <Transition in={visible} mountOnEnter nodeRef={backdropRef} timeout={150} unmountOnExit>\n        {(state) => (\n          <div\n            className={classNames(className, 'fade', {\n              show: state === 'entered',\n            })}\n            {...rest}\n            ref={forkedRef}\n          />\n        )}\n      </Transition>\n    )\n  },\n)\n\nCBackdrop.propTypes = {\n  className: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nCBackdrop.displayName = 'CBackdrop'\n","import React, { FC, ReactNode, useEffect, useState } from 'react'\nimport { createPortal } from 'react-dom'\nimport PropTypes from 'prop-types'\n\nconst getContainer = (container?: Element | (() => Element | null) | null) => {\n  if (container) {\n    return typeof container === 'function' ? container() : container\n  }\n\n  return document.body\n}\n\nexport interface CConditionalPortalProps {\n  /**\n   * @ignore\n   */\n  children: ReactNode\n  /**\n   * An HTML element or function that returns a single element, with `document.body` as the default.\n   *\n   * @since v4.11.0\n   */\n  container?: Element | (() => Element | null) | null\n  /**\n   * Render some children into a different part of the DOM\n   */\n  portal: boolean | any\n}\n\nexport const CConditionalPortal: FC<CConditionalPortalProps> = ({\n  children,\n  container,\n  portal,\n}) => {\n  const [_container, setContainer] = useState<ReturnType<typeof getContainer>>(null)\n\n  useEffect(() => {\n    portal && setContainer(getContainer(container) || document.body)\n  }, [container, portal])\n\n  return typeof window !== 'undefined' && portal && _container ? (\n    createPortal(children, _container)\n  ) : (\n    <>{children}</>\n  )\n}\n\nCConditionalPortal.propTypes = {\n  children: PropTypes.node,\n  container: PropTypes.any, // HTMLElement\n  portal: PropTypes.bool,\n}\n\nCConditionalPortal.displayName = 'CConditionalPortal'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalContentProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalContent = forwardRef<HTMLDivElement, CModalContentProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-content', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalContent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalContent.displayName = 'CModalContent'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalDialogProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Align the modal in the center or top of the screen.\n   */\n  alignment?: 'top' | 'center'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Set modal to covers the entire user viewport.\n   */\n  fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Does the modal dialog itself scroll, or does the whole dialog scroll within the window.\n   */\n  scrollable?: boolean\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n}\n\nexport const CModalDialog = forwardRef<HTMLDivElement, CModalDialogProps>(\n  ({ children, alignment, className, fullscreen, scrollable, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'modal-dialog',\n          {\n            'modal-dialog-centered': alignment === 'center',\n            [typeof fullscreen === 'boolean'\n              ? 'modal-fullscreen'\n              : `modal-fullscreen-${fullscreen}-down`]: fullscreen,\n            'modal-dialog-scrollable': scrollable,\n            [`modal-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalDialog.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  fullscreen: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n}\n\nCModalDialog.displayName = 'CModalDialog'\n","import React, {\n  createContext,\n  forwardRef,\n  HTMLAttributes,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CBackdrop } from '../backdrop'\nimport { CConditionalPortal } from '../conditional-portal'\nimport { CModalContent } from './CModalContent'\nimport { CModalDialog } from './CModalDialog'\n\nimport { useForkedRef } from '../../hooks'\n\nexport interface CModalProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Align the modal in the center or top of the screen.\n   */\n  alignment?: 'top' | 'center'\n  /**\n   * Apply a backdrop on body while modal is open.\n   */\n  backdrop?: boolean | 'static'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * @ignore\n   */\n  duration?: number\n  /**\n   * Puts the focus on the modal when shown.\n   *\n   * @since v4.10.0\n   */\n  focus?: boolean\n  /**\n   * Set modal to covers the entire user viewport.\n   */\n  fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Closes the modal when escape key is pressed.\n   */\n  keyboard?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClosePrevented?: () => void\n  /**\n   * Callback fired when the modal is shown, its backdrop is static and a click outside the modal or an escape key press is performed with the keyboard option set to false.\n   */\n  onShow?: () => void\n  /**\n   * Generates modal using createPortal.\n   */\n  portal?: boolean\n  /**\n   * Create a scrollable modal that allows scrolling the modal body.\n   */\n  scrollable?: boolean\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n  /**\n   * Remove animation to create modal that simply appear rather than fade in to view.\n   */\n  transition?: boolean\n  /**\n   * By default the component is unmounted after close animation, if you want to keep the component mounted set this property to false.\n   */\n  unmountOnClose?: boolean\n  /**\n   * Toggle the visibility of modal component.\n   */\n  visible?: boolean\n}\n\ninterface ModalContextProps {\n  visible?: boolean\n  setVisible: React.Dispatch<React.SetStateAction<boolean | undefined>>\n}\n\nexport const CModalContext = createContext({} as ModalContextProps)\n\nexport const CModal = forwardRef<HTMLDivElement, CModalProps>(\n  (\n    {\n      children,\n      alignment,\n      backdrop = true,\n      className,\n      duration = 150,\n      focus = true,\n      fullscreen,\n      keyboard = true,\n      onClose,\n      onClosePrevented,\n      onShow,\n      portal = true,\n      scrollable,\n      size,\n      transition = true,\n      unmountOnClose = true,\n      visible,\n      ...rest\n    },\n    ref,\n  ) => {\n    const activeElementRef = useRef<HTMLElement | null>(null)\n    const modalRef = useRef<HTMLDivElement>(null)\n    const modalContentRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, modalRef)\n\n    const [_visible, setVisible] = useState(visible)\n    const [staticBackdrop, setStaticBackdrop] = useState(false)\n\n    const contextValues = {\n      visible: _visible,\n      setVisible,\n    }\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      if (_visible) {\n        activeElementRef.current = document.activeElement as HTMLElement | null\n        document.addEventListener('mouseup', handleClickOutside)\n        document.addEventListener('keydown', handleKeyDown)\n      } else {\n        activeElementRef.current?.focus()\n      }\n\n      return () => {\n        document.removeEventListener('mouseup', handleClickOutside)\n        document.removeEventListener('keydown', handleKeyDown)\n      }\n    }, [_visible])\n\n    const handleDismiss = () => {\n      if (backdrop === 'static') {\n        return setStaticBackdrop(true)\n      }\n\n      setVisible(false)\n\n      return onClose && onClose()\n    }\n\n    useLayoutEffect(() => {\n      onClosePrevented && onClosePrevented()\n      setTimeout(() => setStaticBackdrop(false), duration)\n    }, [staticBackdrop])\n\n    // Set focus to modal after open\n    useLayoutEffect(() => {\n      if (_visible) {\n        document.body.classList.add('modal-open')\n\n        if (backdrop) {\n          document.body.style.overflow = 'hidden'\n          document.body.style.paddingRight = '0px'\n        }\n\n        setTimeout(\n          () => {\n            focus && modalRef.current?.focus()\n          },\n          transition ? duration : 0,\n        )\n      } else {\n        document.body.classList.remove('modal-open')\n\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n\n      return () => {\n        document.body.classList.remove('modal-open')\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n    }, [_visible])\n\n    const handleClickOutside = (event: Event) => {\n      if (modalRef.current && modalRef.current == event.target) {\n        handleDismiss()\n      }\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && keyboard) {\n        handleDismiss()\n      }\n    }\n\n    return (\n      <>\n        <Transition\n          in={_visible}\n          mountOnEnter\n          nodeRef={modalRef}\n          onEnter={onShow}\n          onExit={onClose}\n          unmountOnExit={unmountOnClose}\n          timeout={transition ? duration : 0}\n        >\n          {(state) => (\n            <CConditionalPortal portal={portal}>\n              <CModalContext.Provider value={contextValues}>\n                <div\n                  className={classNames(\n                    'modal',\n                    {\n                      'modal-static': staticBackdrop,\n                      fade: transition,\n                      show: state === 'entered',\n                    },\n                    className,\n                  )}\n                  tabIndex={-1}\n                  {...(_visible\n                    ? { 'aria-modal': true, role: 'dialog' }\n                    : { 'aria-hidden': 'true' })}\n                  style={{\n                    ...(state !== 'exited' && { display: 'block' }),\n                  }}\n                  {...rest}\n                  ref={forkedRef}\n                >\n                  <CModalDialog\n                    alignment={alignment}\n                    fullscreen={fullscreen}\n                    scrollable={scrollable}\n                    size={size}\n                  >\n                    <CModalContent ref={modalContentRef}>{children}</CModalContent>\n                  </CModalDialog>\n                </div>\n              </CModalContext.Provider>\n            </CConditionalPortal>\n          )}\n        </Transition>\n        {backdrop && (\n          <CConditionalPortal portal={portal}>\n            <CBackdrop visible={_visible} />\n          </CConditionalPortal>\n        )}\n      </>\n    )\n  },\n)\n\nCModal.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'static'>(['static'])]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  duration: PropTypes.number,\n  focus: PropTypes.bool,\n  fullscreen: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  keyboard: PropTypes.bool,\n  onClose: PropTypes.func,\n  onClosePrevented: PropTypes.func,\n  onShow: PropTypes.func,\n  portal: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n  transition: PropTypes.bool,\n  unmountOnClose: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCModal.displayName = 'CModal'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalBody = forwardRef<HTMLDivElement, CModalBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalBody.displayName = 'CModalBody'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalFooterProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalFooter = forwardRef<HTMLDivElement, CModalFooterProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-footer', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalFooter.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalFooter.displayName = 'CModalFooter'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\nimport { CModalContext } from './CModal'\n\nexport interface CModalHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Add a close button component to the header.\n   */\n  closeButton?: boolean\n}\n\nexport const CModalHeader = forwardRef<HTMLDivElement, CModalHeaderProps>(\n  ({ children, className, closeButton = true, ...rest }, ref) => {\n    const { setVisible } = useContext(CModalContext)\n\n    return (\n      <div className={classNames('modal-header', className)} {...rest} ref={ref}>\n        {children}\n        {closeButton && <CCloseButton onClick={() => setVisible(false)} />}\n      </div>\n    )\n  },\n)\n\nCModalHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool,\n}\n\nCModalHeader.displayName = 'CModalHeader'\n","import React, { ElementType, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CNavLink, CNavLinkProps } from './CNavLink'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CNavItemProps extends Omit<CNavLinkProps, 'component'> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   *\n   * @since 5.0.0\n   */\n  as?: ElementType\n}\n\nexport const CNavItem: PolymorphicRefForwardingComponent<'li', CNavItemProps> = forwardRef<\n  HTMLLIElement,\n  CNavItemProps\n>(({ children, as: Component = 'li', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('nav-item', className)} ref={ref}>\n      {rest.href || rest.to ? (\n        <CNavLink className={className} {...rest}>\n          {children}\n        </CNavLink>\n      ) : (\n        children\n      )}\n    </Component>\n  )\n})\n\nCNavItem.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCNavItem.displayName = 'CNavItem'\n","import React, { forwardRef, useContext, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CLinkProps, CLink } from '../link/CLink'\nimport { CNavContext } from '../sidebar/CSidebarNav'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { useForkedRef } from '../../hooks'\n\nexport interface CNavLinkProps extends Omit<CLinkProps, 'idx'> {\n  /**\n   * @ignore\n   */\n  idx?: string\n  /**\n   * @ignore\n   */\n  to?: string\n}\n\nexport const CNavLink: PolymorphicRefForwardingComponent<'a', CNavLinkProps> = forwardRef<\n  HTMLButtonElement | HTMLAnchorElement,\n  CNavLinkProps\n>(({ children, className, idx, ...rest }, ref) => {\n  const navLinkRef = useRef<HTMLAnchorElement>(null)\n  const forkedRef = useForkedRef(ref, navLinkRef)\n\n  const { setVisibleGroup } = useContext(CNavContext)\n\n  useEffect(() => {\n    rest.active = navLinkRef.current?.classList.contains('active')\n    idx && rest.active && setVisibleGroup(idx)\n  }, [rest.active, className])\n\n  return (\n    <CLink className={classNames('nav-link', className)} {...rest} ref={forkedRef}>\n      {children}\n    </CLink>\n  )\n})\n\nCNavLink.propTypes = {\n  active: PropTypes.bool,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  idx: PropTypes.string,\n}\n\nCNavLink.displayName = 'CNavLink'\n","import React, {\n  createContext,\n  ElementType,\n  forwardRef,\n  HTMLAttributes,\n  ReactElement,\n  ReactNode,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CSidebarNavProps extends HTMLAttributes<HTMLUListElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   *\n   * @since 5.0.0\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\ninterface ContextProps {\n  visibleGroup: string\n  setVisibleGroup: React.Dispatch<React.SetStateAction<string | undefined>>\n}\n\nexport const CNavContext = createContext({} as ContextProps)\n\nconst recursiveClone = (children: ReactNode, id?: string, updateId?: boolean): ReactNode => {\n  return React.Children.map(children, (child: ReactNode, index: number) => {\n    if (\n      !React.isValidElement(child) ||\n      // @ts-expect-error the `children` exist in each component. TODO: resolve\n      (child.type.displayName !== 'CNavGroup' &&\n        // @ts-expect-error the `children` exist in each component. TODO: resolve\n        child.type.displayName !== 'CNavLink' &&\n        // @ts-expect-error the `children` exist in each component. TODO: resolve\n        child.type.displayName !== 'CNavItem')\n    ) {\n      return child\n    }\n\n    const _id = id ? (updateId ? `${id}.${index}` : `${id}`) : `${index}`\n\n    if (child.props && child.props.children) {\n      return React.cloneElement(child as ReactElement<any>, {\n        idx: _id,\n        children: recursiveClone(\n          child.props.children,\n          _id,\n          // @ts-expect-error the `displayName` exist in each component. TODO: resolve\n          child.type.displayName === 'CNavItem' ? false : true,\n        ),\n      })\n    }\n\n    return React.cloneElement(child as ReactElement<any>, {\n      idx: _id,\n    })\n  })\n}\n\nexport const CSidebarNav: PolymorphicRefForwardingComponent<'ul', CSidebarNavProps> = forwardRef<\n  HTMLUListElement,\n  CSidebarNavProps\n>(({ children, as: Component = 'ul', className, ...rest }, ref) => {\n  const [visibleGroup, setVisibleGroup] = useState('')\n  const CNavContextValues = {\n    visibleGroup,\n    setVisibleGroup,\n  }\n\n  return (\n    <CNavContext.Provider value={CNavContextValues}>\n      <Component className={classNames('sidebar-nav', className)} ref={ref} {...rest}>\n        {recursiveClone(children)}\n      </Component>\n    </CNavContext.Provider>\n  )\n})\n\nCSidebarNav.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCSidebarNav.displayName = 'CSidebarNav'\n"],"names":["Settings","visible","setVisible","useState","showBarimt","setshowBarimt","posFormVisible","setPosFormVisible","branches","setBranches","subBranches","setSubBranches","selectedBranch","setSelectedBranch","showAddBranchButton","setShowAddBranchButton","showOrderSection","setShowOrderSection","registrationNumber","setRegistrationNumber","taxPayerName","setTaxPayerName","taxpayerNo","setTaxpayerNo","isVATPayer","setIsVATPayer","newBranchName","setNewBranchName","newBranchType","setNewBranchType","newBranchLocation","setNewBranchLocation","newBranchContact","setNewBranchContact","editingBranch","setEditingBranch","useEffect","async","options","method","headers","Accept","response","fetch","data","json","console","log","dataArray","Array","isArray","groupedBranches","reduce","acc","curr","branchCode","branchName","subBranchCode","subBranchName","location","contact","push","Object","values","error","fetchBranches","handleBranchChange","event","branchId","target","value","selectedBranchData","find","branch","_jsxs","className","children","_jsx","CNavbar","expand","CContainer","fluid","CNavbarBrand","CIcon","icon","cilSettings","CNavbarToggler","onClick","CCollapse","CNavbarNav","CNavItem","concat","CNavLink","active","CCardBody","CCard","CCardHeader","CRow","CFormLabel","CFormSwitch","defaultChecked","CButton","color","CTable","CTableHead","CTableRow","CTableHeaderCell","CFormCheck","CTableBody","CTableDataCell","handleToggleBarimtSection","CInputGroup","CFormInput","id","placeholder","onChange","e","firstApiUrl","firstApiOptions","firstApiResponse","firstApiData","tin","secondApiUrl","secondApiOptions","secondApiResponse","secondApiData","name","vatPayer","readOnly","label","checked","CFormSelect","disabled","map","subBranch","index","length","handleEditBranch","cilPen","window","confirm","url","ok","filter","statusText","handleDeleteBranch","cilX","handleEditPOS","posId","handleDeletePOS","CModal","onClose","CModalHeader","CModalTitle","CModalBody","CForm","md","type","cilAirplay","CCol","xs","handleAddBranch","newBranch","Date","now","CModalFooter","CBackdrop","forwardRef","_a","ref","_b","rest","__rest","backdropRef","useRef","forkedRef","useForkedRef","React","Transition","in","mountOnEnter","nodeRef","timeout","unmountOnExit","state","__assign","classNames","show","propTypes","PropTypes","displayName","CConditionalPortal","container","portal","_container","setContainer","document","body","getContainer","createPortal","CModalContent","CModalDialog","alignment","fullscreen","scrollable","size","CModalContext","createContext","backdrop","_c","duration","_d","focus","_e","keyboard","onClosePrevented","onShow","_f","_g","transition","_h","unmountOnClose","activeElementRef","modalRef","modalContentRef","_j","_visible","_k","staticBackdrop","setStaticBackdrop","contextValues","current","activeElement","addEventListener","handleClickOutside","handleKeyDown","removeEventListener","handleDismiss","useLayoutEffect","setTimeout","classList","add","style","overflow","paddingRight","remove","removeProperty","key","onEnter","onExit","Provider","fade","tabIndex","role","display","closeButton","useContext","CCloseButton","as","Component","href","to","idx","navLinkRef","setVisibleGroup","CNavContext","contains","CLink","recursiveClone","updateId","child","_id","props","CSidebarNav","CNavContextValues","visibleGroup"],"sourceRoot":""}
{"version":3,"file":"static/js/9951.4c7b262e.chunk.js","mappings":"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","sources":["../node_modules/react-leaflet/lib/hooks.js","views/settings/addBranch.js","views/settings/branch.js","../node_modules/@coreui/icons/src/free/cil-location-pin.ts","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx","../node_modules/@coreui/react/src/components/image/CImage.tsx","../node_modules/@coreui/react/src/components/modal/CModalTitle.tsx"],"sourcesContent":["import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n    return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n    const map = useMap();\n    useEffect(function addMapEventHandler() {\n        // @ts-ignore event type\n        map.on(type, handler);\n        return function removeMapEventHandler() {\n            // @ts-ignore event type\n            map.off(type, handler);\n        };\n    }, [\n        map,\n        type,\n        handler\n    ]);\n    return map;\n}\nexport function useMapEvents(handlers) {\n    const map = useMap();\n    useEffect(function addMapEventHandlers() {\n        map.on(handlers);\n        return function removeMapEventHandlers() {\n            map.off(handlers);\n        };\n    }, [\n        map,\n        handlers\n    ]);\n    return map;\n}\n","/* eslint-disable no-undef */\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CForm,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormSelect,\r\n  CRow,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CInputGroup,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { cilAirplay, cilLocationPin } from \"@coreui/icons\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n  useMapEvents,\r\n} from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\nimport markerIconPng from \"leaflet/dist/images/marker-icon.png\";\r\nimport markerShadowPng from \"leaflet/dist/images/marker-shadow.png\";\r\nimport PropTypes from \"prop-types\";\r\nimport uploadsPhoto from \"../settings/photos/upload.png\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./branch\";\r\nimport { logo } from \"src/assets/brand/logo\";\r\nconst defaultIcon = L.icon({\r\n  iconUrl: markerIconPng,\r\n  shadowUrl: markerShadowPng,\r\n  iconAnchor: [12, 41], // Adjust as needed\r\n});\r\n\r\n// Geocode the zip code to latitude and longitude\r\nconst geocodeZipCode = async (zipCode) => {\r\n  const url = `https://nominatim.openstreetmap.org/search?postalcode=${zipCode}&format=json&addressdetails=1`;\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    if (data && data.length > 0) {\r\n      const { lat, lon } = data[0];\r\n      return [parseFloat(lat), parseFloat(lon)];\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(\"Error fetching location data:\", error);\r\n    return null;\r\n  }\r\n};\r\nconst LocationMarker = ({\r\n  setPosition,\r\n  setNewBranchLocationLat,\r\n  setNewBranchLocationLng,\r\n}) => {\r\n  const [markerPosition, setMarkerPosition] = useState(null);\r\n\r\n  useMapEvents({\r\n    click(e) {\r\n      const { lat, lng } = e.latlng;\r\n      setMarkerPosition([lat, lng]);\r\n      setPosition([lat, lng]);\r\n      setNewBranchLocationLat(lat);\r\n      setNewBranchLocationLng(lng);\r\n    },\r\n  });\r\n\r\n  return markerPosition ? (\r\n    <Marker position={markerPosition} icon={defaultIcon}>\r\n      <Popup>You selected this location</Popup>\r\n    </Marker>\r\n  ) : null;\r\n};\r\n// Add PropTypes validation\r\nLocationMarker.propTypes = {\r\n  setPosition: PropTypes.func.isRequired,\r\n  setNewBranchLocationLat: PropTypes.func.isRequired,\r\n  setNewBranchLocationLng: PropTypes.func.isRequired,\r\n};\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst AddBranch = ({ visible, setVisible, edit, editBranch,refresh }) => {\r\n  const [branches, setBranches] = useState([]);\r\n  const [subBranches, setSubBranches] = useState([]);\r\n  const [selectedBranch, setSelectedBranch] = useState(\"\");\r\n  const [selectedSubBranch, setSelectedSubBranch] = useState(\"\");\r\n  const [newBranchName, setNewBranchName] = useState(\"\");\r\n  const [newBranchLocationLat, setNewBranchLocationLat] = useState(\"\");\r\n  const [newBranchLocationLng, setNewBranchLocationLng] = useState(\"\");\r\n  const [newBranchContact, setNewBranchContact] = useState(\"\");\r\n  const [newBranchAddress, setNewBranchAddress] = useState(\"\");\r\n  const [newBranchType, setNewBranchType] = useState(\"\");\r\n  const [branchPosition, setBranchPosition] = useState([51.505, -0.09]);\r\n  const [subBranchPosition, setSubBranchPosition] = useState([51.505, -0.09]);\r\n  const [showMapModal, setShowMapModal] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [filepath, setFilePath] = useState(\"\");\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [editData, setEditData] = useState([]);\r\n\r\n  const userId = localStorage.getItem(\"userId\");\r\n  const getImages = async (logoSmallUrl) => {\r\n    const url = `https://api.majorsoft.mn/api/branchService/download/${logoSmallUrl}`;\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: { Accept: \"application/json\" },\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const data = await response.json();\r\n    } catch (error) {\r\n      console.error(\"Error fetching branch data:\", error);\r\n    }\r\n  };\r\n  // Fetch branch data from API\r\n  useEffect(() => {\r\n    if (editBranch) {\r\n      setEditData(editBranch);\r\n    }\r\n\r\n    //brunch uusgeh\r\n    const fetchBranches = async () => {\r\n      const url = \"https://api.ebarimt.mn/api/info/check/getBranchInfo\";\r\n      const options = {\r\n        method: \"GET\",\r\n        headers: { Accept: \"application/json\" },\r\n      };\r\n\r\n      try {\r\n        const response = await fetch(url, options);\r\n        const data = await response.json();\r\n        const dataArray = Array.isArray(data) ? data : data.data || [];\r\n\r\n        if (Array.isArray(dataArray)) {\r\n          const groupedBranches = dataArray.reduce((acc, curr) => {\r\n            const {\r\n              branchName,\r\n              branchCode,\r\n              subBranchCode,\r\n              subBranchName,\r\n              latitude,\r\n              longitude,\r\n              zipCode,\r\n            } = curr;\r\n            if (!acc[branchCode]) {\r\n              acc[branchCode] = {\r\n                branchCode,\r\n                branchName,\r\n                subBranchCode,\r\n                location: { latitude, longitude },\r\n                zipCode,\r\n                subBranches: [],\r\n              };\r\n            }\r\n            acc[branchCode].subBranches.push({\r\n              subBranchCode,\r\n              subBranchName,\r\n              location: { latitude, longitude },\r\n              zipCode,\r\n            });\r\n            return acc;\r\n          }, {});\r\n          setBranches(Object.values(groupedBranches));\r\n        } else {\r\n          console.error(\"Unexpected data format:\", dataArray);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching branch data:\", error);\r\n      }\r\n        };\r\n\r\n    fetchBranches();\r\n  }, []);\r\n  useEffect (()=>{\r\n    if (editData){\r\n     \r\n    }\r\n  },[editData]);\r\n\r\n  const handleBranchChange = (e) => {\r\n    const selectedBranchCode = e.target.value;\r\n    const branch = branches.find(b => b.branchCode === selectedBranchCode);\r\n    if (branch && branch.subBranches) {\r\n      setSubBranches(branch.subBranches);\r\n      setSelectedBranch(selectedBranchCode);\r\n    } else {\r\n      setSubBranches([]); // Clear if no sub-branches\r\n    }\r\n  };\r\n  \r\n\r\n  // Handle sub-branch selection\r\n  const handleSubBranchChange = (e) => {\r\n    const subBranchId = e.target.value;\r\n    setSelectedSubBranch(subBranchId);\r\n  };\r\n  const handlePhotoUpload = async (file) => {\r\n    if (file) {\r\n      const formData = new FormData();\r\n      formData.append(\"imageFile\", file);\r\n//zurag\r\n      try {\r\n        const response = await fetch(\r\n          `https://api.majorsoft.mn/api/branchService/uploadImage`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n            },\r\n            body: formData,\r\n          },\r\n        );\r\n\r\n        if (!response.ok) {\r\n          const errorDetails = await response.text();\r\n          console.error(\"Error uploading photo:\", errorDetails);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setFilePath(data.filePath);\r\n        return null;\r\n      } catch (error) {\r\n        console.error(\"Error uploading photo:\", error);\r\n        return null;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleAddBranch = async () => {\r\n   \r\n\r\n      const token = localStorage.getItem(\"token\");\r\n      const branchData = {\r\n        branchId:editData.branchId,\r\n        merchantId:editData.merchantId,\r\n        branchName: newBranchName || editData.branchName,\r\n        businessTypeId: newBranchType || editData.businessTypeId,\r\n        branchCode: selectedBranch || editData.branchCode,\r\n        subBranchCode: selectedSubBranch || editData.subBranchCode,\r\n        locationLat: String(newBranchLocationLat) || editData.locationLat,\r\n        locationLng: String(newBranchLocationLng) || editData.locationlng,\r\n        phone: newBranchContact || editData.phone,\r\n        address: newBranchAddress || editData.address,\r\n        logoSmall: filepath || String(editData.logoSmall),\r\n        createUserId: userId,\r\n      };\r\n\r\n      if (edit) {\r\n        if (!editData.branchName || !editData.phone) {\r\n          alert(\"Please fill in all required fields.\");\r\n          return;\r\n        }\r\n      const formData = new FormData();\r\n      Object.keys(branchData).forEach((key) => {\r\n        formData.append(key, branchData[key]);\r\n      });\r\n\r\n      const requestOptions = {\r\n        method: \"PUT\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(branchData),\r\n      };\r\n\r\n      try {\r\n        const response = await fetch(\r\n          `https://api.majorsoft.mn/api/branchService`,\r\n          requestOptions,\r\n        );\r\n        const result = await response.json();\r\n\r\n        if (result.success) {\r\n          setVisible()\r\n          refresh()\r\n        } \r\n      } catch (error) {\r\n        console.error(\"Error updating branch data:\", error);\r\n      }\r\n    } else {\r\n      if (\r\n        !newBranchName ||\r\n        !newBranchLocationLat ||\r\n        !newBranchContact ||\r\n        !newBranchType\r\n      ) {\r\n        alert(\"Please fill in all required fields.\");\r\n        return;\r\n      }\r\n//Nemeh\r\n      try {\r\n        const response = await fetch(\r\n          \"https://api.majorsoft.mn/api/branchService\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n            },\r\n            body: JSON.stringify(branchData),\r\n          },\r\n        );\r\n\r\n        if (!response.ok) {\r\n          const errorDetails = await response.text();\r\n          console.error(\"Error creating branch service:\", errorDetails);\r\n          alert(`Алдаа: ${errorDetails}`);\r\n\r\n          return;\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log(\"Branch Service Created:\", data);\r\n\r\n        setVisible();\r\n        refresh()\r\n      } catch (error) {\r\n        console.error(\"Error creating branch service:\", error);\r\n      }\r\n    }\r\n  };\r\n  const handleIconClick = () => {\r\n    setShowMapModal(true);\r\n  };\r\n\r\n  const handleModalClose = () => {\r\n    setShowMapModal(false);\r\n  };\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0]; \r\n    const imageUrl = URL.createObjectURL(file);\r\n    setSelectedImage(imageUrl)\r\n    handlePhotoUpload(file);\r\n  };\r\n  if (!visible) return null;\r\n\r\n  const positions = [branchPosition, subBranchPosition].filter(\r\n    (pos) => pos[0] !== 51.505 && pos[1] !== -0.09,\r\n  );\r\n  return (\r\n    <>\r\n      <CCard className=\"w-60\">\r\n        <CCardHeader>\r\n          {edit ? <h4>Салбар засах</h4> : <h4>Салбар нэмэх</h4>}\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CForm className=\"row g-3\">\r\n            <CRow>\r\n              <CCol md={6}>\r\n                <CRow className=\"mb-3\">\r\n                  <CFormLabel htmlFor=\"branchName\">Салбарын нэр</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"branchName\"\r\n                    value={newBranchName || editData.branchName}\r\n                    onChange={(e) => setNewBranchName(e.target.value)}\r\n                  />\r\n                </CRow>\r\n                <CRow md={4}>\r\n                  <CFormSelect\r\n                    id=\"branchType\"\r\n                    label=\"Салбарын төрөл\"\r\n                    value={newBranchType || editData.businessTypeId}\r\n                    onChange={(e) => setNewBranchType(e.target.value)}\r\n                  >\r\n                    <option value=\"\" disabled>\r\n                      Сонгох\r\n                    </option>\r\n                    <option value=\"0\">Дэлгүүр</option>\r\n                    <option value=\"1\">Ресторан</option>\r\n                    <option value=\"2\">Түргэн хоол</option>\r\n                    <option value=\"3\">Салон</option>\r\n                    <option value=\"4\">Эмийн сан</option>\r\n                    <option value=\"5\">Зочид Буудал</option>\r\n                  </CFormSelect>\r\n                </CRow>\r\n              </CCol>\r\n              <CCol md={6}>\r\n                <CRow className=\"d-flex justify-content-center align-items-center\">\r\n                  <CFormLabel htmlFor=\"branchPhoto\">Лого</CFormLabel>\r\n                  <div\r\n                    className=\"d-flex justify-content-center align-items-center\"\r\n                    style={{ height: \"100%\" }}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        selectedImage ? ( selectedImage  || editData.filePath) : uploadsPhoto\r\n                       \r\n                      }\r\n                      alt=\"Branch preview\"\r\n                      className=\"rounded\"\r\n                      style={{\r\n                        width: \"150px\",\r\n                        height: \"150px\",\r\n                        objectFit: \"cover\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={() =>\r\n                        document.getElementById(\"branchPhoto\").click()\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <CFormInput\r\n                    type=\"file\"\r\n                    id=\"branchPhoto\"\r\n                    style={{ display: \"none\" }}\r\n                    onChange={handleFileChange}\r\n                  />\r\n\r\n                  <CButton\r\n                    color=\"primary\"\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                      document.getElementById(\"branchPhoto\").click()\r\n                    }\r\n                    className=\"mt-2\"\r\n                  >\r\n                    Зураг оруулах\r\n                  </CButton>\r\n                </CRow>\r\n              </CCol>\r\n            </CRow>\r\n\r\n            <CRow md={4}>\r\n              <CFormSelect\r\n                id=\"branchSelect\"\r\n                label=\"Аймаг/Хот\"\r\n                value={selectedBranch || editData.branchCode}\r\n                onChange={handleBranchChange}\r\n              >\r\n                <option value=\"\" disabled>\r\n                  Салбарын байршил сонгох\r\n                </option>\r\n                {branches.map((branch) => (\r\n                  <option key={branch.branchCode} value={branch.branchCode}>\r\n                    {branch.branchName}\r\n                  </option>\r\n                ))}\r\n              </CFormSelect>\r\n            </CRow>\r\n            <CRow md={4}>\r\n              <CFormSelect\r\n                id=\"subBranchSelect\"\r\n                label=\"Дүүрэг/Сум\"\r\n                value={selectedSubBranch || editData.subBranchCode}\r\n                onChange={handleSubBranchChange}\r\n              >\r\n                <option value=\"\" disabled>\r\n                  Салбарын байршил сонгох\r\n                </option>\r\n                {subBranches.map((subBranch) => (\r\n                  <option\r\n                   key={subBranch.subBranchCode || editData.selectedSubBranch} value={subBranch.subBranchCode || editData.selectedSubBranch}>\r\n                    \r\n                  \r\n                    {subBranch.subBranchName}\r\n                  </option>\r\n                ))}\r\n              </CFormSelect>\r\n            </CRow>\r\n            <CRow md={4}>\r\n              <CFormLabel htmlFor=\"branchAddress\">Салбарын хаяг</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"branchAddress\"\r\n                value={newBranchAddress || editData.address}\r\n                onChange={(e) => setNewBranchAddress(e.target.value)}\r\n              />\r\n            </CRow>\r\n            <CRow md={4}>\r\n              <CFormLabel htmlFor=\"branchLocation\">Салбарын байршил</CFormLabel>\r\n              <CInputGroup>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"branchLocation\"\r\n                  value={ `${newBranchLocationLat || editData.locationLat} ${newBranchLocationLng || editData.locationlng}`}\r\n                />\r\n                <span className=\"input-group-text\">\r\n                  <CIcon icon={cilLocationPin} onClick={handleIconClick} />\r\n                </span>\r\n              </CInputGroup>\r\n            </CRow>\r\n            <CRow md={4}>\r\n              <CFormLabel htmlFor=\"branchPhoneNumber\">Утасны дугаар</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"branchPhoneNumber\"\r\n                pattern=\"^\\d{8}$\"\r\n                maxLength=\"8\"\r\n                required\r\n                value={newBranchContact || editData.phone}\r\n                onChange={(e) => setNewBranchContact(e.target.value)}\r\n              />\r\n            </CRow>\r\n            <div className=\"d-grid gap-2\">\r\n            <CButton color=\"primary\" onClick={handleAddBranch}>\r\n            {edit ? \"Засах\" : \"Нэмэх\"}\r\n              </CButton>\r\n\r\n              <CButton color=\"secondary\" onClick={() => setVisible(false)}>\r\n                Хаах\r\n              </CButton>\r\n            </div>\r\n          </CForm>\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      {/* Map Modal */}\r\n      <CModal size=\"lg\" visible={showMapModal} onClose={handleModalClose}>\r\n        <CModalHeader onClose={handleModalClose}>\r\n          <CModalTitle>\r\n            <CIcon icon={cilLocationPin}></CIcon> Байршил оруулах\r\n          </CModalTitle>\r\n        </CModalHeader>\r\n        <CModalBody>\r\n          <MapContainer\r\n            center={[47.92123, 106.918556]}\r\n            zoom={13}\r\n            style={{ height: \"400px\", width: \"100%\" }}\r\n          >\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {/* Render existing markers */}\r\n            {positions.map((position, idx) => (\r\n              <Marker key={idx} position={position} icon={defaultIcon}>\r\n                <Popup>Branch Location {idx + 1}</Popup>\r\n              </Marker>\r\n            ))}\r\n            {/* Allow user to add a new marker */}\r\n            <LocationMarker\r\n              setPosition={setBranchPosition}\r\n              setNewBranchLocationLat={setNewBranchLocationLat}\r\n              setNewBranchLocationLng={setNewBranchLocationLng}\r\n            />\r\n          </MapContainer>\r\n          <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\r\n            <CButton color=\"primary\" onClick={handleModalClose}>\r\n              Болих\r\n            </CButton>\r\n            <CButton color=\"outline-primary\" onClick={handleModalClose}>\r\n              Хадгалах\r\n            </CButton>\r\n          </div>\r\n        </CModalBody>\r\n      </CModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddBranch;\r\n","import { useEffect, useState } from 'react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CFormLabel,\r\n    CImage,\r\n    CTable,\r\n    CTableBody,\r\n    CTableHeaderCell,\r\n    CTableRow,\r\n    CTableDataCell,\r\n    CTableHead,\r\n} from '@coreui/react';\r\nimport branchImage from '../settings/photos/subbranch.png'; \r\nimport AddBranch from './addBranch'; \r\nimport EditBranch from './editBranch';\r\n\r\nconst Branch = () => {\r\n    const [showAddBranch, setShowAddBranch] = useState(false);\r\n    const [branches, setBranches] = useState([]);\r\n    const [selectedBranch, setSelectedBranch] = useState([]);\r\n    const [edit, setEdit] = useState(false); // Renamed to setEdit for clarity\r\n\r\n    const businessTypeMap = {\r\n        0: 'Дэлгүүр',\r\n        1: 'Ресторан',\r\n        2: 'Түргэн хоол',\r\n        3: 'Салон',\r\n        4: 'Эмийн сан',\r\n        5: 'Зочид Буудал'\r\n    };\r\n\r\n    const handleToggleAddBranch = (branch) => {\r\n        if (branch) {\r\n            setSelectedBranch(branch);\r\n            setEdit(true); // Set edit mode\r\n        } else {\r\n            setSelectedBranch(null);\r\n            setEdit(false); // Add new branch mode\r\n        }\r\n        setShowAddBranch(!showAddBranch);\r\n    };\r\n\r\n    const handleDeleteBranch = (branchId) => {\r\n        const token = localStorage.getItem('token');\r\n        const userId = localStorage.getItem('userId');\r\n\r\n        const requestOptions = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            redirect: \"follow\"\r\n        };\r\n\r\n        fetch(`https://api.majorsoft.mn/api/branchService?branchId=${branchId}&userId=${userId}`, requestOptions)\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(() => {\r\n                setBranches(prevBranches => prevBranches.filter(branch => branch.branchId !== branchId));\r\n                console.log(`Branch with id ${branchId} deleted successfully.`);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error deleting branch:\", error);\r\n            });\r\n    };\r\n\r\n    const  getDatas = () => {\r\n        const token = localStorage.getItem('token');\r\n        const merchantId = localStorage.getItem(\"merchantId\");\r\n\r\n        const requestOptions = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            redirect: \"follow\"\r\n        };\r\n\r\n        fetch(`https://api.majorsoft.mn/api/branchService?merchantId=${merchantId}`, requestOptions)\r\n            .then((response) => {\r\n                console.log('Response status:', response.status);\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((result) => {\r\n                console.log(\"Fetched branch data:\", result);\r\n                setBranches(result.data);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching branch data:\", error);\r\n            });\r\n    } \r\n    useEffect(() => {\r\n       getDatas()\r\n    }, []);\r\n\r\n    return (\r\n        <main className='mx-2 mt-1'>\r\n            {!showAddBranch ? (\r\n                <CCard>\r\n                    <CCardHeader>Салбар</CCardHeader>\r\n                    <CCardBody className='text-center'>\r\n                        {branches.length > 0 ? (\r\n                            <CTable striped bordered hover responsive>\r\n                                <CTableHead>\r\n                                    <CTableRow>\r\n                                        <CTableHeaderCell>Салбарын нэр</CTableHeaderCell>\r\n                                        <CTableHeaderCell>Салбарын төрөл</CTableHeaderCell>\r\n                                        <CTableHeaderCell>Салбар</CTableHeaderCell>\r\n                                    </CTableRow>\r\n                                </CTableHead>\r\n                                <CTableBody>\r\n                                    {branches.map((branch) => (\r\n                                        <CTableRow key={branch.branchId || branch.branchName}>\r\n                                            <CTableDataCell>{branch.branchName}</CTableDataCell>\r\n                                            <CTableDataCell>{businessTypeMap[branch.businessTypeId] || 'Тодорхойгүй'}</CTableDataCell>\r\n                                            <CTableDataCell> \r\n                                                <CButton color=\"light\" onClick={() => handleToggleAddBranch(branch)}>Засах</CButton>\r\n                                                <CButton color=\"secondary\" onClick={() => handleDeleteBranch(branch.branchId)}>Устгах</CButton>\r\n                                            </CTableDataCell>\r\n                                        </CTableRow>\r\n                                    ))}\r\n                                    <CButton color='primary' className='my-2' onClick={() => handleToggleAddBranch()}>\r\n                                        Салбар нэмэх\r\n                                    </CButton>\r\n                                </CTableBody>\r\n                            </CTable>\r\n                        ) : (\r\n                            <>\r\n                                <CImage\r\n                                    src={branchImage}\r\n                                    rounded\r\n                                    thumbnail\r\n                                    width={200}\r\n                                    height={200}\r\n                                    className=\"mb-2\"\r\n                                    style={{ border: 'none' }}\r\n                                />\r\n                                <div className='d-flex flex-column align-items-center'>\r\n                                    <CFormLabel className='fs-2'>Салбар</CFormLabel>\r\n                                    <CFormLabel>Эндээс та салбараа удирдах боломжтой</CFormLabel>\r\n                                </div>\r\n                                <div className='d-flex flex-column align-items-center'>\r\n                                    <CButton color='primary' className='my-2' onClick={() => handleToggleAddBranch()}>\r\n                                        Салбар нэмэх\r\n                                    </CButton>\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                    </CCardBody>\r\n                </CCard>\r\n            ) : (\r\n                <AddBranch\r\n                    visible={showAddBranch}\r\n                    setVisible={setShowAddBranch}\r\n                    edit={edit}\r\n                    editBranch={selectedBranch}\r\n                    refresh = {getDatas}\r\n                />\r\n            )}\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Branch;\r\n","export var cilLocationPin = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M253.924,127.592a64,64,0,1,0,64,64A64.073,64.073,0,0,0,253.924,127.592Zm0,96a32,32,0,1,1,32-32A32.037,32.037,0,0,1,253.924,223.592Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M376.906,68.515A173.922,173.922,0,0,0,108.2,286.426L229.107,472.039a29.619,29.619,0,0,0,49.635,0L399.653,286.426A173.921,173.921,0,0,0,376.906,68.515Zm-4.065,200.444L253.925,451.509,135.008,268.959C98.608,213.08,106.415,138.3,153.571,91.142a141.92,141.92,0,0,1,200.708,0C401.435,138.3,409.241,213.08,372.841,268.959Z' class='ci-primary'/>\"];\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n","import React, { forwardRef, ImgHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CImageProps extends ImgHTMLAttributes<HTMLOrSVGImageElement> {\n  /**\n   * Set the horizontal aligment.\n   */\n  align?: 'start' | 'center' | 'end'\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Make image responsive.\n   */\n  fluid?: boolean\n  /**\n   * Make image rounded.\n   */\n  rounded?: boolean\n  /**\n   * Give an image a rounded 1px border appearance.\n   */\n  thumbnail?: boolean\n}\n\nexport const CImage = forwardRef<HTMLImageElement, CImageProps>(\n  ({ align, className, fluid, rounded, thumbnail, ...rest }, ref) => {\n    return (\n      <img\n        className={\n          classNames(\n            {\n              [`float-${align}`]: align && (align === 'start' || align === 'end'),\n              'd-block mx-auto': align && align === 'center',\n              'img-fluid': fluid,\n              rounded: rounded,\n              'img-thumbnail': thumbnail,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      />\n    )\n  },\n)\n\nCImage.propTypes = {\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n  className: PropTypes.string,\n  fluid: PropTypes.bool,\n  rounded: PropTypes.bool,\n  thumbnail: PropTypes.bool,\n}\n\nCImage.displayName = 'CImage'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CModalTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n}\n\nexport const CModalTitle: PolymorphicRefForwardingComponent<'h5', CModalTitleProps> = forwardRef<\n  HTMLHeadElement,\n  CModalTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('modal-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCModalTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalTitle.displayName = 'CModalTitle'\n"],"names":["useMap","useLeafletContext","map","defaultIcon","L","iconUrl","shadowUrl","markerShadowPng","iconAnchor","LocationMarker","_ref","setPosition","setNewBranchLocationLat","setNewBranchLocationLng","markerPosition","setMarkerPosition","useState","handlers","useEffect","on","off","useMapEvents","click","e","lat","lng","latlng","_jsx","Marker","position","icon","children","Popup","_ref2","visible","setVisible","edit","editBranch","refresh","branches","setBranches","subBranches","setSubBranches","selectedBranch","setSelectedBranch","selectedSubBranch","setSelectedSubBranch","newBranchName","setNewBranchName","newBranchLocationLat","newBranchLocationLng","newBranchContact","setNewBranchContact","newBranchAddress","setNewBranchAddress","newBranchType","setNewBranchType","branchPosition","setBranchPosition","subBranchPosition","setSubBranchPosition","showMapModal","setShowMapModal","filepath","setFilePath","useNavigate","selectedImage","setSelectedImage","editData","setEditData","userId","localStorage","getItem","async","options","method","headers","Accept","response","fetch","data","json","dataArray","Array","isArray","groupedBranches","reduce","acc","curr","branchName","branchCode","subBranchCode","subBranchName","latitude","longitude","zipCode","location","push","Object","values","console","error","fetchBranches","handleModalClose","positions","filter","pos","_jsxs","_Fragment","CCard","className","CCardHeader","CCardBody","CForm","CRow","CCol","md","CFormLabel","htmlFor","CFormInput","type","id","value","onChange","target","CFormSelect","label","businessTypeId","disabled","style","height","src","filePath","uploadsPhoto","alt","width","objectFit","cursor","onClick","document","getElementById","display","event","file","files","imageUrl","URL","createObjectURL","formData","FormData","append","Authorization","concat","body","ok","errorDetails","text","handlePhotoUpload","CButton","color","variant","selectedBranchCode","branch","find","b","subBranchId","subBranch","address","CInputGroup","locationLat","locationlng","CIcon","cilLocationPin","handleIconClick","pattern","maxLength","required","phone","token","branchData","branchId","merchantId","String","locationLng","logoSmall","createUserId","alert","keys","forEach","key","requestOptions","JSON","stringify","success","log","CModal","size","onClose","CModalHeader","CModalTitle","CModalBody","MapContainer","center","zoom","TileLayer","url","attribution","idx","Branch","showAddBranch","setShowAddBranch","setEdit","businessTypeMap","handleToggleAddBranch","getDatas","redirect","then","status","Error","result","catch","AddBranch","length","CTable","striped","bordered","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","CTableDataCell","prevBranches","handleDeleteBranch","CImage","rounded","thumbnail","border","forwardRef","_a","ref","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","propTypes","PropTypes","colorPropType","displayName","as","Component","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","htmlSize","invalid","tooltipFeedback","valid","CFormControlWrapper","describedby","option","index","undefined","BREAKPOINTS","repsonsiveClassNames","bp","breakpoint","infix","span","order","offset","col","xs","sm","lg","xl","xxl","cols","gutter","gutterX","gutterY","align","fluid"],"sourceRoot":""}
{"version":3,"file":"static/js/9772.543e6128.chunk.js","mappings":";2jBAKA,MA+HA,EA/HkBA,KAChB,MAAMC,GAAWC,EAAAA,EAAAA,QAAO,OAExBC,EAAAA,EAAAA,YAAU,KACRC,SAASC,gBAAgBC,iBAAiB,qBAAqB,KACzDL,EAASM,SACXC,YAAW,KACTP,EAASM,QAAQE,QAAQC,OAAOC,EAAEC,KAAKC,aAAcC,EAAAA,EAAAA,GACnD,kCAEFb,EAASM,QAAQE,QAAQC,OAAOC,EAAEC,KAAKG,OAAQD,EAAAA,EAAAA,GAAS,kCACxDb,EAASM,QAAQE,QAAQC,OAAOC,EAAEK,MAAMD,OAAQD,EAAAA,EAAAA,GAAS,oBACzDb,EAASM,QAAQE,QAAQC,OAAOO,EAAEL,KAAKC,aAAcC,EAAAA,EAAAA,GACnD,kCAEFb,EAASM,QAAQE,QAAQC,OAAOO,EAAEL,KAAKG,OAAQD,EAAAA,EAAAA,GAAS,kCACxDb,EAASM,QAAQE,QAAQC,OAAOO,EAAED,MAAMD,OAAQD,EAAAA,EAAAA,GAAS,oBACzDb,EAASM,QAAQW,QAAQ,GAE7B,GACA,GACD,CAACjB,IAEJ,MAAMkB,EAASA,IAAMC,KAAKC,MAAsB,IAAhBD,KAAKD,UAErC,OACEG,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CACTC,IAAKzB,EACL0B,MAAO,CAAEC,OAAQ,QAASC,UAAW,QACrCC,KAAM,CACJC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEC,SAAU,CACR,CACEC,MAAO,mBACPC,gBAAgB,QAADC,QAAUrB,EAAAA,EAAAA,GAAS,kBAAiB,SACnDD,aAAaC,EAAAA,EAAAA,GAAS,cACtBsB,2BAA2BtB,EAAAA,EAAAA,GAAS,cACpCuB,YAAa,EACbP,KAAM,CACJX,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,KAEFmB,MAAM,GAER,CACEL,MAAO,oBACPC,gBAAiB,cACjBrB,aAAaC,EAAAA,EAAAA,GAAS,iBACtBsB,2BAA2BtB,EAAAA,EAAAA,GAAS,iBACpCuB,YAAa,EACbP,KAAM,CACJX,IACAA,IACAA,IACAA,IACAA,IACAA,IACAA,MAGJ,CACEc,MAAO,mBACPC,gBAAiB,cACjBrB,aAAaC,EAAAA,EAAAA,GAAS,gBACtBsB,2BAA2BtB,EAAAA,EAAAA,GAAS,gBACpCuB,YAAa,EACbE,WAAY,CAAC,EAAG,GAChBT,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,OAIrCrB,QAAS,CACP+B,qBAAqB,EACrBC,QAAS,CACPC,OAAQ,CACNC,SAAS,IAGbjC,OAAQ,CACNC,EAAG,CACDC,KAAM,CACJG,OAAOD,EAAAA,EAAAA,GAAS,kCAChB8B,iBAAiB,GAEnB5B,MAAO,CACLD,OAAOD,EAAAA,EAAAA,GAAS,sBAGpBG,EAAG,CACD4B,aAAa,EACbC,OAAQ,CACN/B,OAAOD,EAAAA,EAAAA,GAAS,mCAElBF,KAAM,CACJG,OAAOD,EAAAA,EAAAA,GAAS,mCAElBiC,IAAK,IACL/B,MAAO,CACLD,OAAOD,EAAAA,EAAAA,GAAS,oBAChBkC,cAAe,EACfC,SAAU7B,KAAK8B,KAAK,OAI1BC,SAAU,CACRC,KAAM,CACJC,QAAS,IAEXC,MAAO,CACLC,OAAQ,EACRC,UAAW,GACXC,YAAa,EACbC,iBAAkB,QAKzB,ECoQP,EA7UkBC,KAqBOC,EAAAA,EACAC,EAAAA,EAIUC,EAAAA,EACJC,EAAAA,EACDC,EAAAA,EACCC,EAAAA,EAWKC,EAAAA,EAMOC,EAAAA,EAUJC,EAAAA,EAMFC,EAAAA,EAMCC,EAAAA,EAMCC,EAAAA,EAMAC,EAAAA,EAMAC,EAAAA,EAUDC,EAAAA,EAMQC,EAAAA,EAUPC,EAAAA,EAMFC,EAAAA,EAKnC,OACEC,EAAAA,EAAAA,MAAAvD,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACyD,EAAAA,EAAe,CAACC,UAAU,UAC3BF,EAAAA,EAAAA,MAACG,EAAAA,EAAK,CAACD,UAAU,OAAMxD,SAAA,EACrBsD,EAAAA,EAAAA,MAACI,EAAAA,EAAS,CAAA1D,SAAA,EACRsD,EAAAA,EAAAA,MAACK,EAAAA,EAAI,CAAA3D,SAAA,EACHsD,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CAACC,GAAI,EAAE7D,SAAA,EACVF,EAAAA,EAAAA,KAAA,MAAIgE,GAAG,UAAUN,UAAU,kBAAiBxD,SAAC,kEAG7CF,EAAAA,EAAAA,KAAA,OAAK0D,UAAU,4BAA2BxD,SAAC,yDAE7CsD,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CAACC,GAAI,EAAGL,UAAU,oBAAmBxD,SAAA,EACxCF,EAAAA,EAAAA,KAACiE,EAAAA,EAAO,CAACxE,MAAM,UAAUiE,UAAU,YAAWxD,UAC5CF,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAMC,EAAAA,OAEfpE,EAAAA,EAAAA,KAACqE,EAAAA,EAAY,CAACX,UAAU,iBAAgBxD,SACrC,CAAC,2BAAQ,qBAAO,sBAAOoE,KAAKC,IAC3BvE,EAAAA,EAAAA,KAACiE,EAAAA,EAAO,CACNxE,MAAM,oBAENiE,UAAU,OACVc,OAAkB,UAAVD,EAAkBrE,SAEzBqE,GAJIA,cAUfvE,EAAAA,EAAAA,KAACtB,EAAS,QAEZsB,EAAAA,EAAAA,KAACyE,EAAAA,EAAW,CAAAvE,UACVF,EAAAA,EAAAA,KAAC6D,EAAAA,EAAI,CACHa,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GACvBb,GAAI,CAAEY,KAAM,GACZE,GAAI,CAAEF,KAAM,GACZG,GAAI,CAAEH,KAAM,GACZjB,UAAU,mBAAkBxD,SA/Jd,CACtB,CAAE6E,MAAO,mDAAYR,MAAO,eAAgBS,QAAS,GAAIvF,MAAO,WAChE,CAAEsF,MAAO,2EAAgBR,MAAO,eAAgBS,QAAS,GAAIvF,MAAO,QACpE,CAAEsF,MAAO,sEAAgBR,MAAO,eAAgBS,QAAS,GAAIvF,MAAO,WACpE,CAAEsF,MAAO,kFAAkBR,MAAO,eAAgBS,QAAS,GAAIvF,MAAO,UACtE,CAAEsF,MAAO,6CAAWR,MAAO,eAAgBS,QAAS,MAAOvF,MAAO,YA4JzC6E,KAAI,CAACW,EAAMC,EAAOC,KACjC3B,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CACHJ,UAAW0B,IAAW,CACpB,oBAAqBF,EAAQ,IAAMC,EAAME,SACxCnF,SAAA,EAGHF,EAAAA,EAAAA,KAAA,OAAK0D,UAAU,sBAAqBxD,SAAE+E,EAAKF,SAC3CvB,EAAAA,EAAAA,MAAA,OAAKE,UAAU,4BAA2BxD,SAAA,CACvC+E,EAAKV,MAAM,KAAGU,EAAKD,QAAQ,QAE9BhF,EAAAA,EAAAA,KAACsF,EAAAA,EAAS,CAACC,MAAI,EAAC7B,UAAU,OAAOjE,MAAOwF,EAAKxF,MAAO8E,MAAOU,EAAKD,YAN3DE,cAiKd,0KCzXP,MA8KA,EA9KsBM,IACpB,MAAMC,EAAe,CACnB5D,SAAU,CACRC,KAAM,CACJC,QAAS,IAEXC,MAAO,CACLC,OAAQ,EACRC,UAAW,GACXC,YAAa,EACbC,iBAAkB,IAGtBlB,qBAAqB,EACrBC,QAAS,CACPC,OAAQ,CACNC,SAAS,IAGbjC,OAAQ,CACNC,EAAG,CACDgC,SAAS,GAEX1B,EAAG,CACD0B,SAAS,KAKf,OACEmC,EAAAA,EAAAA,MAACK,EAAAA,EAAI,CAACH,UAAW8B,EAAM9B,UAAWgB,GAAI,CAAEE,OAAQ,GAAI1E,SAAA,EAClDF,EAAAA,EAAAA,KAAC8D,EAAAA,EAAI,CAACC,GAAI,EAAGe,GAAI,EAAGY,IAAK,EAAExF,UACzBF,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,IACPH,EAAMI,YAAc,CACvBC,OACE7F,EAAAA,EAAAA,KAAC8F,EAAAA,GAAM,CACLpC,UAAU,gCACVqC,KAAK,OACLvF,KAAM,CACJC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEC,SAAU,CACR,CACEE,gBAAiB,uBACjBrB,YAAa,wBACbuB,0BAA2B,OAC3BC,YAAa,EACbP,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC/BQ,MAAM,KAIZ7B,QAASsG,KAIftB,MAAMnE,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAM1B,EAAAA,EAAanC,OAAQ,GAAIoD,UAAU,oBACtDsC,OAAQ,CACN,CAAEjB,MAAO,UAAWR,MAAO,OAC3B,CAAEQ,MAAO,QAASR,MAAO,QAE3BlE,MAAO,CACL,oBAAqB,gBAI3BL,EAAAA,EAAAA,KAAC8D,EAAAA,EAAI,CAACC,GAAI,EAAGe,GAAI,EAAGY,IAAK,EAAExF,UACzBF,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,IACPH,EAAMI,YAAc,CACvBC,OACE7F,EAAAA,EAAAA,KAAC8F,EAAAA,GAAM,CACLpC,UAAU,gCACVqC,KAAK,OACLvF,KAAM,CACJC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEC,SAAU,CACR,CACEE,gBAAiB,uBACjBrB,YAAa,wBACbuB,0BAA2B,OAC3BC,YAAa,EACbP,KAAM,CAAC,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,IAC7BQ,MAAM,KAIZ7B,QAASsG,KAIftB,MAAMnE,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAMzB,EAAAA,EAAYpC,OAAQ,GAAIoD,UAAU,oBACrDsC,OAAQ,CACN,CAAEjB,MAAO,YAAaR,MAAO,QAC7B,CAAEQ,MAAO,SAAUR,MAAO,UAE5BlE,MAAO,CACL,oBAAqB,gBAI3BL,EAAAA,EAAAA,KAAC8D,EAAAA,EAAI,CAACC,GAAI,EAAGe,GAAI,EAAGY,IAAK,EAAExF,UACzBF,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,IACPH,EAAMI,YAAc,CACvBC,OACE7F,EAAAA,EAAAA,KAAC8F,EAAAA,GAAM,CACLpC,UAAU,gCACVqC,KAAK,OACLvF,KAAM,CACJC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEC,SAAU,CACR,CACEE,gBAAiB,uBACjBrB,YAAa,wBACbuB,0BAA2B,OAC3BC,YAAa,EACbP,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC/BQ,MAAM,KAIZ7B,QAASsG,KAIftB,MAAMnE,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAMxB,EAAAA,EAAarC,OAAQ,GAAIoD,UAAU,oBACtDsC,OAAQ,CACN,CAAEjB,MAAO,WAAYR,MAAO,OAC5B,CAAEQ,MAAO,QAASR,MAAO,UAE3BlE,MAAO,CACL,oBAAqB,gBAI3BL,EAAAA,EAAAA,KAAC8D,EAAAA,EAAI,CAACC,GAAI,EAAGe,GAAI,EAAGY,IAAK,EAAExF,UACzBF,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,CACZlG,MAAM,aACD+F,EAAMI,YAAc,CACvBC,OACE7F,EAAAA,EAAAA,KAAC8F,EAAAA,GAAM,CACLpC,UAAU,gCACVqC,KAAK,OACLvF,KAAM,CACJC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEC,SAAU,CACR,CACEE,gBAAiB,uBACjBrB,YAAa,wBACbuB,0BAA2B,OAC3BC,YAAa,EACbP,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC/BQ,MAAM,KAIZ7B,QAASsG,KAIftB,MAAMnE,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAM8B,EAAAA,EAAa3F,OAAQ,GAAIoD,UAAU,oBACtDsC,OAAQ,CACN,CAAEjB,MAAO,SAAUR,MAAO,OAC1B,CAAEQ,MAAO,WAAYR,MAAO,YAI7B,yNC3JX,MA4XA,EA5XyBiB,IACvB,MAAMU,GAAkBtH,EAAAA,EAAAA,QAAO,MACzBuH,GAAkBvH,EAAAA,EAAAA,QAAO,MAoB/B,OAlBAC,EAAAA,EAAAA,YAAU,KACRC,SAASC,gBAAgBC,iBAAiB,qBAAqB,KACzDkH,EAAgBjH,SAClBC,YAAW,KACTgH,EAAgBjH,QAAQuB,KAAKE,SAAS,GAAG0F,sBAAuB5G,EAAAA,EAAAA,GAAS,iBACzE0G,EAAgBjH,QAAQW,QAAQ,IAIhCuG,EAAgBlH,SAClBC,YAAW,KACTiH,EAAgBlH,QAAQuB,KAAKE,SAAS,GAAG0F,sBAAuB5G,EAAAA,EAAAA,GAAS,cACzE2G,EAAgBlH,QAAQW,QAAQ,GAEpC,GACA,GACD,CAACsG,EAAiBC,KAGnB3C,EAAAA,EAAAA,MAACK,EAAAA,EAAI,CAACH,UAAW8B,EAAM9B,UAAWgB,GAAI,CAAEE,OAAQ,GAAI1E,SAAA,EAClDF,EAAAA,EAAAA,KAAC8D,EAAAA,EAAI,CAACC,GAAI,EAAGe,GAAI,EAAGY,IAAK,EAAExF,UACzBF,EAAAA,EAAAA,KAACqG,EAAAA,EAAa,CACZ5G,MAAM,UACN8E,OACEf,EAAAA,EAAAA,MAAAvD,EAAAA,SAAA,CAAAC,SAAA,CAAE,MACI,KACJsD,EAAAA,EAAAA,MAAA,QAAME,UAAU,iBAAgBxD,SAAA,CAAC,YACvBF,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAMmC,EAAAA,IAAkB,UAI7CvB,MAAM,6CACNwB,QACE/C,EAAAA,EAAAA,MAACgD,EAAAA,EAAS,CAACC,UAAU,MAAKvG,SAAA,EACxBF,EAAAA,EAAAA,KAAC0G,EAAAA,EAAe,CAACjH,MAAM,cAAckH,OAAO,EAAOjD,UAAU,iBAAgBxD,UAC3EF,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAMyC,EAAAA,OAEfpD,EAAAA,EAAAA,MAACqD,EAAAA,EAAa,CAAA3G,SAAA,EACZF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,YACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,oBACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,4BACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAACC,UAAQ,EAAA7G,SAAC,0BAI9B2F,OACE7F,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CACTC,IAAK8F,EACLxC,UAAU,YACVrD,MAAO,CAAEC,OAAQ,QACjBE,KAAM,CACJC,OAAQ,CAAC,uBAAS,uBAAS,uBAAS,uBAAS,uBAAS,uBAAS,wBAC/DC,SAAU,CACR,CACEC,MAAO,mBACPC,gBAAiB,cACjBrB,YAAa,wBACb6G,sBAAsB5G,EAAAA,EAAAA,GAAS,iBAC/BgB,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,OAIrCrB,QAAS,CACPgC,QAAS,CACPC,OAAQ,CACNC,SAAS,IAGbH,qBAAqB,EACrB9B,OAAQ,CACNC,EAAG,CACDmC,OAAQ,CACNH,SAAS,GAEX/B,KAAM,CACJ+B,SAAS,EACT2F,YAAY,GAEdtH,MAAO,CACL2B,SAAS,IAGb1B,EAAG,CACDsH,IAAK,GACLxF,IAAK,GACLJ,SAAS,EACT/B,KAAM,CACJ+B,SAAS,GAEX3B,MAAO,CACL2B,SAAS,KAIfQ,SAAU,CACRC,KAAM,CACJf,YAAa,EACbgB,QAAS,IAEXC,MAAO,CACLC,OAAQ,EACRC,UAAW,GACXC,YAAa,YAQ3BnC,EAAAA,EAAAA,KAAC8D,EAAAA,EAAI,CAACC,GAAI,EAAGe,GAAI,EAAGY,IAAK,EAAExF,UACzBF,EAAAA,EAAAA,KAACqG,EAAAA,EAAa,CACZ5G,MAAM,OACN8E,OACEf,EAAAA,EAAAA,MAAAvD,EAAAA,SAAA,CAAAC,SAAA,CAAE,mBACY,KACZsD,EAAAA,EAAAA,MAAA,QAAME,UAAU,iBAAgBxD,SAAA,CAAC,WACxBF,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAM+C,EAAAA,IAAe,UAIzCnC,MAAM,kFACNwB,QACE/C,EAAAA,EAAAA,MAACgD,EAAAA,EAAS,CAACC,UAAU,MAAKvG,SAAA,EACxBF,EAAAA,EAAAA,KAAC0G,EAAAA,EAAe,CAACjH,MAAM,cAAckH,OAAO,EAAOjD,UAAU,iBAAgBxD,UAC3EF,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAMyC,EAAAA,OAEfpD,EAAAA,EAAAA,MAACqD,EAAAA,EAAa,CAAA3G,SAAA,EACZF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,YACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,oBACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,4BACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAACC,UAAQ,EAAA7G,SAAC,0BAI9B2F,OACE7F,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CACTC,IAAK+F,EACLzC,UAAU,YACVrD,MAAO,CAAEC,OAAQ,QACjBE,KAAM,CACJC,OAAQ,CAAC,uBAAS,uBAAS,uBAAS,uBAAS,uBAAS,uBAAS,wBAE/DC,SAAU,CACR,CACEC,MAAO,mBACPC,gBAAiB,cACjBrB,YAAa,wBACb6G,sBAAsB5G,EAAAA,EAAAA,GAAS,cAC/BgB,KAAM,CAAC,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,OAInCrB,QAAS,CACPgC,QAAS,CACPC,OAAQ,CACNC,SAAS,IAGbH,qBAAqB,EACrB9B,OAAQ,CACNC,EAAG,CACDmC,OAAQ,CACNH,SAAS,GAEX/B,KAAM,CACJ+B,SAAS,EACT2F,YAAY,GAEdtH,MAAO,CACL2B,SAAS,IAGb1B,EAAG,CACDsH,KAAM,EACNxF,IAAK,GACLJ,SAAS,EACT/B,KAAM,CACJ+B,SAAS,GAEX3B,MAAO,CACL2B,SAAS,KAIfQ,SAAU,CACRC,KAAM,CACJf,YAAa,GAEfiB,MAAO,CACLC,OAAQ,EACRC,UAAW,GACXC,YAAa,YAQ3BnC,EAAAA,EAAAA,KAAC8D,EAAAA,EAAI,CAACC,GAAI,EAAGe,GAAI,EAAGY,IAAK,EAAExF,UACzBF,EAAAA,EAAAA,KAACqG,EAAAA,EAAa,CACZ5G,MAAM,UACN8E,OACEf,EAAAA,EAAAA,MAAAvD,EAAAA,SAAA,CAAAC,SAAA,CAAE,QACM,KACNsD,EAAAA,EAAAA,MAAA,QAAME,UAAU,iBAAgBxD,SAAA,CAAC,WACxBF,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAM+C,EAAAA,IAAe,UAIzCnC,MAAM,4EACNwB,QACE/C,EAAAA,EAAAA,MAACgD,EAAAA,EAAS,CAACC,UAAU,MAAKvG,SAAA,EACxBF,EAAAA,EAAAA,KAAC0G,EAAAA,EAAe,CAACjH,MAAM,cAAckH,OAAO,EAAOjD,UAAU,iBAAgBxD,UAC3EF,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAMyC,EAAAA,OAEfpD,EAAAA,EAAAA,MAACqD,EAAAA,EAAa,CAAA3G,SAAA,EACZF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,YACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,oBACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,4BACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAACC,UAAQ,EAAA7G,SAAC,0BAI9B2F,OACE7F,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CACTuD,UAAU,OACVrD,MAAO,CAAEC,OAAQ,QACjBE,KAAM,CACJC,OAAQ,CAAC,uBAAS,uBAAS,uBAAS,uBAAS,uBAAS,uBAAS,wBAE/DC,SAAU,CACR,CACEC,MAAO,mBACPC,gBAAiB,uBACjBrB,YAAa,wBACbiB,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC/BQ,MAAM,KAIZ7B,QAAS,CACPgC,QAAS,CACPC,OAAQ,CACNC,SAAS,IAGbH,qBAAqB,EACrB9B,OAAQ,CACNC,EAAG,CACDgC,SAAS,GAEX1B,EAAG,CACD0B,SAAS,IAGbQ,SAAU,CACRC,KAAM,CACJf,YAAa,EACbgB,QAAS,IAEXC,MAAO,CACLC,OAAQ,EACRC,UAAW,GACXC,YAAa,YAQ3BnC,EAAAA,EAAAA,KAAC8D,EAAAA,EAAI,CAACC,GAAI,EAAGe,GAAI,EAAGY,IAAK,EAAExF,UACzBF,EAAAA,EAAAA,KAACqG,EAAAA,EAAa,CACZ5G,MAAM,SACN8E,OACEf,EAAAA,EAAAA,MAAAvD,EAAAA,SAAA,CAAAC,SAAA,CAAE,MACI,KACJsD,EAAAA,EAAAA,MAAA,QAAME,UAAU,iBAAgBxD,SAAA,CAAC,YACvBF,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAMmC,EAAAA,IAAkB,UAI7CvB,MAAM,mDACNwB,QACE/C,EAAAA,EAAAA,MAACgD,EAAAA,EAAS,CAACC,UAAU,MAAKvG,SAAA,EACxBF,EAAAA,EAAAA,KAAC0G,EAAAA,EAAe,CAACjH,MAAM,cAAckH,OAAO,EAAOjD,UAAU,iBAAgBxD,UAC3EF,EAAAA,EAAAA,KAACkE,EAAAA,GAAK,CAACC,KAAMyC,EAAAA,OAEfpD,EAAAA,EAAAA,MAACqD,EAAAA,EAAa,CAAA3G,SAAA,EACZF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,YACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,oBACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAAA5G,SAAC,4BACfF,EAAAA,EAAAA,KAAC8G,EAAAA,EAAa,CAACC,UAAQ,EAAA7G,SAAC,0BAI9B2F,OACE7F,EAAAA,EAAAA,KAACmH,EAAAA,GAAS,CACRzD,UAAU,YACVrD,MAAO,CAAEC,OAAQ,QACjBE,KAAM,CACJC,OAAQ,CACN,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,WACA,UACA,WACA,QACA,SAEFC,SAAU,CACR,CACEC,MAAO,mBACPC,gBAAiB,uBACjBrB,YAAa,wBACbiB,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACnE4G,cAAe,MAIrBjI,QAAS,CACP+B,qBAAqB,EACrBC,QAAS,CACPC,OAAQ,CACNC,SAAS,IAGbjC,OAAQ,CACNC,EAAG,CACDC,KAAM,CACJ+B,SAAS,EACTgG,WAAW,GAEb3H,MAAO,CACL2B,SAAS,IAGb1B,EAAG,CACD6B,OAAQ,CACNH,SAAS,GAEX/B,KAAM,CACJ+B,SAAS,EACT2F,YAAY,EACZK,WAAW,GAEb3H,MAAO,CACL2B,SAAS,cASpB,iDCpYD,IAACiF,EAAiB,CAAC,UAAW,yRCA9B,IAACY,EAAc,CAAC,UAAW,2RCA3B,IAACjB,EAAc,CAAC,UAAW,gnDCA3B,IAAC7B,EAAmB,CAAC,UAAW,ygBCAhC,IAACwC,EAAa,CAAC,UAAW,ulBCA1B,IAACrE,EAAgB,CAAC,UAAW,ouBCmB1B8B,GAAeiD,EAAAA,EAAAA,aAC1B,SAACC,EAAkDnH,SAAhDF,EAAQqH,EAAArH,SAAEwD,EAAS6D,EAAA7D,UAAE8D,EAAID,EAAAC,KAAEC,EAAQF,EAAAE,SAAKC,GAAIC,EAAAA,EAAAA,IAAAJ,EAA9C,4CACC,OACEK,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CACEnE,WAAW0B,EAAAA,EAAAA,GACTqC,EAAW,qBAAuB,aAChCK,EAAA,GAAAA,EAAC,aAAajH,OAAA2G,IAASA,EACzBM,GAAApE,IAEEgE,EACJ,CAAAtH,IAAKA,IAEJF,EAGP,IAGFmE,EAAa0D,UAAY,CACvB7H,SAAU8H,IAAAA,KACVtE,UAAWsE,IAAAA,OACXR,KAAMQ,IAAAA,MAAgB,CAAC,KAAM,OAC7BP,SAAUO,IAAAA,MAGZ3D,EAAa4D,YAAc,uHCjCdxD,GAAc6C,EAAAA,EAAAA,aACzB,SAACC,EAAkCnH,GAAhC,IAAAF,EAAQqH,EAAArH,SAAEwD,EAAS6D,EAAA7D,UAAKgE,GAA1BC,EAAAA,EAAAA,IAAAJ,EAAA,0BACC,OACEK,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CAAKnE,WAAW0B,EAAAA,EAAAA,GAAW,cAAe1B,IAAgBgE,EAAI,CAAEtH,IAAKA,IAClEF,EAGP,IAGFuE,EAAYsD,UAAY,CACtB7H,SAAU8H,IAAAA,KACVtE,UAAWsE,IAAAA,QAGbvD,EAAYwD,YAAc,4ICYb3C,GAAYgC,EAAAA,EAAAA,aACvB,SAACC,EAAoFnH,GAAlF,IAAAF,EAAQqH,EAAArH,SAAEwD,EAAS6D,EAAA7D,UAAEpD,EAAMiH,EAAAjH,OAAE4H,EAAoBX,EAAAW,qBAAE3C,EAAIgC,EAAAhC,KAAEhB,EAAKgD,EAAAhD,MAAE4D,EAAKZ,EAAAY,MAAKT,GAA5EC,EAAAA,EAAAA,IAAAJ,EAAA,iFACSa,GAAYC,EAAAA,EAAAA,YAAWC,EAAAA,GAAwBF,QAEvD,OACER,EAAAA,cACE,OAAAC,EAAAA,EAAAA,IAAA,CAAAnE,WAAW0B,EAAAA,EAAAA,GACT,WACA,CACE,gBAAiBG,EACjB,iBAAkB4C,GAEpBzE,SAEa6E,IAAVhE,GAAuB,CAC1BiE,KAAM,cACN,gBAAiBjE,EACjB,gBAAiB,EACjB,gBAAiB,KACjB,CACFlE,OAAKwH,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,IAAA,GACCvH,EAAS,CAAEA,OAAQ,GAAAO,OAAGP,EAAU,OAAK,CAAC,GACtC8H,EAAU,CAAEK,MAAO,GAAG5H,OAAA0D,EAAQ,MAAK,CAAC,GAE1CnE,IAAKA,IAEJwH,EAAAA,SAAec,QAAQxI,GAAUyI,MAEhC,SAACC,GAAU,OAAAA,EAAM7C,MAAmC,iBAA3B6C,EAAM7C,KAAKkC,WAA8B,IAElEL,EAAAA,SAAetD,IAAIpE,GAAU,SAAC0I,GAE5B,GAAIhB,EAAAA,eAAqBgB,IAAqC,iBAA3BA,EAAM7C,KAAKkC,YAC5C,OAAOL,EAAAA,aAAmBgB,GAAKf,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,IAAA,GACzBtD,GAAS,CAAEA,MAAOA,IACnBmD,GAKT,IAEAE,EAAAA,cAACiB,EAAAA,GACKhB,EAAAA,EAAAA,IAAC,CAAD,EAACK,GAAwB,CAAExE,UAAWwE,GAAuB,CACjE3D,MAAOA,GACHmD,GAEHxH,GAKX,IAGFoF,EAAUyC,UAAY,CACpB7H,SAAU8H,IAAAA,KACVtE,UAAWsE,IAAAA,OACX1H,OAAQ0H,IAAAA,OACRE,qBAAsBF,IAAAA,OACtBzC,KAAMyC,IAAAA,KACNzD,MAAOyD,IAAAA,OACPG,MAAOH,IAAAA,MAGT1C,EAAU2C,YAAc,0ICtEXY,GAAevB,EAAAA,EAAAA,aAC1B,SAACC,EAAuEnH,SAArEF,EAAQqH,EAAArH,SAAE4I,EAAQvB,EAAAuB,SAAEpF,EAAS6D,EAAA7D,UAAEjE,EAAK8H,EAAA9H,MAAEsJ,EAAAxB,EAAAhD,MAAAA,OAAQ,IAAAwE,EAAA,EAACA,EAAEC,EAAOzB,EAAAyB,QAAKtB,GAA/DC,EAAAA,EAAAA,IAAAJ,EAAA,+DACSa,GAAYC,EAAAA,EAAAA,YAAWC,EAAAA,GAAwBF,QAEvD,OACER,EAAAA,cACE,OAAAC,EAAAA,EAAAA,IAAA,CAAAnE,WAAW0B,EAAAA,EAAAA,GACT,gBAAc0C,EAAA,GAEZA,EAAC,MAAMjH,OAAApB,IAAUA,EACjBqI,EAAC,gBAAgBjH,OAAAmI,IAAYA,EAC7BlB,EAAA,yBAAyBgB,EAE3BhB,GAAApE,KAEI0E,GAAW,CAAE/H,MAAO,CAAEoI,MAAO,GAAG5H,OAAA0D,EAAQ,OAC1CmD,EACJ,CAAAtH,IAAKA,IAEJF,EAGP,IAEF2I,EAAad,UAAY,CACvBe,SAAUd,IAAAA,KACV9H,SAAU8H,IAAAA,KACVtE,UAAWsE,IAAAA,OACXvI,MAAOwJ,EAAAA,GACP1E,MAAOyD,IAAAA,OACPgB,QAAShB,IAAAA,MAAgB,CAAC,aAG5Ba,EAAaZ,YAAc,uHCnDdK,GAA0BY,EAAAA,EAAAA,eAAc,CAAC,GAEzCC,GAAmB7B,EAAAA,EAAAA,aAC9B,SAACC,EAAkCnH,GAAhC,IAAAF,EAAQqH,EAAArH,SAAEwD,EAAS6D,EAAA7D,UAAKgE,GAA1BC,EAAAA,EAAAA,IAAAJ,EAAA,0BACC,OACEK,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CAAKnE,WAAW0B,EAAAA,EAAAA,GAAW,mBAAoB1B,GAAYtD,IAAKA,GAASsH,GACvEE,EAAAA,cAACU,EAAwBc,SAAQ,CAC/B7E,MAAO,CACL6D,SAAS,IAGVlI,GAIT,IAGFiJ,EAAiBpB,UAAY,CAC3B7H,SAAU8H,IAAAA,KACVtE,UAAWsE,IAAAA,QAGbmB,EAAiBlB,YAAc,4JCAlB5B,GAAgBiB,EAAAA,EAAAA,aAC3B,SAACC,EAA4DnH,SAA1DmG,EAAMgB,EAAAhB,OAAEV,EAAK0B,EAAA1B,MAAEnC,EAAS6D,EAAA7D,UAAEjE,EAAK8H,EAAA9H,MAAEsF,EAAKwC,EAAAxC,MAAER,EAAKgD,EAAAhD,MAAKmD,GAApDC,EAAAA,EAAAA,IAAAJ,EAAA,wDACC,OACEK,EAAAA,cAACjE,EAAAA,GACCkE,EAAAA,EAAAA,IAAA,CAAAnE,WAAW0B,EAAAA,EAAAA,IAAa0C,EAAA,GAAAA,EAAC,MAAMjH,OAAApB,IAAUA,EAAOqI,EAAA,cAAcrI,EAASqI,GAAApE,IACnEgE,EAAI,CACRtH,IAAKA,IAELwH,EAAAA,cAAChE,EAAAA,EAAS,CAACF,UAAU,yDACnBkE,EAAAA,cAAA,WACGrD,GAASqD,EAAAA,cAAK,OAAAlE,UAAU,oBAAoBa,GAC5CQ,GAAS6C,EAAAA,cAAA,WAAM7C,IAEjBwB,GAEFV,EAGP,IAGFQ,EAAc0B,UAAY,CACxBxB,OAAQyB,IAAAA,KACRnC,MAAOmC,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,OAC9CtE,UAAWsE,IAAAA,OACXvI,MAAOwJ,EAAAA,GACPlE,MAAOiD,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,OAC9CzD,MAAOyD,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,KAAgBA,IAAAA,UAGhE3B,EAAc4B,YAAc,+KC5BftC,GAAgB2B,EAAAA,EAAAA,aAC3B,SAACC,EAAoDnH,SAAlDsD,EAAS6D,EAAA7D,UAAEmC,EAAK0B,EAAA1B,MAAEpG,EAAK8H,EAAA9H,MAAE0E,EAAIoD,EAAApD,KAAE6B,EAAMuB,EAAAvB,OAAK0B,GAAIC,EAAAA,EAAAA,IAAAJ,EAAhD,+CACC,OACEK,EAAAA,cAACjE,EAAAA,GAAKkE,EAAAA,EAAAA,IAAA,CAACnE,UAAWA,GAAegE,EAAI,CAAEtH,IAAKA,IAC1CwH,EAAAA,cAACyB,EAAAA,EACC,CAAA3F,WAAW0B,EAAAA,EAAAA,GACT,sEAAoE0C,EAAA,GAElEA,EAAC,MAAMjH,OAAApB,IAAUA,EAEpBqI,KAEA3D,EACA0B,GAEH+B,EAAAA,cAAChE,EAAAA,EAAU,CAAAF,UAAU,mBAClBsC,GACCA,EAAO1B,KAAI,SAACC,EAAcW,GACxB,OACE0C,EAAAA,cAACA,EAAAA,SAAe,CAAA0B,IAAKpE,GAClBA,EAAQ,IAAM,GAAK0C,EAAAA,cAAK,OAAAlE,UAAU,OACnCkE,EAAAA,cAAC9D,EAAAA,EAAI,KACH8D,EAAAA,cAAA,OAAKlE,UAAU,oBAAoBa,EAAMA,OACzCqD,EAAAA,cAAK,OAAAlE,UAAU,4CAA4Ca,EAAMQ,QAIzE,KAIV,IAGFY,EAAcoC,UAAY,CACxBlC,MAAOmC,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,OAC9CtE,UAAWsE,IAAAA,OACXvI,MAAOwJ,EAAAA,GACP9E,KAAM6D,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,OAC7ChC,OAAQgC,IAAAA,QAAkBA,IAAAA,MAG5BrC,EAAcsC,YAAc,+DC3E5B,IAAMzI,EAAW,SAAC+J,EAAkBC,GAClC,GAAsB,qBAAXC,QAIa,qBAAb3K,SAAX,CAIA,IAAM4K,EAAW,OAAAF,QAAA,IAAAA,EAAAA,EAAW1K,SAAS6K,KAErC,OAAOF,OAAOG,iBAAiBF,EAAU,MAAMG,iBAAiBN,GAAUO,QAAQ,MAAO,GAJxF,CAKH,iBCnBA,OAOC,WACA,aAEA,IAAIC,EAAS,CAAC,EAAEC,eAEhB,SAAS5E,IAGR,IAFA,IAAI6E,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAU9E,OAAQ6E,IAAK,CAC1C,IAAIE,EAAMD,UAAUD,GAChBE,IACHH,EAAUI,EAAYJ,EAASK,EAAWF,IAE5C,CAEA,OAAOH,CACR,CAEA,SAASK,EAAYF,GACpB,GAAmB,kBAARA,GAAmC,kBAARA,EACrC,OAAOA,EAGR,GAAmB,kBAARA,EACV,MAAO,GAGR,GAAIG,MAAMC,QAAQJ,GACjB,OAAOhF,EAAWqF,MAAM,KAAML,GAG/B,GAAIA,EAAIM,WAAaC,OAAOC,UAAUF,WAAaN,EAAIM,SAASA,WAAWG,SAAS,iBACnF,OAAOT,EAAIM,WAGZ,IAAIT,EAAU,GAEd,IAAK,IAAIX,KAAOc,EACXL,EAAOe,KAAKV,EAAKd,IAAQc,EAAId,KAChCW,EAAUI,EAAYJ,EAASX,IAIjC,OAAOW,CACR,CAEA,SAASI,EAAa9F,EAAOwG,GAC5B,OAAKA,EAIDxG,EACIA,EAAQ,IAAMwG,EAGfxG,EAAQwG,EAPPxG,CAQT,CAEqCyG,EAAOC,SAC3C7F,EAAW8F,QAAU9F,EACrB4F,EAAOC,QAAU7F,QAKhB,KAFwB,EAAF,WACtB,OAAOA,CACP,UAFoB,OAEpB,YAIF,CArEA","sources":["views/dashboard/MainChart.js","views/dashboard/Dashboard.js","views/widgets/WidgetsBrand.js","views/widgets/WidgetsDropdown.js","../node_modules/@coreui/icons/src/free/cil-arrow-bottom.ts","../node_modules/@coreui/icons/src/free/cil-arrow-top.ts","../node_modules/@coreui/icons/src/free/cil-calendar.ts","../node_modules/@coreui/icons/src/free/cil-cloud-download.ts","../node_modules/@coreui/icons/src/free/cil-options.ts","../node_modules/@coreui/icons/src/free/cil-user-female.ts","../node_modules/@coreui/react/src/components/button-group/CButtonGroup.tsx","../node_modules/@coreui/react/src/components/card/CCardFooter.tsx","../node_modules/@coreui/react/src/components/progress/CProgress.tsx","../node_modules/@coreui/react/src/components/progress/CProgressBar.tsx","../node_modules/@coreui/react/src/components/progress/CProgressStacked.tsx","../node_modules/@coreui/react/src/components/widgets/CWidgetStatsA.tsx","../node_modules/@coreui/react/src/components/widgets/CWidgetStatsD.tsx","../node_modules/@coreui/utils/src/getStyle.ts","../node_modules/classnames/index.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\r\n\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\nimport { getStyle } from '@coreui/utils'\r\n\r\nconst MainChart = () => {\r\n  const chartRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    document.documentElement.addEventListener('ColorSchemeChange', () => {\r\n      if (chartRef.current) {\r\n        setTimeout(() => {\r\n          chartRef.current.options.scales.x.grid.borderColor = getStyle(\r\n            '--cui-border-color-translucent',\r\n          )\r\n          chartRef.current.options.scales.x.grid.color = getStyle('--cui-border-color-translucent')\r\n          chartRef.current.options.scales.x.ticks.color = getStyle('--cui-body-color')\r\n          chartRef.current.options.scales.y.grid.borderColor = getStyle(\r\n            '--cui-border-color-translucent',\r\n          )\r\n          chartRef.current.options.scales.y.grid.color = getStyle('--cui-border-color-translucent')\r\n          chartRef.current.options.scales.y.ticks.color = getStyle('--cui-body-color')\r\n          chartRef.current.update()\r\n        })\r\n      }\r\n    })\r\n  }, [chartRef])\r\n\r\n  const random = () => Math.round(Math.random() * 100)\r\n\r\n  return (\r\n    <>\r\n      <CChartLine\r\n        ref={chartRef}\r\n        style={{ height: '300px', marginTop: '40px' }}\r\n        data={{\r\n          labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n          datasets: [\r\n            {\r\n              label: 'My First dataset',\r\n              backgroundColor: `rgba(${getStyle('--cui-info-rgb')}, .1)`,\r\n              borderColor: getStyle('--cui-info'),\r\n              pointHoverBackgroundColor: getStyle('--cui-info'),\r\n              borderWidth: 2,\r\n              data: [\r\n                random(50, 200),\r\n                random(50, 200),\r\n                random(50, 200),\r\n                random(50, 200),\r\n                random(50, 200),\r\n                random(50, 200),\r\n                random(50, 200),\r\n              ],\r\n              fill: true,\r\n            },\r\n            {\r\n              label: 'My Second dataset',\r\n              backgroundColor: 'transparent',\r\n              borderColor: getStyle('--cui-success'),\r\n              pointHoverBackgroundColor: getStyle('--cui-success'),\r\n              borderWidth: 2,\r\n              data: [\r\n                random(50, 200),\r\n                random(50, 200),\r\n                random(50, 200),\r\n                random(50, 200),\r\n                random(50, 200),\r\n                random(50, 200),\r\n                random(50, 200),\r\n              ],\r\n            },\r\n            {\r\n              label: 'My Third dataset',\r\n              backgroundColor: 'transparent',\r\n              borderColor: getStyle('--cui-danger'),\r\n              pointHoverBackgroundColor: getStyle('--cui-danger'),\r\n              borderWidth: 1,\r\n              borderDash: [8, 5],\r\n              data: [65, 65, 65, 65, 65, 65, 65],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              display: false,\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                color: getStyle('--cui-border-color-translucent'),\r\n                drawOnChartArea: false,\r\n              },\r\n              ticks: {\r\n                color: getStyle('--cui-body-color'),\r\n              },\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              border: {\r\n                color: getStyle('--cui-border-color-translucent'),\r\n              },\r\n              grid: {\r\n                color: getStyle('--cui-border-color-translucent'),\r\n              },\r\n              max: 250,\r\n              ticks: {\r\n                color: getStyle('--cui-body-color'),\r\n                maxTicksLimit: 5,\r\n                stepSize: Math.ceil(250 / 5),\r\n              },\r\n            },\r\n          },\r\n          elements: {\r\n            line: {\r\n              tension: 0.4,\r\n            },\r\n            point: {\r\n              radius: 0,\r\n              hitRadius: 10,\r\n              hoverRadius: 4,\r\n              hoverBorderWidth: 3,\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainChart\r\n","import classNames from 'classnames'\r\n\r\nimport {\r\n  cibCcAmex,\r\n  cibCcApplePay,\r\n  cibCcMastercard,\r\n  cibCcPaypal,\r\n  cibCcStripe,\r\n  cibCcVisa,\r\n  cibFacebook,\r\n  cibGoogle,\r\n  cibLinkedin,\r\n  cibTwitter,\r\n  cifBr,\r\n  cifEs,\r\n  cifFr,\r\n  cifIn,\r\n  cifPl,\r\n  cifUs,\r\n  cilCloudDownload,\r\n  cilPeople,\r\n  cilUser,\r\n  cilUserFemale,\r\n} from '@coreui/icons'\r\nimport CIcon from '@coreui/icons-react'\r\nimport {\r\n  CAvatar,\r\n  CButton,\r\n  CButtonGroup,\r\n  CCard,\r\n  CCardBody,\r\n  CCardFooter,\r\n  CCardHeader,\r\n  CCol,\r\n  CProgress,\r\n  CRow,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CTableRow,\r\n} from '@coreui/react'\r\n\r\nimport avatar1 from 'src/assets/images/avatars/1.jpg'\r\nimport avatar2 from 'src/assets/images/avatars/2.jpg'\r\nimport avatar3 from 'src/assets/images/avatars/3.jpg'\r\nimport avatar4 from 'src/assets/images/avatars/4.jpg'\r\nimport avatar5 from 'src/assets/images/avatars/5.jpg'\r\nimport avatar6 from 'src/assets/images/avatars/6.jpg'\r\n\r\nimport WidgetsBrand from '../widgets/WidgetsBrand'\r\nimport WidgetsDropdown from '../widgets/WidgetsDropdown'\r\nimport MainChart from './MainChart'\r\n\r\nconst Dashboard = () => {\r\n\r\n  const progressExample = [\r\n    { title: 'Зочилсон', value: '29.703 Users', percent: 40, color: 'success' },\r\n    { title: 'Давхардаагүй', value: '24.093 Users', percent: 20, color: 'info' },\r\n    { title: 'Хуудас үзэлт', value: '78.706 Views', percent: 60, color: 'warning' },\r\n    { title: 'Шинэ хэрэглэгч', value: '22.123 Users', percent: 80, color: 'danger' },\r\n    { title: 'Хэмжүүр', value: 'Average Rate', percent: 40.15, color: 'primary' },\r\n  ]\r\n\r\n  const progressGroupExample1 = [\r\n    { title: 'Даваа', value1: 34, value2: 78 },\r\n    { title: 'Мягмар', value1: 56, value2: 94 },\r\n    { title: 'Лхагва', value1: 12, value2: 67 },\r\n    { title: 'Пүрэв', value1: 43, value2: 91 },\r\n    { title: 'Баасан', value1: 22, value2: 73 },\r\n    { title: 'Бямба', value1: 53, value2: 82 },\r\n    { title: 'Ням', value1: 9, value2: 69 },\r\n  ]\r\n\r\n  const progressGroupExample2 = [\r\n    { title: 'Эр', icon: cilUser, value: 53 },\r\n    { title: 'Эм', icon: cilUserFemale, value: 43 },\r\n  ]\r\n\r\n  const progressGroupExample3 = [\r\n    { title: 'Google хайлт', icon: cibGoogle, percent: 56, value: '191,235' },\r\n    { title: 'Facebook', icon: cibFacebook, percent: 15, value: '51,223' },\r\n    { title: 'Twitter', icon: cibTwitter, percent: 11, value: '37,564' },\r\n    { title: 'LinkedIn', icon: cibLinkedin, percent: 8, value: '27,319' },\r\n  ]\r\n\r\n  const tableExample = [\r\n    {\r\n      avatar: { src: avatar1, status: 'success' },\r\n      user: {\r\n        name: 'Yiorgos Avraamu',\r\n        new: true,\r\n        registered: 'Jan 1, 2023',\r\n      },\r\n      country: { name: 'USA', flag: cifUs },\r\n      usage: {\r\n        value: 50,\r\n        period: 'Jun 11, 2023 - Jul 10, 2023',\r\n        color: 'success',\r\n      },\r\n      payment: { name: 'Mastercard', icon: cibCcMastercard },\r\n      activity: '10 sec ago',\r\n    },\r\n    {\r\n      avatar: { src: avatar2, status: 'danger' },\r\n      user: {\r\n        name: 'Avram Tarasios',\r\n        new: false,\r\n        registered: 'Jan 1, 2023',\r\n      },\r\n      country: { name: 'Brazil', flag: cifBr },\r\n      usage: {\r\n        value: 22,\r\n        period: 'Jun 11, 2023 - Jul 10, 2023',\r\n        color: 'info',\r\n      },\r\n      payment: { name: 'Visa', icon: cibCcVisa },\r\n      activity: '5 minutes ago',\r\n    },\r\n    {\r\n      avatar: { src: avatar3, status: 'warning' },\r\n      user: { name: 'Quintin Ed', new: true, registered: 'Jan 1, 2023' },\r\n      country: { name: 'India', flag: cifIn },\r\n      usage: {\r\n        value: 74,\r\n        period: 'Jun 11, 2023 - Jul 10, 2023',\r\n        color: 'warning',\r\n      },\r\n      payment: { name: 'Stripe', icon: cibCcStripe },\r\n      activity: '1 hour ago',\r\n    },\r\n    {\r\n      avatar: { src: avatar4, status: 'secondary' },\r\n      user: { name: 'Enéas Kwadwo', new: true, registered: 'Jan 1, 2023' },\r\n      country: { name: 'France', flag: cifFr },\r\n      usage: {\r\n        value: 98,\r\n        period: 'Jun 11, 2023 - Jul 10, 2023',\r\n        color: 'danger',\r\n      },\r\n      payment: { name: 'PayPal', icon: cibCcPaypal },\r\n      activity: 'Last month',\r\n    },\r\n    {\r\n      avatar: { src: avatar5, status: 'success' },\r\n      user: {\r\n        name: 'Agapetus Tadeáš',\r\n        new: true,\r\n        registered: 'Jan 1, 2023',\r\n      },\r\n      country: { name: 'Spain', flag: cifEs },\r\n      usage: {\r\n        value: 22,\r\n        period: 'Jun 11, 2023 - Jul 10, 2023',\r\n        color: 'primary',\r\n      },\r\n      payment: { name: 'Google Wallet', icon: cibCcApplePay },\r\n      activity: 'Last week',\r\n    },\r\n    {\r\n      avatar: { src: avatar6, status: 'danger' },\r\n      user: {\r\n        name: 'Friderik Dávid',\r\n        new: true,\r\n        registered: 'Jan 1, 2023',\r\n      },\r\n      country: { name: 'Poland', flag: cifPl },\r\n      usage: {\r\n        value: 43,\r\n        period: 'Jun 11, 2023 - Jul 10, 2023',\r\n        color: 'success',\r\n      },\r\n      payment: { name: 'Amex', icon: cibCcAmex },\r\n      activity: 'Last week',\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <WidgetsDropdown className=\"mb-4\" />\r\n      <CCard className=\"mb-4\">\r\n        <CCardBody>\r\n          <CRow>\r\n            <CCol sm={5}>\r\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\r\n                Борлуулалт\r\n              </h4>\r\n              <div className=\"small text-body-secondary\">1 сар - 7 сар 2024</div>\r\n            </CCol>\r\n            <CCol sm={7} className=\"d-none d-md-block\">\r\n              <CButton color=\"primary\" className=\"float-end\">\r\n                <CIcon icon={cilCloudDownload} />\r\n              </CButton>\r\n              <CButtonGroup className=\"float-end me-3\">\r\n                {['Өдөр', 'Сар', 'Жил'].map((value) => (\r\n                  <CButton\r\n                    color=\"outline-secondary\"\r\n                    key={value}\r\n                    className=\"mx-0\"\r\n                    active={value === 'Month'}\r\n                  >\r\n                    {value}\r\n                  </CButton>\r\n                ))}\r\n              </CButtonGroup>\r\n            </CCol>\r\n          </CRow>\r\n          <MainChart />\r\n        </CCardBody>\r\n        <CCardFooter>\r\n          <CRow\r\n            xs={{ cols: 1, gutter: 4 }}\r\n            sm={{ cols: 2 }}\r\n            lg={{ cols: 4 }}\r\n            xl={{ cols: 5 }}\r\n            className=\"mb-2 text-center\"\r\n          >\r\n            {progressExample.map((item, index, items) => (\r\n              <CCol\r\n                className={classNames({\r\n                  'd-none d-xl-block': index + 1 === items.length,\r\n                })}\r\n                key={index}\r\n              >\r\n                <div className=\"text-body-secondary\">{item.title}</div>\r\n                <div className=\"fw-semibold text-truncate\">\r\n                  {item.value} ({item.percent})\r\n                </div>\r\n                <CProgress thin className=\"mt-2\" color={item.color} value={item.percent} />\r\n              </CCol>\r\n            ))}\r\n          </CRow>\r\n        </CCardFooter>\r\n      </CCard>\r\n      {/* <WidgetsBrand className=\"mb-4\" withCharts /> */}\r\n      {/*}\r\n      <CRow>\r\n        <CCol xs>\r\n          <CCard className=\"mb-4\">\r\n            <CCardHeader>Traffic {' & '} Sales</CCardHeader>\r\n            <CCardBody>\r\n              <CRow>\r\n                <CCol xs={12} md={6} xl={6}>\r\n                  <CRow>\r\n                    <CCol xs={6}>\r\n                      <div className=\"border-start border-start-4 border-start-info py-1 px-3\">\r\n                        <div className=\"text-body-secondary text-truncate small\">New Clients</div>\r\n                        <div className=\"fs-5 fw-semibold\">9,123</div>\r\n                      </div>\r\n                    </CCol>\r\n                    <CCol xs={6}>\r\n                      <div className=\"border-start border-start-4 border-start-danger py-1 px-3 mb-3\">\r\n                        <div className=\"text-body-secondary text-truncate small\">\r\n                          Recurring Clients\r\n                        </div>\r\n                        <div className=\"fs-5 fw-semibold\">22,643</div>\r\n                      </div>\r\n                    </CCol>\r\n                  </CRow>\r\n                  <hr className=\"mt-0\" />\r\n                  {progressGroupExample1.map((item, index) => (\r\n                    <div className=\"progress-group mb-4\" key={index}>\r\n                      <div className=\"progress-group-prepend\">\r\n                        <span className=\"text-body-secondary small\">{item.title}</span>\r\n                      </div>\r\n                      <div className=\"progress-group-bars\">\r\n                        <CProgress thin color=\"info\" value={item.value1} />\r\n                        <CProgress thin color=\"danger\" value={item.value2} />\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </CCol>\r\n                <CCol xs={12} md={6} xl={6}>\r\n                  <CRow>\r\n                    <CCol xs={6}>\r\n                      <div className=\"border-start border-start-4 border-start-warning py-1 px-3 mb-3\">\r\n                        <div className=\"text-body-secondary text-truncate small\">Pageviews</div>\r\n                        <div className=\"fs-5 fw-semibold\">78,623</div>\r\n                      </div>\r\n                    </CCol>\r\n                    <CCol xs={6}>\r\n                      <div className=\"border-start border-start-4 border-start-success py-1 px-3 mb-3\">\r\n                        <div className=\"text-body-secondary text-truncate small\">Organic</div>\r\n                        <div className=\"fs-5 fw-semibold\">49,123</div>\r\n                      </div>\r\n                    </CCol>\r\n                  </CRow>\r\n\r\n                  <hr className=\"mt-0\" />\r\n\r\n                  {progressGroupExample2.map((item, index) => (\r\n                    <div className=\"progress-group mb-4\" key={index}>\r\n                      <div className=\"progress-group-header\">\r\n                        <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\r\n                        <span>{item.title}</span>\r\n                        <span className=\"ms-auto fw-semibold\">{item.value}%</span>\r\n                      </div>\r\n                      <div className=\"progress-group-bars\">\r\n                        <CProgress thin color=\"warning\" value={item.value} />\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n\r\n                  <div className=\"mb-5\"></div>\r\n\r\n                  {progressGroupExample3.map((item, index) => (\r\n                    <div className=\"progress-group\" key={index}>\r\n                      <div className=\"progress-group-header\">\r\n                        <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\r\n                        <span>{item.title}</span>\r\n                        <span className=\"ms-auto fw-semibold\">\r\n                          {item.value}{' '}\r\n                          <span className=\"text-body-secondary small\">({item.percent}%)</span>\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"progress-group-bars\">\r\n                        <CProgress thin color=\"success\" value={item.percent} />\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </CCol>\r\n              </CRow>\r\n\r\n              <br />\r\n\r\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\r\n                <CTableHead className=\"text-nowrap\">\r\n                  <CTableRow>\r\n                    <CTableHeaderCell className=\"bg-body-tertiary text-center\">\r\n                      <CIcon icon={cilPeople} />\r\n                    </CTableHeaderCell>\r\n                    <CTableHeaderCell className=\"bg-body-tertiary\">User</CTableHeaderCell>\r\n                    <CTableHeaderCell className=\"bg-body-tertiary text-center\">\r\n                      Country\r\n                    </CTableHeaderCell>\r\n                    <CTableHeaderCell className=\"bg-body-tertiary\">Usage</CTableHeaderCell>\r\n                    <CTableHeaderCell className=\"bg-body-tertiary text-center\">\r\n                      Payment Method\r\n                    </CTableHeaderCell>\r\n                    <CTableHeaderCell className=\"bg-body-tertiary\">Activity</CTableHeaderCell>\r\n                  </CTableRow>\r\n                </CTableHead>\r\n                <CTableBody>\r\n                  {tableExample.map((item, index) => (\r\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\r\n                      <CTableDataCell className=\"text-center\">\r\n                        <CAvatar size=\"md\" src={item.avatar.src} status={item.avatar.status} />\r\n                      </CTableDataCell>\r\n                      <CTableDataCell>\r\n                        <div>{item.user.name}</div>\r\n                        <div className=\"small text-body-secondary text-nowrap\">\r\n                          <span>{item.user.new ? 'New' : 'Recurring'}</span> | Registered:{' '}\r\n                          {item.user.registered}\r\n                        </div>\r\n                      </CTableDataCell>\r\n                      <CTableDataCell className=\"text-center\">\r\n                        <CIcon size=\"xl\" icon={item.country.flag} title={item.country.name} />\r\n                      </CTableDataCell>\r\n                      <CTableDataCell>\r\n                        <div className=\"d-flex justify-content-between text-nowrap\">\r\n                          <div className=\"fw-semibold\">{item.usage.value}%</div>\r\n                          <div className=\"ms-3\">\r\n                            <small className=\"text-body-secondary\">{item.usage.period}</small>\r\n                          </div>\r\n                        </div>\r\n                        <CProgress thin color={item.usage.color} value={item.usage.value} />\r\n                      </CTableDataCell>\r\n                      <CTableDataCell className=\"text-center\">\r\n                        <CIcon size=\"xl\" icon={item.payment.icon} />\r\n                      </CTableDataCell>\r\n                      <CTableDataCell>\r\n                        <div className=\"small text-body-secondary text-nowrap\">Last login</div>\r\n                        <div className=\"fw-semibold text-nowrap\">{item.activity}</div>\r\n                      </CTableDataCell>\r\n                    </CTableRow>\r\n                  ))}\r\n                </CTableBody>\r\n              </CTable>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n      */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { CWidgetStatsD, CRow, CCol } from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cibFacebook, cibLinkedin, cibTwitter, cilCalendar } from '@coreui/icons'\r\nimport { CChart } from '@coreui/react-chartjs'\r\n\r\nconst WidgetsBrand = (props) => {\r\n  const chartOptions = {\r\n    elements: {\r\n      line: {\r\n        tension: 0.4,\r\n      },\r\n      point: {\r\n        radius: 0,\r\n        hitRadius: 10,\r\n        hoverRadius: 4,\r\n        hoverBorderWidth: 3,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        display: false,\r\n      },\r\n      y: {\r\n        display: false,\r\n      },\r\n    },\r\n  }\r\n\r\n  return (\r\n    <CRow className={props.className} xs={{ gutter: 4 }}>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsD\r\n          {...(props.withCharts && {\r\n            chart: (\r\n              <CChart\r\n                className=\"position-absolute w-100 h-100\"\r\n                type=\"line\"\r\n                data={{\r\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                  datasets: [\r\n                    {\r\n                      backgroundColor: 'rgba(255,255,255,.1)',\r\n                      borderColor: 'rgba(255,255,255,.55)',\r\n                      pointHoverBackgroundColor: '#fff',\r\n                      borderWidth: 2,\r\n                      data: [65, 59, 84, 84, 51, 55, 40],\r\n                      fill: true,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={chartOptions}\r\n              />\r\n            ),\r\n          })}\r\n          icon={<CIcon icon={cibFacebook} height={52} className=\"my-4 text-white\" />}\r\n          values={[\r\n            { title: 'friends', value: '89K' },\r\n            { title: 'feeds', value: '459' },\r\n          ]}\r\n          style={{\r\n            '--cui-card-cap-bg': '#3b5998',\r\n          }}\r\n        />\r\n      </CCol>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsD\r\n          {...(props.withCharts && {\r\n            chart: (\r\n              <CChart\r\n                className=\"position-absolute w-100 h-100\"\r\n                type=\"line\"\r\n                data={{\r\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                  datasets: [\r\n                    {\r\n                      backgroundColor: 'rgba(255,255,255,.1)',\r\n                      borderColor: 'rgba(255,255,255,.55)',\r\n                      pointHoverBackgroundColor: '#fff',\r\n                      borderWidth: 2,\r\n                      data: [1, 13, 9, 17, 34, 41, 38],\r\n                      fill: true,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={chartOptions}\r\n              />\r\n            ),\r\n          })}\r\n          icon={<CIcon icon={cibTwitter} height={52} className=\"my-4 text-white\" />}\r\n          values={[\r\n            { title: 'followers', value: '973k' },\r\n            { title: 'tweets', value: '1.792' },\r\n          ]}\r\n          style={{\r\n            '--cui-card-cap-bg': '#00aced',\r\n          }}\r\n        />\r\n      </CCol>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsD\r\n          {...(props.withCharts && {\r\n            chart: (\r\n              <CChart\r\n                className=\"position-absolute w-100 h-100\"\r\n                type=\"line\"\r\n                data={{\r\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                  datasets: [\r\n                    {\r\n                      backgroundColor: 'rgba(255,255,255,.1)',\r\n                      borderColor: 'rgba(255,255,255,.55)',\r\n                      pointHoverBackgroundColor: '#fff',\r\n                      borderWidth: 2,\r\n                      data: [78, 81, 80, 45, 34, 12, 40],\r\n                      fill: true,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={chartOptions}\r\n              />\r\n            ),\r\n          })}\r\n          icon={<CIcon icon={cibLinkedin} height={52} className=\"my-4 text-white\" />}\r\n          values={[\r\n            { title: 'contacts', value: '500' },\r\n            { title: 'feeds', value: '1.292' },\r\n          ]}\r\n          style={{\r\n            '--cui-card-cap-bg': '#4875b4',\r\n          }}\r\n        />\r\n      </CCol>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsD\r\n          color=\"warning\"\r\n          {...(props.withCharts && {\r\n            chart: (\r\n              <CChart\r\n                className=\"position-absolute w-100 h-100\"\r\n                type=\"line\"\r\n                data={{\r\n                  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                  datasets: [\r\n                    {\r\n                      backgroundColor: 'rgba(255,255,255,.1)',\r\n                      borderColor: 'rgba(255,255,255,.55)',\r\n                      pointHoverBackgroundColor: '#fff',\r\n                      borderWidth: 2,\r\n                      data: [35, 23, 56, 22, 97, 23, 64],\r\n                      fill: true,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={chartOptions}\r\n              />\r\n            ),\r\n          })}\r\n          icon={<CIcon icon={cilCalendar} height={52} className=\"my-4 text-white\" />}\r\n          values={[\r\n            { title: 'events', value: '12+' },\r\n            { title: 'meetings', value: '4' },\r\n          ]}\r\n        />\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nWidgetsBrand.propTypes = {\r\n  className: PropTypes.string,\r\n  withCharts: PropTypes.bool,\r\n}\r\n\r\nexport default WidgetsBrand\r\n","import React, { useEffect, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle,\r\n  CWidgetStatsA,\r\n} from '@coreui/react'\r\nimport { getStyle } from '@coreui/utils'\r\nimport { CChartBar, CChartLine } from '@coreui/react-chartjs'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cilArrowBottom, cilArrowTop, cilOptions } from '@coreui/icons'\r\n\r\nconst WidgetsDropdown = (props) => {\r\n  const widgetChartRef1 = useRef(null)\r\n  const widgetChartRef2 = useRef(null)\r\n\r\n  useEffect(() => {\r\n    document.documentElement.addEventListener('ColorSchemeChange', () => {\r\n      if (widgetChartRef1.current) {\r\n        setTimeout(() => {\r\n          widgetChartRef1.current.data.datasets[0].pointBackgroundColor = getStyle('--cui-primary')\r\n          widgetChartRef1.current.update()\r\n        })\r\n      }\r\n\r\n      if (widgetChartRef2.current) {\r\n        setTimeout(() => {\r\n          widgetChartRef2.current.data.datasets[0].pointBackgroundColor = getStyle('--cui-info')\r\n          widgetChartRef2.current.update()\r\n        })\r\n      }\r\n    })\r\n  }, [widgetChartRef1, widgetChartRef2])\r\n\r\n  return (\r\n    <CRow className={props.className} xs={{ gutter: 4 }}>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsA\r\n          color=\"primary\"\r\n          value={\r\n            <>\r\n              26K{' '}\r\n              <span className=\"fs-6 fw-normal\">\r\n                (-12.4% <CIcon icon={cilArrowBottom} />)\r\n              </span>\r\n            </>\r\n          }\r\n          title=\"Зарлага\"\r\n          action={\r\n            <CDropdown alignment=\"end\">\r\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"text-white p-0\">\r\n                <CIcon icon={cilOptions} />\r\n              </CDropdownToggle>\r\n              <CDropdownMenu>\r\n                <CDropdownItem>Action</CDropdownItem>\r\n                <CDropdownItem>Another action</CDropdownItem>\r\n                <CDropdownItem>Something else here...</CDropdownItem>\r\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n              </CDropdownMenu>\r\n            </CDropdown>\r\n          }\r\n          chart={\r\n            <CChartLine\r\n              ref={widgetChartRef1}\r\n              className=\"mt-3 mx-3\"\r\n              style={{ height: '70px' }}\r\n              data={{\r\n                labels: ['1-сар', '2-сар', '3-сар', '4-сар', '5-сар', '6-сар', '7-сар'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'transparent',\r\n                    borderColor: 'rgba(255,255,255,.55)',\r\n                    pointBackgroundColor: getStyle('--cui-primary'),\r\n                    data: [65, 59, 84, 84, 51, 55, 40],\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                plugins: {\r\n                  legend: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  x: {\r\n                    border: {\r\n                      display: false,\r\n                    },\r\n                    grid: {\r\n                      display: false,\r\n                      drawBorder: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  y: {\r\n                    min: 30,\r\n                    max: 89,\r\n                    display: false,\r\n                    grid: {\r\n                      display: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    borderWidth: 1,\r\n                    tension: 0.4,\r\n                  },\r\n                  point: {\r\n                    radius: 4,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 4,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      </CCol>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsA\r\n          color=\"info\"\r\n          value={\r\n            <>\r\n              6,200,000 ₮{' '}\r\n              <span className=\"fs-6 fw-normal\">\r\n                (40.9% <CIcon icon={cilArrowTop} />)\r\n              </span>\r\n            </>\r\n          }\r\n          title=\"Худалдан авалт\"\r\n          action={\r\n            <CDropdown alignment=\"end\">\r\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"text-white p-0\">\r\n                <CIcon icon={cilOptions} />\r\n              </CDropdownToggle>\r\n              <CDropdownMenu>\r\n                <CDropdownItem>Action</CDropdownItem>\r\n                <CDropdownItem>Another action</CDropdownItem>\r\n                <CDropdownItem>Something else here...</CDropdownItem>\r\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n              </CDropdownMenu>\r\n            </CDropdown>\r\n          }\r\n          chart={\r\n            <CChartLine\r\n              ref={widgetChartRef2}\r\n              className=\"mt-3 mx-3\"\r\n              style={{ height: '70px' }}\r\n              data={{\r\n                labels: ['1-сар', '2-сар', '3-сар', '4-сар', '5-сар', '6-сар', '7-сар'],\r\n                //labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'transparent',\r\n                    borderColor: 'rgba(255,255,255,.55)',\r\n                    pointBackgroundColor: getStyle('--cui-info'),\r\n                    data: [1, 18, 9, 17, 34, 22, 11],\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                plugins: {\r\n                  legend: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  x: {\r\n                    border: {\r\n                      display: false,\r\n                    },\r\n                    grid: {\r\n                      display: false,\r\n                      drawBorder: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  y: {\r\n                    min: -9,\r\n                    max: 39,\r\n                    display: false,\r\n                    grid: {\r\n                      display: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    borderWidth: 1,\r\n                  },\r\n                  point: {\r\n                    radius: 4,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 4,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      </CCol>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsA\r\n          color=\"warning\"\r\n          value={\r\n            <>\r\n              2.49%{' '}\r\n              <span className=\"fs-6 fw-normal\">\r\n                (84.7% <CIcon icon={cilArrowTop} />)\r\n              </span>\r\n            </>\r\n          }\r\n          title=\"Валют хөрвөлт\"\r\n          action={\r\n            <CDropdown alignment=\"end\">\r\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"text-white p-0\">\r\n                <CIcon icon={cilOptions} />\r\n              </CDropdownToggle>\r\n              <CDropdownMenu>\r\n                <CDropdownItem>Action</CDropdownItem>\r\n                <CDropdownItem>Another action</CDropdownItem>\r\n                <CDropdownItem>Something else here...</CDropdownItem>\r\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n              </CDropdownMenu>\r\n            </CDropdown>\r\n          }\r\n          chart={\r\n            <CChartLine\r\n              className=\"mt-3\"\r\n              style={{ height: '70px' }}\r\n              data={{\r\n                labels: ['1-сар', '2-сар', '3-сар', '4-сар', '5-сар', '6-сар', '7-сар'],\r\n                //labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(255,255,255,.2)',\r\n                    borderColor: 'rgba(255,255,255,.55)',\r\n                    data: [78, 81, 80, 45, 34, 12, 40],\r\n                    fill: true,\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                plugins: {\r\n                  legend: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  x: {\r\n                    display: false,\r\n                  },\r\n                  y: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                elements: {\r\n                  line: {\r\n                    borderWidth: 2,\r\n                    tension: 0.4,\r\n                  },\r\n                  point: {\r\n                    radius: 0,\r\n                    hitRadius: 10,\r\n                    hoverRadius: 4,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      </CCol>\r\n      <CCol sm={6} xl={4} xxl={3}>\r\n        <CWidgetStatsA\r\n          color=\"danger\"\r\n          value={\r\n            <>\r\n              44K{' '}\r\n              <span className=\"fs-6 fw-normal\">\r\n                (-23.6% <CIcon icon={cilArrowBottom} />)\r\n              </span>\r\n            </>\r\n          }\r\n          title=\"Алдагдал\"\r\n          action={\r\n            <CDropdown alignment=\"end\">\r\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"text-white p-0\">\r\n                <CIcon icon={cilOptions} />\r\n              </CDropdownToggle>\r\n              <CDropdownMenu>\r\n                <CDropdownItem>Action</CDropdownItem>\r\n                <CDropdownItem>Another action</CDropdownItem>\r\n                <CDropdownItem>Something else here...</CDropdownItem>\r\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n              </CDropdownMenu>\r\n            </CDropdown>\r\n          }\r\n          chart={\r\n            <CChartBar\r\n              className=\"mt-3 mx-3\"\r\n              style={{ height: '70px' }}\r\n              data={{\r\n                labels: [\r\n                  'January',\r\n                  'February',\r\n                  'March',\r\n                  'April',\r\n                  'May',\r\n                  'June',\r\n                  'July',\r\n                  'August',\r\n                  'September',\r\n                  'October',\r\n                  'November',\r\n                  'December',\r\n                  'January',\r\n                  'February',\r\n                  'March',\r\n                  'April',\r\n                ],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(255,255,255,.2)',\r\n                    borderColor: 'rgba(255,255,255,.55)',\r\n                    data: [78, 81, 80, 45, 34, 12, 40, 85, 65, 23, 12, 98, 34, 84, 67, 82],\r\n                    barPercentage: 0.6,\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                maintainAspectRatio: false,\r\n                plugins: {\r\n                  legend: {\r\n                    display: false,\r\n                  },\r\n                },\r\n                scales: {\r\n                  x: {\r\n                    grid: {\r\n                      display: false,\r\n                      drawTicks: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  y: {\r\n                    border: {\r\n                      display: false,\r\n                    },\r\n                    grid: {\r\n                      display: false,\r\n                      drawBorder: false,\r\n                      drawTicks: false,\r\n                    },\r\n                    ticks: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nWidgetsDropdown.propTypes = {\r\n  className: PropTypes.string,\r\n  withCharts: PropTypes.bool,\r\n}\r\n\r\nexport default WidgetsDropdown\r\n","export var cilArrowBottom = [\"512 512\", \"<polygon fill='var(--ci-primary-color, currentColor)' points='367.997 338.75 271.999 434.747 271.999 17.503 239.999 17.503 239.999 434.745 144.003 338.75 121.376 361.377 256 496 390.624 361.377 367.997 338.75' class='ci-primary'/>\"];\n","export var cilArrowTop = [\"512 512\", \"<polygon fill='var(--ci-primary-color, currentColor)' points='390.624 150.625 256 16 121.376 150.625 144.004 173.252 240.001 77.254 240.001 495.236 272.001 495.236 272.001 77.257 367.996 173.252 390.624 150.625' class='ci-primary'/>\"];\n","export var cilCalendar = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M472,96H384V40H352V96H160V40H128V96H40a24.028,24.028,0,0,0-24,24V456a24.028,24.028,0,0,0,24,24H472a24.028,24.028,0,0,0,24-24V120A24.028,24.028,0,0,0,472,96Zm-8,352H48V128h80v40h32V128H352v40h32V128h80Z' class='ci-primary'/><rect width='32' height='32' x='112' y='224' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='200' y='224' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='280' y='224' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='368' y='224' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='112' y='296' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='200' y='296' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='280' y='296' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='368' y='296' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='112' y='368' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='200' y='368' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='280' y='368' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='32' x='368' y='368' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/>\"];\n","export var cilCloudDownload = [\"512 512\", \"<polygon fill='var(--ci-primary-color, currentColor)' points='272 434.744 272 209.176 240 209.176 240 434.744 188.118 382.862 165.49 405.489 256 496 346.51 405.489 323.882 382.862 272 434.744' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M400,161.176c0-79.4-64.6-144-144-144s-144,64.6-144,144a96,96,0,0,0,0,192h80v-32H112a64,64,0,0,1,0-128h32v-32a112,112,0,0,1,224,0v32h32a64,64,0,0,1,0,128H320v32h80a96,96,0,0,0,0-192Z' class='ci-primary'/>\"];\n","export var cilOptions = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M256,144a64,64,0,1,0-64-64A64.072,64.072,0,0,0,256,144Zm0-96a32,32,0,1,1-32,32A32.036,32.036,0,0,1,256,48Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M256,368a64,64,0,1,0,64,64A64.072,64.072,0,0,0,256,368Zm0,96a32,32,0,1,1,32-32A32.036,32.036,0,0,1,256,464Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M256,192a64,64,0,1,0,64,64A64.072,64.072,0,0,0,256,192Zm0,96a32,32,0,1,1,32-32A32.036,32.036,0,0,1,256,288Z' class='ci-primary'/>\"];\n","export var cilUserFemale = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M403.6,343.656l-72.823-47.334L344.043,272h23.428a48,48,0,0,0,44.119-66.908L361.581,90.57a112.029,112.029,0,0,0-211.162,0L100.41,205.092A48,48,0,0,0,144.529,272h23.428l13.266,24.322L108.4,343.656A79.725,79.725,0,0,0,72,410.732V496H440V410.732A79.727,79.727,0,0,0,403.6,343.656ZM408,464H104V410.732a47.836,47.836,0,0,1,21.841-40.246l97.66-63.479L186.953,240H144.529a16,16,0,0,1-14.72-22.27l50.172-114.9.448-1.143a80.029,80.029,0,0,1,151.142,0l.2.58L382.191,217.73A16,16,0,0,1,367.471,240H325.047L288.5,307.007l97.661,63.479h0A47.836,47.836,0,0,1,408,410.732Z' class='ci-primary'/>\"];\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CButtonGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Create a set of buttons that appear vertically stacked rather than horizontally. Split button dropdowns are not supported here.\n   */\n  vertical?: boolean\n}\n\nexport const CButtonGroup = forwardRef<HTMLDivElement, CButtonGroupProps>(\n  ({ children, className, size, vertical, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          vertical ? 'btn-group-vertical' : 'btn-group',\n          { [`btn-group-${size}`]: size },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCButtonGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  vertical: PropTypes.bool,\n}\n\nCButtonGroup.displayName = 'CButtonGroup'\n","import PropTypes from 'prop-types'\nimport React, { forwardRef, HTMLAttributes } from 'react'\nimport classNames from 'classnames'\n\nexport interface CCardFooterProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardFooter = forwardRef<HTMLDivElement, CCardFooterProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-footer', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardFooter.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardFooter.displayName = 'CCardFooter'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CProgressStackedContext } from './CProgressStacked'\nimport { CProgressBar, CProgressBarProps } from './CProgressBar'\n\nexport interface CProgressProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'color'>,\n    CProgressBarProps {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the height of the component. If you set that value the inner `<CProgressBar>` will automatically resize accordingly.\n   */\n  height?: number\n  /**\n   * A string of all className you want applied to the <CProgressBar/> component.\n   *\n   * @since 4.9.0\n   */\n  progressBarClassName?: string\n  /**\n   * Makes progress bar thinner.\n   */\n  thin?: boolean\n  /**\n   * The percent to progress the ProgressBar (out of 100).\n   */\n  value?: number\n  /**\n   * Change the default color to white.\n   */\n  white?: boolean\n}\n\nexport const CProgress = forwardRef<HTMLDivElement, CProgressProps>(\n  ({ children, className, height, progressBarClassName, thin, value, white, ...rest }, ref) => {\n    const { stacked } = useContext(CProgressStackedContext)\n\n    return (\n      <div\n        className={classNames(\n          'progress',\n          {\n            'progress-thin': thin,\n            'progress-white': white,\n          },\n          className,\n        )}\n        {...(value !== undefined && {\n          role: 'progressbar',\n          'aria-valuenow': value,\n          'aria-valuemin': 0,\n          'aria-valuemax': 100,\n        })}\n        style={{\n          ...(height ? { height: `${height}px` } : {}),\n          ...(stacked ? { width: `${value}%` } : {}),\n        }}\n        ref={ref}\n      >\n        {React.Children.toArray(children).some(\n          // @ts-expect-error displayName is set in the CProgressBar component\n          (child) => child.type && child.type.displayName === 'CProgressBar',\n        ) ? (\n          React.Children.map(children, (child) => {\n            // @ts-expect-error displayName is set in the CProgressBar component\n            if (React.isValidElement(child) && child.type.displayName === 'CProgressBar') {\n              return React.cloneElement(child, {\n                ...(value && { value: value }),\n                ...rest,\n              })\n            }\n\n            return\n          })\n        ) : (\n          <CProgressBar\n            {...(progressBarClassName && { className: progressBarClassName })}\n            value={value}\n            {...rest}\n          >\n            {children}\n          </CProgressBar>\n        )}\n      </div>\n    )\n  },\n)\n\nCProgress.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  height: PropTypes.number,\n  progressBarClassName: PropTypes.string,\n  thin: PropTypes.bool,\n  value: PropTypes.number,\n  white: PropTypes.bool,\n}\n\nCProgress.displayName = 'CProgress'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CProgressStackedContext } from './CProgressStacked'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CProgressBarProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Use to animate the stripes right to left via CSS3 animations.\n   */\n  animated?: boolean\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * The percent to progress the ProgressBar.\n   */\n  value?: number\n  /**\n   * Set the progress bar variant to optional striped.\n   */\n  variant?: 'striped'\n}\n\nexport const CProgressBar = forwardRef<HTMLDivElement, CProgressBarProps>(\n  ({ children, animated, className, color, value = 0, variant, ...rest }, ref) => {\n    const { stacked } = useContext(CProgressStackedContext)\n\n    return (\n      <div\n        className={classNames(\n          'progress-bar',\n          {\n            [`bg-${color}`]: color,\n            [`progress-bar-${variant}`]: variant,\n            'progress-bar-animated': animated,\n          },\n          className,\n        )}\n        {...(!stacked && { style: { width: `${value}%` } })}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\nCProgressBar.propTypes = {\n  animated: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  value: PropTypes.number,\n  variant: PropTypes.oneOf(['striped']),\n}\n\nCProgressBar.displayName = 'CProgressBar'\n","import React, { createContext, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CProgressStackedProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport interface CProgressStackedContextProps {\n  stacked?: boolean\n}\n\nexport const CProgressStackedContext = createContext({} as CProgressStackedContextProps)\n\nexport const CProgressStacked = forwardRef<HTMLDivElement, CProgressStackedProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('progress-stacked', className)} ref={ref} {...rest}>\n        <CProgressStackedContext.Provider\n          value={{\n            stacked: true,\n          }}\n        >\n          {children}\n        </CProgressStackedContext.Provider>\n      </div>\n    )\n  },\n)\n\nCProgressStacked.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCProgressStacked.displayName = 'CProgressStacked'\n","import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCard, CCardBody } from '../card'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CWidgetStatsAProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * Action node for your component.\n   */\n  action?: ReactNode\n  /**\n   * Chart node for your component.\n   */\n  chart?: string | ReactNode\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Title node for your component.\n   */\n  title?: string | ReactNode\n  /**\n   * Value node for your component.\n   */\n  value?: string | number | ReactNode\n}\n\nexport const CWidgetStatsA = forwardRef<HTMLDivElement, CWidgetStatsAProps>(\n  ({ action, chart, className, color, title, value, ...rest }, ref) => {\n    return (\n      <CCard\n        className={classNames({ [`bg-${color}`]: color, 'text-white': color }, className)}\n        {...rest}\n        ref={ref}\n      >\n        <CCardBody className=\"pb-0 d-flex justify-content-between align-items-start\">\n          <div>\n            {value && <div className=\"fs-4 fw-semibold\">{value}</div>}\n            {title && <div>{title}</div>}\n          </div>\n          {action}\n        </CCardBody>\n        {chart}\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsA.propTypes = {\n  action: PropTypes.node,\n  chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  color: colorPropType,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n}\n\nCWidgetStatsA.displayName = 'CWidgetStatsA'\n","import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCard, CCardBody, CCardHeader } from '../card'\nimport { CCol } from '../grid/CCol'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\ntype Value = {\n  title?: string | ReactNode\n  value?: number | string | ReactNode\n}\n\nexport interface CWidgetStatsDProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Chart node for your component.\n   */\n  chart?: string | ReactNode\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Icon node for your component.\n   */\n  icon?: string | ReactNode\n  /**\n   * Values and titles for your component.\n   */\n  values?: Value[]\n}\n\nexport const CWidgetStatsD = forwardRef<HTMLDivElement, CWidgetStatsDProps>(\n  ({ className, chart, color, icon, values, ...rest }, ref) => {\n    return (\n      <CCard className={className} {...rest} ref={ref}>\n        <CCardHeader\n          className={classNames(\n            'position-relative d-flex justify-content-center align-items-center',\n            {\n              [`bg-${color}`]: color,\n            },\n          )}\n        >\n          {icon}\n          {chart}\n        </CCardHeader>\n        <CCardBody className=\"row text-center\">\n          {values &&\n            values.map((value: Value, index: number) => {\n              return (\n                <React.Fragment key={index}>\n                  {index % 2 !== 0 && <div className=\"vr\"></div>}\n                  <CCol>\n                    <div className=\"fs-5 fw-semibold\">{value.value}</div>\n                    <div className=\"text-uppercase text-body-secondary small\">{value.title}</div>\n                  </CCol>\n                </React.Fragment>\n              )\n            })}\n        </CCardBody>\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsD.propTypes = {\n  chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  className: PropTypes.string,\n  color: colorPropType,\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  values: PropTypes.arrayOf(PropTypes.any),\n}\n\nCWidgetStatsD.displayName = 'CWidgetStatsD'\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (__COREUI_VERSION__): getStyle.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst getStyle = (property: string, element?: Element) => {\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  if (typeof document === 'undefined') {\n    return\n  }\n\n  const _element = element ?? document.body\n\n  return window.getComputedStyle(_element, null).getPropertyValue(property).replace(/^\\s/, '')\n}\n\nexport default getStyle\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"names":["MainChart","chartRef","useRef","useEffect","document","documentElement","addEventListener","current","setTimeout","options","scales","x","grid","borderColor","getStyle","color","ticks","y","update","random","Math","round","_jsx","_Fragment","children","CChartLine","ref","style","height","marginTop","data","labels","datasets","label","backgroundColor","concat","pointHoverBackgroundColor","borderWidth","fill","borderDash","maintainAspectRatio","plugins","legend","display","drawOnChartArea","beginAtZero","border","max","maxTicksLimit","stepSize","ceil","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","Dashboard","cilUser","cilUserFemale","cibGoogle","cibFacebook","cibTwitter","cibLinkedin","cifUs","cibCcMastercard","cifBr","cibCcVisa","cifIn","cibCcStripe","cifFr","cibCcPaypal","cifEs","cibCcApplePay","cifPl","cibCcAmex","_jsxs","WidgetsDropdown","className","CCard","CCardBody","CRow","CCol","sm","id","CButton","CIcon","icon","cilCloudDownload","CButtonGroup","map","value","active","CCardFooter","xs","cols","gutter","lg","xl","title","percent","item","index","items","classNames","length","CProgress","thin","props","chartOptions","xxl","CWidgetStatsD","withCharts","chart","CChart","type","values","cilCalendar","widgetChartRef1","widgetChartRef2","pointBackgroundColor","CWidgetStatsA","cilArrowBottom","action","CDropdown","alignment","CDropdownToggle","caret","cilOptions","CDropdownMenu","CDropdownItem","disabled","drawBorder","min","cilArrowTop","CChartBar","barPercentage","drawTicks","forwardRef","_a","size","vertical","rest","__rest","React","__assign","_b","propTypes","PropTypes","displayName","progressBarClassName","white","stacked","useContext","CProgressStackedContext","undefined","role","width","toArray","some","child","CProgressBar","animated","_c","variant","colorPropType","createContext","CProgressStacked","Provider","CCardHeader","key","property","element","window","_element","body","getComputedStyle","getPropertyValue","replace","hasOwn","hasOwnProperty","classes","i","arguments","arg","appendClass","parseValue","Array","isArray","apply","toString","Object","prototype","includes","call","newClass","module","exports","default"],"sourceRoot":""}
{"version":3,"file":"static/js/7545.289dc6de.chunk.js","mappings":"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","sources":["views/notifications/alerts/Alerts.js","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/modal/CModalTitle.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  CButton,\r\n  CModal,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CForm,\r\n  CRow,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CInputGroup,\r\n  CFormSelect,\r\n  CFormCheck,\r\n  CFormFeedback,\r\n} from '@coreui/react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faLocationDot } from '@fortawesome/free-solid-svg-icons';\r\nimport CIcon from '@coreui/icons-react';\r\n\r\nconst Settings = () => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [branches, setBranches] = useState([]);\r\n  const [subBranches, setSubBranches] = useState([]);\r\n  const [selectedBranch, setSelectedBranch] = useState('');\r\n  const [autocomplete, setAutocomplete] = useState(null);\r\n  const [address, setAddress] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchBranches = async () => {\r\n      const url = 'https://api.ebarimt.mn/api/info/check/getBranchInfo';\r\n      const options = {\r\n        method: 'GET',\r\n        headers: { Accept: 'application/json' }\r\n      };\r\n\r\n      try {\r\n        const response = await fetch(url, options);\r\n        const data = await response.json();\r\n        console.log('API Data:', data);\r\n\r\n        const dataArray = Array.isArray(data) ? data : data.data || [];\r\n\r\n        if (Array.isArray(dataArray)) {\r\n          const groupedBranches = dataArray.reduce((acc, curr) => {\r\n            const { branchCode, branchName, subBranchCode, subBranchName } = curr;\r\n            if (!acc[branchCode]) {\r\n              acc[branchCode] = { branchCode, branchName, subBranches: [] };\r\n            }\r\n            acc[branchCode].subBranches.push({ subBranchCode, subBranchName });\r\n            return acc;\r\n          }, {});\r\n\r\n          setBranches(Object.values(groupedBranches));\r\n        } else {\r\n          console.error('Unexpected data format:', dataArray);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching branch data:', error);\r\n      }\r\n    };\r\n\r\n    fetchBranches();\r\n\r\n    const script = document.createElement('script');\r\n    script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places`;\r\n    script.async = true;\r\n    script.onload = () => {\r\n      if (window.google) {\r\n        const autocomplete = new window.google.maps.places.Autocomplete(\r\n          document.getElementById('addressInput'),\r\n          { types: ['address'] }\r\n        );\r\n        setAutocomplete(autocomplete);\r\n\r\n        autocomplete.addListener('place_changed', () => {\r\n          const place = autocomplete.getPlace();\r\n          setAddress(place.formatted_address || '');\r\n        });\r\n      }\r\n    };\r\n    document.head.appendChild(script);\r\n\r\n    return () => {\r\n      document.head.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  const handleBranchChange = (event) => {\r\n    const branchId = event.target.value;\r\n    setSelectedBranch(branchId);\r\n    const selectedBranchData = branches.find(branch => branch.branchCode === branchId);\r\n    setSubBranches(selectedBranchData ? selectedBranchData.subBranches : []);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log('Form submitted with address:', address);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <nav className=\"sidebar\">\r\n        <h2>Тохиргоо</h2>\r\n        <h3>Салбарууд</h3>\r\n        <ul>\r\n          <li onClick={() => setVisible(true)}>Салбар</li>\r\n          <li>Пос төхөөрөмж</li>\r\n          <li>Захиалга авах байршил</li>\r\n          <li>Реклам</li>\r\n        </ul>\r\n      </nav>\r\n      <main className=\"content\">\r\n        <CModal\r\n          visible={visible}\r\n          onClose={() => setVisible(false)}\r\n          aria-labelledby=\"LiveDemoExampleLabel\"\r\n        >\r\n          <CModalHeader>\r\n            <CModalTitle id=\"LiveDemoExampleLabel\">Салбар бүртгүүлэх</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody>\r\n            <CForm className=\"row g-3\" onSubmit={handleSubmit}>\r\n              <CRow md={4}>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"OrganizationName\"\r\n                  label=\"Салбарын нэр\"\r\n                  defaultValue=\"Салбарын нэр бусад салбараас ялгаатай байх ёстой\"\r\n                  required\r\n                />\r\n              </CRow>\r\n              <CRow md={4}>\r\n                <CFormSelect\r\n                  id=\"branchName\"\r\n                  label=\"Сум дүүрэг\"\r\n                  value={selectedBranch}\r\n                  onChange={handleBranchChange}\r\n                  required\r\n                >\r\n                  <option value=\"\" disabled>Сонгоно уу...</option>\r\n                  {branches.map((branch) => (\r\n                    <option key={branch.branchCode} value={branch.branchCode}>\r\n                      {branch.branchName}\r\n                    </option>\r\n                  ))}\r\n                </CFormSelect>\r\n              </CRow>\r\n              <CRow md={4}>\r\n                <CFormSelect\r\n                  id=\"subbranchName\"\r\n                  label=\"Хороо\"\r\n                  required\r\n                >\r\n                  <option value=\"\" disabled>Сонгоно уу...</option>\r\n                  {subBranches.map((subBranch) => (\r\n                    <option key={subBranch.subBranchCode} value={subBranch.subBranchCode}>\r\n                      {subBranch.subBranchName}\r\n                    </option>\r\n                  ))}\r\n                </CFormSelect>\r\n              </CRow>\r\n              <CRow md={4}>\r\n                <CFormLabel htmlFor=\"addressInput\">Байршил</CFormLabel>\r\n                <CInputGroup className=\"has-validation\">\r\n                  <CInputGroup.Prepend>\r\n                    <CInputGroup.Text>\r\n                      <CIcon></CIcon>\r\n                    </CInputGroup.Text>\r\n                  </CInputGroup.Prepend>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"addressInput\"\r\n                    value={address}\r\n                    aria-describedby=\"inputGroupPrepend03\"\r\n                    onChange={(e) => setAddress(e.target.value)}\r\n                    required\r\n                  />\r\n                </CInputGroup>\r\n              </CRow>\r\n              <CRow md={6}>\r\n                <CFormLabel htmlFor=\"validationServer03\">Салбар байршил</CFormLabel>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"validationServer03\"\r\n                  value={address}\r\n                  onChange={(e) => setAddress(e.target.value)}\r\n                  required\r\n                />\r\n              </CRow>\r\n              <CRow md={3}>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"validationServer05\"\r\n                  label=\"Утасны дугаар\"\r\n                  required\r\n                />\r\n              </CRow>\r\n              <CRow xs={12}>\r\n                <CFormCheck\r\n                  type=\"checkbox\"\r\n                  id=\"invalidCheck\"\r\n                  label=\"Agree to terms and conditions\"\r\n                  required\r\n                />\r\n                <CFormFeedback invalid>\r\n                  You must agree before submitting.\r\n                </CFormFeedback>\r\n              </CRow>\r\n              <CRow xs={12}>\r\n                <CButton color=\"primary\" type=\"submit\">\r\n                  Submit form\r\n                </CButton>\r\n              </CRow>\r\n            </CForm>\r\n          </CModalBody>\r\n          <CModalFooter>\r\n            <CButton color=\"secondary\" onClick={() => setVisible(false)}>\r\n              Close\r\n            </CButton>\r\n            <CButton color=\"primary\" type=\"submit\">\r\n              Save changes\r\n            </CButton>\r\n          </CModalFooter>\r\n        </CModal>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CModalTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n}\n\nexport const CModalTitle: PolymorphicRefForwardingComponent<'h5', CModalTitleProps> = forwardRef<\n  HTMLHeadElement,\n  CModalTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('modal-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCModalTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalTitle.displayName = 'CModalTitle'\n"],"names":["Settings","visible","setVisible","useState","branches","setBranches","subBranches","setSubBranches","selectedBranch","setSelectedBranch","autocomplete","setAutocomplete","address","setAddress","useEffect","async","options","method","headers","Accept","response","fetch","data","json","console","log","dataArray","Array","isArray","groupedBranches","reduce","acc","curr","branchCode","branchName","subBranchCode","subBranchName","push","Object","values","error","fetchBranches","script","document","createElement","src","onload","window","google","maps","places","Autocomplete","getElementById","types","addListener","place","getPlace","formatted_address","head","appendChild","removeChild","_jsxs","className","children","_jsx","onClick","CModal","onClose","CModalHeader","CModalTitle","id","CModalBody","CForm","onSubmit","event","preventDefault","CRow","md","CFormInput","type","label","defaultValue","required","CFormSelect","value","onChange","branchId","target","selectedBranchData","find","branch","disabled","map","subBranch","CFormLabel","htmlFor","CInputGroup","Prepend","Text","CIcon","e","xs","CFormCheck","CFormFeedback","invalid","CButton","color","CModalFooter","forwardRef","_a","ref","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inline","reverse","_b","valid","rest","__rest","inputRef","useRef","forkedRef","useForkedRef","current","FormControl","React","__assign","classNames","FormValidation","CFormControlValidation","describedby","FormLabel","customClassName","variant","concat","size","shape","propTypes","PropTypes","displayName","floatingClassName","htmlSize","text","CFormControlWrapper","option","index","undefined","key","as","Component"],"sourceRoot":""}
{"version":3,"file":"static/js/9951.4a3d25bf.chunk.js","mappings":"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","sources":["../node_modules/react-leaflet/lib/hooks.js","views/settings/addBranch.js","views/settings/editBranch.js","views/settings/branch.js","../node_modules/@coreui/icons/src/free/cil-location-pin.ts","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx","../node_modules/@coreui/react/src/components/image/CImage.tsx","../node_modules/@coreui/react/src/components/modal/CModalTitle.tsx"],"sourcesContent":["import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n    return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n    const map = useMap();\n    useEffect(function addMapEventHandler() {\n        // @ts-ignore event type\n        map.on(type, handler);\n        return function removeMapEventHandler() {\n            // @ts-ignore event type\n            map.off(type, handler);\n        };\n    }, [\n        map,\n        type,\n        handler\n    ]);\n    return map;\n}\nexport function useMapEvents(handlers) {\n    const map = useMap();\n    useEffect(function addMapEventHandlers() {\n        map.on(handlers);\n        return function removeMapEventHandlers() {\n            map.off(handlers);\n        };\n    }, [\n        map,\n        handlers\n    ]);\n    return map;\n}\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CForm,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormSelect,\r\n  CRow,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CInputGroup,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { cilAirplay, cilLocationPin } from \"@coreui/icons\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n  useMapEvents,\r\n} from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\nimport markerIconPng from \"leaflet/dist/images/marker-icon.png\";\r\nimport markerShadowPng from \"leaflet/dist/images/marker-shadow.png\";\r\nimport PropTypes from \"prop-types\";\r\nimport uploadPhoto from \"../settings/photos/upload.png\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Branch from \"./branch\";\r\n\r\n// Define the default icon for markers\r\nconst defaultIcon = L.icon({\r\n  iconUrl: markerIconPng,\r\n  shadowUrl: markerShadowPng,\r\n  iconAnchor: [12, 41], // Adjust as needed\r\n});\r\n\r\n// Geocode the zip code to latitude and longitude\r\nconst geocodeZipCode = async (zipCode) => {\r\n  const url = `https://nominatim.openstreetmap.org/search?postalcode=${zipCode}&format=json&addressdetails=1`;\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    if (data && data.length > 0) {\r\n      const { lat, lon } = data[0];\r\n      return [parseFloat(lat), parseFloat(lon)];\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(\"Error fetching location data:\", error);\r\n    return null;\r\n  }\r\n};\r\nconst LocationMarker = ({\r\n  setPosition,\r\n  setNewBranchLocationLat,\r\n  setNewBranchLocationLng,\r\n}) => {\r\n  const [markerPosition, setMarkerPosition] = useState(null);\r\n\r\n  useMapEvents({\r\n    click(e) {\r\n      const { lat, lng } = e.latlng;\r\n      setMarkerPosition([lat, lng]);\r\n      setPosition([lat, lng]);\r\n      setNewBranchLocationLat(lat);\r\n      setNewBranchLocationLng(lng);\r\n    },\r\n  });\r\n\r\n  return markerPosition ? (\r\n    <Marker position={markerPosition} icon={defaultIcon}>\r\n      <Popup>You selected this location</Popup>\r\n    </Marker>\r\n  ) : null;\r\n};\r\n// Add PropTypes validation\r\nLocationMarker.propTypes = {\r\n  setPosition: PropTypes.func.isRequired,\r\n  setNewBranchLocationLat: PropTypes.func.isRequired,\r\n  setNewBranchLocationLng: PropTypes.func.isRequired,\r\n};\r\n\r\n// AddBranch component\r\n// eslint-disable-next-line react/prop-types\r\nconst AddBranch = ({ visible, setVisible }) => {\r\n  const [branches, setBranches] = useState([]);\r\n  const [subBranches, setSubBranches] = useState([]);\r\n  const [selectedBranch, setSelectedBranch] = useState(\"\");\r\n  const [selectedSubBranch, setSelectedSubBranch] = useState(\"\");\r\n  const [newBranchName, setNewBranchName] = useState(\"\");\r\n  const [newBranchLocationLat, setNewBranchLocationLat] = useState(\"\");\r\n  const [newBranchLocationLng, setNewBranchLocationLng] = useState(\"\");\r\n  const [newBranchContact, setNewBranchContact] = useState(\"\");\r\n  const [newBranchAddress, setNewBranchAddress] = useState(\"\");\r\n  const [newBranchType, setNewBranchType] = useState(\"\");\r\n  const [branchPosition, setBranchPosition] = useState([51.505, -0.09]); // Default position\r\n  const [subBranchPosition, setSubBranchPosition] = useState([51.505, -0.09]); // Default position\r\n  const [showMapModal, setShowMapModal] = useState(false);\r\n  const [zipCode, setZipCode] = useState(\"\");\r\n  const [photoPreview, setPhotoPreview] = useState(\"\");\r\n  const [newLogo,setNewLogo]=useState(\"\");\r\n  const navigate = useNavigate(); \r\n\r\n  const userId = localStorage.getItem(\"userId\");\r\n  // Fetch branch data from API\r\n  useEffect(() => {\r\n    const fetchBranches = async () => {\r\n      const url = \"https://api.ebarimt.mn/api/info/check/getBranchInfo\";\r\n      const options = {\r\n        method: \"GET\",\r\n        headers: { Accept: \"application/json\" },\r\n      };\r\n\r\n      try {\r\n        const response = await fetch(url, options);\r\n        const data = await response.json();\r\n        const dataArray = Array.isArray(data) ? data : data.data || [];\r\n\r\n        if (Array.isArray(dataArray)) {\r\n          const groupedBranches = dataArray.reduce((acc, curr) => {\r\n            const {\r\n              branchCode,\r\n              branchName,\r\n              subBranchCode,\r\n              subBranchName,\r\n              latitude,\r\n              longitude,\r\n              zipCode,\r\n            } = curr;\r\n            if (!acc[branchCode]) {\r\n              acc[branchCode] = {\r\n                branchCode,\r\n                branchName,\r\n                location: { latitude, longitude },\r\n                zipCode,\r\n                subBranches: [],\r\n              };\r\n            }\r\n            acc[branchCode].subBranches.push({\r\n              subBranchCode,\r\n              subBranchName,\r\n              location: { latitude, longitude },\r\n              zipCode,\r\n            });\r\n            return acc;\r\n          }, {});\r\n          setBranches(Object.values(groupedBranches));\r\n        } else {\r\n          console.error(\"Unexpected data format:\", dataArray);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching branch data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchBranches();\r\n  }, []);\r\n\r\n  // Handle branch selection\r\n  const handleBranchChange = (event) => {\r\n    const branchId = event.target.value;\r\n    setSelectedBranch(branchId);\r\n    const selectedBranchData = branches.find(\r\n      (branch) => branch.branchCode === branchId,\r\n    );\r\n    setSubBranches(selectedBranchData ? selectedBranchData.subBranches : []);\r\n  };\r\n\r\n  // Handle sub-branch selection\r\n  const handleSubBranchChange = (e) => {\r\n    const subBranchId = e.target.value;\r\n    setSelectedSubBranch(subBranchId);\r\n  };\r\n  const handleAddBranch = async () => {\r\n    if (\r\n      !newBranchName ||\r\n      !newBranchLocationLat ||\r\n      !newBranchContact ||\r\n      !newBranchType\r\n    ) {\r\n      alert(\"Please fill in all required fields.\");\r\n      return;\r\n    }\r\n    const branchData = {\r\n      branchName: newBranchName,\r\n      businessTypeId: newBranchType,\r\n      branchCode: selectedBranch,\r\n      subBranchCode: selectedSubBranch,\r\n      locationLat: String(newBranchLocationLat),\r\n      locationLng: String(newBranchLocationLng),\r\n      phone: newBranchContact,\r\n      address: newBranchAddress,\r\n      logoSmall: newLogo,\r\n      createUserId: userId,\r\n      newBranch: true,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        \"https://api.majorsoft.mn/api/branchService\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify(branchData),\r\n        },\r\n      );\r\n\r\n      if (!response.ok) {\r\n        const errorDetails = await response.text(); // Get details from the response\r\n        console.error(\"Error creating branch service:\", errorDetails);\r\n        alert(`Алдаа: ${errorDetails}`);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"Branch Service Created:\", data);\r\n\r\n      // Show success alert message\r\n      alert(\"Салбар амжилттай үүслээ!\"); // \"Branch created successfully!\"\r\n\r\n      // Navigate to the branch page (you can adjust the route as necessary)\r\n      navigate(\"./branch\"); // Change this to the actual path of your branches page\r\n    } catch (error) {\r\n      console.error(\"Error creating branch service:\", error);\r\n    }\r\n  };\r\n  const handleIconClick = () => {\r\n    setShowMapModal(true);\r\n  };\r\n\r\n  const handleModalClose = () => {\r\n    setShowMapModal(false);\r\n  };\r\n  const handlePhotoUpload = (file) => {\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setPhotoPreview(reader.result); // Set the image preview URL\r\n      };\r\n      reader.readAsDataURL(file); // Read the file as a data URL\r\n    }\r\n  };\r\n\r\n  if (!visible) return null;\r\n\r\n  // Define positions to display multiple markers\r\n  const positions = [branchPosition, subBranchPosition].filter(\r\n    (pos) => pos[0] !== 51.505 && pos[1] !== -0.09,\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <CCard className=\"w-60\">\r\n        <CCardHeader>\r\n          <h4>\r\n            {/* If you have editing functionality, toggle title here */}Салбар\r\n            нэмэх\r\n          </h4>\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CForm className=\"row g-3\">\r\n            <CRow>\r\n              <CCol md={6}>\r\n                <CRow className=\"mb-3\">\r\n                  <CFormLabel htmlFor=\"branchName\">Салбарын нэр</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"branchName\"\r\n                    value={newBranchName}\r\n                    onChange={(e) => setNewBranchName(e.target.value)}\r\n                  />\r\n                </CRow>\r\n                <CRow md={4}>\r\n                  <CFormSelect\r\n                    id=\"branchType\"\r\n                    label=\"Салбарын төрөл\"\r\n                    value={newBranchType}\r\n                    onChange={(e) => setNewBranchType(e.target.value)}\r\n                  >\r\n                    <option value=\"\" disabled>\r\n                      Сонгох\r\n                    </option>\r\n                    <option value=\"0\">Дэлгүүр</option>\r\n                    <option value=\"1\">Ресторан</option>\r\n                    <option value=\"2\">Түргэн хоол</option>\r\n                    <option value=\"3\">Салон</option>\r\n                    <option value=\"4\">Эмийн сан</option>\r\n                    <option value=\"5\">Зочид Буудал</option>\r\n                  </CFormSelect>\r\n                </CRow>\r\n              </CCol>\r\n              <CCol md={6}>\r\n    <CRow className=\"d-flex justify-content-center align-items-center\">\r\n      <CFormLabel htmlFor=\"branchPhoto\"></CFormLabel>\r\n      <div\r\n        className=\"d-flex justify-content-center align-items-center\"\r\n        style={{ height: \"100%\" }} // Ensure the container takes up available height\r\n      >\r\n        {/* Display the selected or default image */}\r\n        <img\r\n          src={photoPreview || uploadPhoto} // Use the preview or default image\r\n          alt=\"Branch preview\"\r\n          className=\"rounded\"\r\n          style={{\r\n            width: \"150px\",\r\n            height: \"150px\",\r\n            objectFit: \"cover\",\r\n            cursor: \"pointer\",\r\n          }}\r\n          onClick={() => document.getElementById(\"branchPhoto\").click()} // Trigger file input on click\r\n        />\r\n      </div>\r\n      {/* Hidden file input */}\r\n      <CFormInput\r\n        type=\"file\"\r\n        id=\"branchPhoto\"\r\n        style={{ display: \"none\" }} // Hide the input\r\n        onChange={(e) => handlePhotoUpload(e.target.files[0])} // Handle file upload\r\n      />\r\n      {/* Button to upload a new photo */}\r\n      <CButton\r\n        color=\"primary\" variant=\"ghost\"\r\n        onClick={() => document.getElementById(\"branchPhoto\").click()}\r\n        className=\"mt-2\"\r\n      >\r\n        Зураг оруулах\r\n      </CButton>\r\n    </CRow>\r\n  </CCol>\r\n\r\n            </CRow>\r\n\r\n            <CRow md={4}>\r\n              <CFormSelect\r\n                id=\"branchSelect\"\r\n                label=\"Аймаг/Хот\"\r\n                value={selectedBranch}\r\n                onChange={handleBranchChange}\r\n              >\r\n                <option value=\"\" disabled>\r\n                  Салбарын байршил сонгох\r\n                </option>\r\n                {branches.map((branch) => (\r\n                  <option key={branch.branchCode} value={branch.branchCode}>\r\n                    {branch.branchName}\r\n                  </option>\r\n                ))}\r\n              </CFormSelect>\r\n            </CRow>\r\n            <CRow md={4}>\r\n              <CFormSelect\r\n                id=\"subBranchSelect\"\r\n                label=\"Дүүрэг/Сум\"\r\n                value={selectedSubBranch}\r\n                onChange={handleSubBranchChange}\r\n              >\r\n                <option value=\"\" disabled>\r\n                  Салбарын байршил сонгох\r\n                </option>\r\n                {subBranches.map((subBranch) => (\r\n                  <option\r\n                    key={subBranch.subBranchCode}\r\n                    value={subBranch.subBranchCode}\r\n                  >\r\n                    {subBranch.subBranchName}\r\n                  </option>\r\n                ))}\r\n              </CFormSelect>\r\n            </CRow>\r\n            <CRow md={4}>\r\n              <CFormLabel htmlFor=\"branchAddress\">Салбарын хаяг</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"branchAddress\"\r\n                value={newBranchAddress}\r\n                onChange={(e) => setNewBranchAddress(e.target.value)}\r\n              />\r\n            </CRow>\r\n            <CRow md={4}>\r\n              <CFormLabel htmlFor=\"branchLocation\">Салбарын байршил</CFormLabel>\r\n              <CInputGroup>\r\n                <CFormInput\r\n                  type=\"text\"\r\n                  id=\"branchLocation\"\r\n                  value={`${newBranchLocationLat} ${newBranchLocationLng}`}\r\n                />\r\n                <span className=\"input-group-text\">\r\n                  <CIcon icon={cilLocationPin} onClick={handleIconClick} />\r\n                </span>\r\n              </CInputGroup>\r\n            </CRow>\r\n            <CRow md={4}>\r\n              <CFormLabel htmlFor=\"branchPhoneNumber\">Утасны дугаар</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"branchPhoneNumber\"\r\n                value={newBranchContact}\r\n                onChange={(e) => setNewBranchContact(e.target.value)}\r\n              />\r\n            </CRow>\r\n            <div className=\"d-grid gap-2\">\r\n              <CButton color=\"primary\" type=\"button\" onClick={handleAddBranch}>\r\n                Хадгалах\r\n              </CButton>\r\n              <CButton color=\"secondary\" onClick={() => setVisible(false)}>\r\n                Хаах\r\n              </CButton>\r\n            </div>\r\n          </CForm>\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      {/* Map Modal */}\r\n      <CModal size=\"lg\" visible={showMapModal} onClose={handleModalClose}>\r\n        <CModalHeader onClose={handleModalClose}>\r\n          <CModalTitle>\r\n            <CIcon icon={cilLocationPin}></CIcon> Байршил оруулах\r\n          </CModalTitle>\r\n        </CModalHeader>\r\n        <CModalBody>\r\n          <MapContainer\r\n            center={[47.92123, 106.918556]}\r\n            zoom={13}\r\n            style={{ height: \"400px\", width: \"100%\" }}\r\n          >\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {/* Render existing markers */}\r\n            {positions.map((position, idx) => (\r\n              <Marker key={idx} position={position} icon={defaultIcon}>\r\n                <Popup>Branch Location {idx + 1}</Popup>\r\n              </Marker>\r\n            ))}\r\n            {/* Allow user to add a new marker */}\r\n            <LocationMarker\r\n              setPosition={setBranchPosition}\r\n              setNewBranchLocationLat={setNewBranchLocationLat}\r\n              setNewBranchLocationLng={setNewBranchLocationLng}\r\n            />\r\n          </MapContainer>\r\n          <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\r\n            <CButton color=\"primary\" onClick={handleModalClose}>\r\n              Болих\r\n            </CButton>\r\n            <CButton color=\"outline-primary\" onClick={handleModalClose}>\r\n              Хадгалах\r\n            </CButton>\r\n          </div>\r\n        </CModalBody>\r\n      </CModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddBranch;\r\n","/* eslint-disable react/prop-types */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardHeader,\r\n    CCardBody,\r\n    CFormLabel,\r\n    CFormInput,\r\n} from '@coreui/react';\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst EditBranch = ({ branch, onClose }) => {\r\n    const [branchData, setBranchData] = useState({\r\n        branchId: '',\r\n        branchName: '',\r\n        businessTypeId: '',\r\n        logoSmall: '',\r\n        address: '',\r\n        phone: '',\r\n        branchCode: '',\r\n        locationLat: '',\r\n        locationlng: '',\r\n        subBranchCode: '',\r\n    });\r\n\r\n    // Load the branch data into state when the component is mounted or branch prop changes\r\n    useEffect(() => {\r\n        if (branch) {\r\n            setBranchData({\r\n                branchId: branch.branchId,\r\n                branchName: branch.branchName,\r\n                businessTypeId: branch.businessTypeId,\r\n                logoSmall: branch.logoSmall,\r\n                address: branch.address,\r\n                phone: branch.phone,\r\n                branchCode: branch.branchCode,\r\n                locationLat: branch.locationLat,\r\n                locationlng: branch.locationlng,\r\n                subBranchCode: branch.subBranchCode,\r\n            });\r\n        }\r\n    }, [branch]);\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setBranchData((prevData) => ({\r\n            ...prevData,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        const token = localStorage.getItem('token');\r\n        const merchantId = localStorage.getItem('merchantId');\r\n\r\n        const requestOptions = {\r\n            method: 'PUT', // Use PUT to update the branch\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                ...branchData,\r\n                merchantId, // Include merchantId if necessary\r\n            }),\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`https://api.majorsoft.mn/api/branchService/${branchData.branchId}`, requestOptions);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const result = await response.json();\r\n            console.log(\"Update Result:\", result);\r\n            onClose(); // Call the onClose function to close the edit form\r\n        } catch (error) {\r\n            console.error(\"Error updating branch data:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <CCard>\r\n            <CCardHeader>Edit Branch</CCardHeader>\r\n            <CCardBody>\r\n                <CFormLabel>Branch Name</CFormLabel>\r\n                <CFormInput\r\n                    type=\"text\"\r\n                    name=\"branchName\"\r\n                    value={branchData.branchName}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <CFormLabel>Business Type ID</CFormLabel>\r\n                <CFormInput\r\n                    type=\"text\"\r\n                    name=\"businessTypeId\"\r\n                    value={branchData.businessTypeId}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <CFormLabel>Logo Small</CFormLabel>\r\n                <CFormInput\r\n                    type=\"text\"\r\n                    name=\"logoSmall\"\r\n                    value={branchData.logoSmall}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <CFormLabel>Address</CFormLabel>\r\n                <CFormInput\r\n                    type=\"text\"\r\n                    name=\"address\"\r\n                    value={branchData.address}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <CFormLabel>Phone</CFormLabel>\r\n                <CFormInput\r\n                    type=\"text\"\r\n                    name=\"phone\"\r\n                    value={branchData.phone}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <CFormLabel>Branch Code</CFormLabel>\r\n                <CFormInput\r\n                    type=\"text\"\r\n                    name=\"branchCode\"\r\n                    value={branchData.branchCode}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <CFormLabel>Location Latitude</CFormLabel>\r\n                <CFormInput\r\n                    type=\"text\"\r\n                    name=\"locationLat\"\r\n                    value={branchData.locationLat}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <CFormLabel>Location Longitude</CFormLabel>\r\n                <CFormInput\r\n                    type=\"text\"\r\n                    name=\"locationlng\"\r\n                    value={branchData.locationlng}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <CFormLabel>Sub Branch Code</CFormLabel>\r\n                <CFormInput\r\n                    type=\"text\"\r\n                    name=\"subBranchCode\"\r\n                    value={branchData.subBranchCode}\r\n                    onChange={handleInputChange}\r\n                />\r\n                <div className=\"d-flex justify-content-between mt-3\">\r\n                    <CButton color=\"secondary\" onClick={onClose} type=\"button\">\r\n                        Cancel\r\n                    </CButton>\r\n                    <CButton color=\"primary\" onClick={handleSubmit} type=\"button\">\r\n                        Save Changes\r\n                    </CButton>\r\n                </div>\r\n            </CCardBody>\r\n        </CCard>\r\n    );\r\n};\r\n\r\nexport default EditBranch;\r\n","import { useEffect, useState } from 'react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CFormLabel,\r\n    CImage,\r\n    CTable,\r\n    CTableBody,\r\n    CTableHeaderCell,\r\n    CTableRow,\r\n    CTableDataCell,\r\n    CTableHead,\r\n} from '@coreui/react';\r\nimport branchImage from '../settings/photos/subbranch.png'; \r\nimport AddBranch from './addBranch'; \r\nimport EditBranch from './editBranch';\r\n\r\nconst Branch = () => {\r\n    const [showAddBranch, setShowAddBranch] = useState(false);\r\n    const [showEditBranch, setShowEditBranch] = useState(false);\r\n    const [branches, setBranches] = useState([]);\r\n    const [selectedBranch, setSelectedBranch] = useState(null);\r\n\r\n    const handleToggleAddBranch = () => {\r\n        setShowAddBranch(prevState => !prevState);\r\n    };\r\n\r\n    const handleEditBranch = (branch) => {\r\n        setSelectedBranch(branch);\r\n        setShowEditBranch(true); // Show the edit branch component\r\n    };\r\n\r\n    const handleCloseEditBranch = () => {\r\n        setShowEditBranch(false);\r\n        setSelectedBranch(null); // Reset selected branch\r\n    };\r\n\r\n    const handleDeleteBranch = (branchId) => {\r\n        const token = localStorage.getItem('token'); // Assuming token is stored in local storage\r\n        const userId = localStorage.getItem('userId'); // Assuming userId is stored in local storage\r\n\r\n        const requestOptions = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${token}`, // Add the token to the Authorization header\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            redirect: \"follow\"\r\n        };\r\n\r\n        fetch(`https://api.majorsoft.mn/api/branchService?branchId=${branchId}&userId=${userId}`, requestOptions)\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(() => {\r\n                // Update the branches state to remove the deleted branch\r\n                setBranches(prevBranches => prevBranches.filter(branch => branch.branchId !== branchId));\r\n                console.log(`Branch with id ${branchId} deleted successfully.`);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error deleting branch:\", error);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token'); // Assuming token is stored in local storage\r\n        const merchantId = localStorage.getItem(\"merchantId\");\r\n\r\n        const requestOptions = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${token}`, // Add the token to the Authorization header\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            redirect: \"follow\"\r\n        };\r\n\r\n        fetch(`https://api.majorsoft.mn/api/branchService?merchantId=${merchantId}`, requestOptions)\r\n            .then((response) => {\r\n                console.log('Response status:', response.status); // Log the response status\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((result) => {\r\n                console.log(\"Fetched branch data:\", result);\r\n                setBranches(result.data); // Ensure this is the correct path\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching branch data:\", error);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <main className='mx-2 mt-1'>\r\n           {!showAddBranch && !showEditBranch ? (\r\n                <CCard>\r\n                    <CCardHeader>Салбар</CCardHeader>\r\n                    <CCardBody className='text-center'>\r\n                        {branches.length > 0 ? (\r\n                            <CTable striped bordered hover responsive>\r\n                                <CTableHead>\r\n                                    <CTableRow>\r\n                                        <CTableHeaderCell>Салбарын нэр</CTableHeaderCell>\r\n                                        <CTableHeaderCell>Салбарын төрөл</CTableHeaderCell>\r\n                                        <CTableHeaderCell>Хаяг</CTableHeaderCell>\r\n                                        <CTableHeaderCell>Холбогдох утас</CTableHeaderCell>\r\n                                        <CTableHeaderCell>Салбар</CTableHeaderCell>\r\n                                    </CTableRow>\r\n                                </CTableHead>\r\n                                <CTableBody>\r\n                                    {branches.map((branch) => (\r\n                                        <CTableRow key={branch.branchId || branch.branchName}>\r\n                                            <CTableDataCell>{branch.branchName}</CTableDataCell>\r\n                                            <CTableDataCell>{branch.businessTypeId}</CTableDataCell>\r\n                                            <CTableDataCell>{branch.address}</CTableDataCell>\r\n                                            <CTableDataCell>{branch.phone}</CTableDataCell>\r\n                                            <CTableDataCell> \r\n                                                <CButton color=\"light\" onClick={() => handleEditBranch(branch)}>Засах</CButton>\r\n                                                <CButton color=\"secondary\" onClick={() => handleDeleteBranch(branch.branchId)}>Устгах</CButton>\r\n                                            </CTableDataCell>\r\n                                        </CTableRow>\r\n                                    ))}\r\n                                    <CButton color='primary' className='my-2' onClick={handleToggleAddBranch}>\r\n                                        Салбар нэмэх\r\n                                    </CButton>\r\n                                </CTableBody>\r\n                            </CTable>\r\n                        ) : (\r\n                            <>\r\n                                <CImage\r\n                                    src={branchImage}\r\n                                    rounded\r\n                                    thumbnail\r\n                                    width={200}\r\n                                    height={200}\r\n                                    className=\"mb-2\"\r\n                                    style={{ border: 'none' }}\r\n                                />\r\n                                <div className='d-flex flex-column align-items-center'>\r\n                                    <CFormLabel className='fs-2'>Салбар</CFormLabel>\r\n                                    <CFormLabel>Эндээс та салбараа удирдах боломжтой</CFormLabel>\r\n                                </div>\r\n                                <div className='d-flex flex-column align-items-center'>\r\n                                    <CButton color='primary' className='my-2' onClick={handleToggleAddBranch}>\r\n                                        Салбар нэмэх\r\n                                    </CButton>\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                    </CCardBody>\r\n                </CCard>\r\n            )  : showAddBranch ? (\r\n                <AddBranch visible={showAddBranch} setVisible={setShowAddBranch} />\r\n            ) : (\r\n                <EditBranch visible={showEditBranch} setVisible={handleCloseEditBranch} branch={selectedBranch} />\r\n            )}\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Branch;\r\n","export var cilLocationPin = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M253.924,127.592a64,64,0,1,0,64,64A64.073,64.073,0,0,0,253.924,127.592Zm0,96a32,32,0,1,1,32-32A32.037,32.037,0,0,1,253.924,223.592Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M376.906,68.515A173.922,173.922,0,0,0,108.2,286.426L229.107,472.039a29.619,29.619,0,0,0,49.635,0L399.653,286.426A173.921,173.921,0,0,0,376.906,68.515Zm-4.065,200.444L253.925,451.509,135.008,268.959C98.608,213.08,106.415,138.3,153.571,91.142a141.92,141.92,0,0,1,200.708,0C401.435,138.3,409.241,213.08,372.841,268.959Z' class='ci-primary'/>\"];\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n","import React, { forwardRef, ImgHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CImageProps extends ImgHTMLAttributes<HTMLOrSVGImageElement> {\n  /**\n   * Set the horizontal aligment.\n   */\n  align?: 'start' | 'center' | 'end'\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Make image responsive.\n   */\n  fluid?: boolean\n  /**\n   * Make image rounded.\n   */\n  rounded?: boolean\n  /**\n   * Give an image a rounded 1px border appearance.\n   */\n  thumbnail?: boolean\n}\n\nexport const CImage = forwardRef<HTMLImageElement, CImageProps>(\n  ({ align, className, fluid, rounded, thumbnail, ...rest }, ref) => {\n    return (\n      <img\n        className={\n          classNames(\n            {\n              [`float-${align}`]: align && (align === 'start' || align === 'end'),\n              'd-block mx-auto': align && align === 'center',\n              'img-fluid': fluid,\n              rounded: rounded,\n              'img-thumbnail': thumbnail,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      />\n    )\n  },\n)\n\nCImage.propTypes = {\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n  className: PropTypes.string,\n  fluid: PropTypes.bool,\n  rounded: PropTypes.bool,\n  thumbnail: PropTypes.bool,\n}\n\nCImage.displayName = 'CImage'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CModalTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n}\n\nexport const CModalTitle: PolymorphicRefForwardingComponent<'h5', CModalTitleProps> = forwardRef<\n  HTMLHeadElement,\n  CModalTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('modal-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCModalTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalTitle.displayName = 'CModalTitle'\n"],"names":["useMap","useLeafletContext","map","defaultIcon","L","iconUrl","shadowUrl","markerShadowPng","iconAnchor","LocationMarker","_ref","setPosition","setNewBranchLocationLat","setNewBranchLocationLng","markerPosition","setMarkerPosition","useState","handlers","useEffect","on","off","useMapEvents","click","e","lat","lng","latlng","_jsx","Marker","position","icon","children","Popup","_ref2","visible","setVisible","branches","setBranches","subBranches","setSubBranches","selectedBranch","setSelectedBranch","selectedSubBranch","setSelectedSubBranch","newBranchName","setNewBranchName","newBranchLocationLat","newBranchLocationLng","newBranchContact","setNewBranchContact","newBranchAddress","setNewBranchAddress","newBranchType","setNewBranchType","branchPosition","setBranchPosition","subBranchPosition","setSubBranchPosition","showMapModal","setShowMapModal","zipCode","setZipCode","photoPreview","setPhotoPreview","newLogo","setNewLogo","navigate","useNavigate","userId","localStorage","getItem","async","options","method","headers","Accept","response","fetch","data","json","dataArray","Array","isArray","groupedBranches","reduce","acc","curr","branchCode","branchName","subBranchCode","subBranchName","latitude","longitude","location","push","Object","values","console","error","fetchBranches","handleModalClose","positions","filter","pos","_jsxs","_Fragment","CCard","className","CCardHeader","CCardBody","CForm","CRow","CCol","md","CFormLabel","htmlFor","CFormInput","type","id","value","onChange","target","CFormSelect","label","disabled","style","height","src","uploadPhoto","alt","width","objectFit","cursor","onClick","document","getElementById","display","file","reader","FileReader","onloadend","result","readAsDataURL","handlePhotoUpload","files","CButton","color","variant","event","branchId","selectedBranchData","find","branch","subBranchId","subBranch","CInputGroup","concat","CIcon","cilLocationPin","handleIconClick","alert","branchData","businessTypeId","locationLat","String","locationLng","phone","address","logoSmall","createUserId","newBranch","Authorization","body","JSON","stringify","ok","errorDetails","text","log","CModal","size","onClose","CModalHeader","CModalTitle","CModalBody","MapContainer","center","zoom","TileLayer","url","attribution","idx","setBranchData","locationlng","handleInputChange","name","prevData","token","merchantId","requestOptions","Error","status","Branch","showAddBranch","setShowAddBranch","showEditBranch","setShowEditBranch","handleToggleAddBranch","prevState","redirect","then","catch","AddBranch","EditBranch","handleCloseEditBranch","length","CTable","striped","bordered","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","CTableDataCell","handleEditBranch","prevBranches","handleDeleteBranch","CImage","rounded","thumbnail","border","forwardRef","_a","ref","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","propTypes","PropTypes","colorPropType","displayName","as","Component","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","htmlSize","invalid","tooltipFeedback","valid","CFormControlWrapper","describedby","option","index","undefined","key","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","span","order","offset","col","xs","sm","lg","xl","xxl","cols","gutter","gutterX","gutterY","align","fluid"],"sourceRoot":""}
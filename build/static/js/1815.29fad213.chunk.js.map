{"version":3,"file":"static/js/1815.29fad213.chunk.js","mappings":"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","sources":["views/product/addExtraCharge.js","views/product/extraCharge.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/image/CImage.tsx","../node_modules/@coreui/react/src/components/modal/CModalTitle.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'; // Import PropTypes\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CFormLabel,\r\n    CFormInput,\r\n    CModal,\r\n    CModalBody,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CModalFooter,\r\n} from '@coreui/react';\r\n\r\nconst AddExtraCharge = ({ visible, onClose }) => {\r\n    const [chargeName, setChargeName] = useState('');\r\n    const [chargeAmount, setChargeAmount] = useState('');\r\n\r\n    const handleSave = () => {\r\n        // Implement save logic here\r\n        console.log('Extra Charge Added:', { chargeName, chargeAmount });\r\n        onClose(); // Close the modal after saving\r\n    };\r\n\r\n    return (\r\n        <CModal visible={visible} onClose={onClose}>\r\n            <CModalHeader>\r\n                <CModalTitle>Нэмэлт төлбөр нэмэх</CModalTitle>\r\n            </CModalHeader>\r\n            <CModalBody>\r\n                <CCard>\r\n                   \r\n                    <CCardBody>\r\n                        <div className='mb-3'>\r\n                            <CFormLabel>Төлбөрийн нэр</CFormLabel>\r\n                            <CFormInput\r\n                                type='text'\r\n                                placeholder='Төлбөрийн нэр'\r\n                                value={chargeName}\r\n                                onChange={(e) => setChargeName(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='mb-3'>\r\n                            <CFormLabel>Төлбөрийн дүн</CFormLabel>\r\n                            <CFormInput\r\n                                type='number'\r\n                                placeholder='Төлбөрийн дүн'\r\n                                value={chargeAmount}\r\n                                onChange={(e) => setChargeAmount(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </CCardBody>\r\n                </CCard>\r\n            </CModalBody>\r\n            <CModalFooter>\r\n                <CButton color='secondary' onClick={onClose}>\r\n                    Хаах\r\n                </CButton>\r\n                <CButton color='primary' onClick={handleSave}>\r\n                    Хадгалах\r\n                </CButton>\r\n            </CModalFooter>\r\n        </CModal>\r\n    );\r\n};\r\n\r\n// Define prop types\r\nAddExtraCharge.propTypes = {\r\n    visible: PropTypes.bool.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddExtraCharge;\r\n","import {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CFormLabel,\r\n    CImage,\r\n} from '@coreui/react';\r\nimport { useState } from 'react';\r\nimport AddExtraCharge from './addExtraCharge'; // Import the AddExtraCharge component\r\nimport charge from './photos/charge.png';\r\n\r\nconst ExtraCharge = () => {\r\n    const [importVisible, setImportVisible] = useState(false);\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    const toggleImportModal = () => {\r\n        setImportVisible(!importVisible);\r\n    };\r\n    const handleModal = () => {\r\n        setVisible(!visible);\r\n    };\r\n\r\n    return (\r\n        <main className='mx-2 mt-2'>\r\n            <CCard>\r\n                <CCardHeader>Нэмэлт төлбөр</CCardHeader>\r\n                <CCardBody className='text-center'>\r\n                    <CImage\r\n                        src={charge}\r\n                        rounded\r\n                        thumbnail\r\n                        width={200}\r\n                        height={200}\r\n                        className=\"mb-2\"\r\n                        style={{ border: 'none' }}\r\n                    />\r\n                    <div className='d-flex flex-column align-items-center'>\r\n                        <CFormLabel className='fs-2'>Нэмэлт төлбөр</CFormLabel>\r\n                        <CFormLabel>Бараанд нэмж болох сонголтуудын багцийг үүсгэнэ</CFormLabel>\r\n                    </div>\r\n                    <div className='d-flex flex-column align-items-center'>\r\n                        <CButton color='primary' className='my-2' onClick={handleModal}>\r\n                            Төлбөр нэмэх\r\n                        </CButton>\r\n                    </div>\r\n                </CCardBody>\r\n            </CCard>\r\n            <AddExtraCharge visible={visible} onClose={handleModal} /> {/* Show AddExtraCharge modal */}\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default ExtraCharge;\r\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, ImgHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CImageProps extends ImgHTMLAttributes<HTMLOrSVGImageElement> {\n  /**\n   * Set the horizontal aligment.\n   */\n  align?: 'start' | 'center' | 'end'\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Make image responsive.\n   */\n  fluid?: boolean\n  /**\n   * Make image rounded.\n   */\n  rounded?: boolean\n  /**\n   * Give an image a rounded 1px border appearance.\n   */\n  thumbnail?: boolean\n}\n\nexport const CImage = forwardRef<HTMLImageElement, CImageProps>(\n  ({ align, className, fluid, rounded, thumbnail, ...rest }, ref) => {\n    return (\n      <img\n        className={\n          classNames(\n            {\n              [`float-${align}`]: align && (align === 'start' || align === 'end'),\n              'd-block mx-auto': align && align === 'center',\n              'img-fluid': fluid,\n              rounded: rounded,\n              'img-thumbnail': thumbnail,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      />\n    )\n  },\n)\n\nCImage.propTypes = {\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n  className: PropTypes.string,\n  fluid: PropTypes.bool,\n  rounded: PropTypes.bool,\n  thumbnail: PropTypes.bool,\n}\n\nCImage.displayName = 'CImage'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CModalTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n}\n\nexport const CModalTitle: PolymorphicRefForwardingComponent<'h5', CModalTitleProps> = forwardRef<\n  HTMLHeadElement,\n  CModalTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('modal-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCModalTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalTitle.displayName = 'CModalTitle'\n"],"names":["_ref","visible","onClose","chargeName","setChargeName","useState","chargeAmount","setChargeAmount","_jsxs","CModal","children","_jsx","CModalHeader","CModalTitle","CModalBody","CCard","CCardBody","className","CFormLabel","CFormInput","type","placeholder","value","onChange","e","target","CModalFooter","CButton","color","onClick","handleSave","console","log","ExtraCharge","importVisible","setImportVisible","setVisible","handleModal","CCardHeader","CImage","src","charge","rounded","thumbnail","width","height","style","border","AddExtraCharge","forwardRef","_a","ref","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","as","Component","align","fluid","undefined"],"sourceRoot":""}
{"version":3,"file":"static/js/7575.a0449eb5.chunk.js","mappings":"iNAQA,MAsBA,EAtBqBA,KACjB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GAM3C,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mCAAkCC,UAC7CF,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CAACC,OAAO,KAAKH,UAAU,mBAAmBI,QANhCC,KACtBR,GAAa,EAAK,EAK+DI,UACzEF,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,OAAK,EAAAN,UACbF,EAAAA,EAAAA,KAACS,EAAAA,EAAY,CAAAP,UACTF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kEAMd,C,uGCeDC,GAAkEO,EAAAA,EAAAA,aAI7E,SACEC,EAWAC,G,MAVEV,EAAQS,EAAAT,SACRW,EAAAF,EAAAG,GAAIC,OAAY,IAAAF,EAAA,MAAKA,EACrBZ,EAASU,EAAAV,UACTe,EAAKL,EAAAK,MACLC,EAAWN,EAAAM,YACXC,EAASP,EAAAO,UACTd,EAAMO,EAAAP,OACNe,EAASR,EAAAQ,UACNC,GAAIC,EAAAA,EAAAA,IAAAV,EATT,sFAaA,OACEW,EAAAA,cAACP,GAASQ,EAAAA,EAAAA,IAAA,CACRtB,WAAWuB,EAAAA,EAAAA,GACT,UAAQC,EAAA,GAENA,EAAC,MAAMC,OAAAV,IAAUA,EACjBS,EAAmB,mBAAXrB,EAAuB,gBAAkB,iBAAAsB,OAAiBtB,IAAWA,EAAM,GAErFe,EACAlB,IAEGgB,GAAe,CAAE,oBAAqBA,GACvCG,EAAI,CACRR,IAAKA,IAEJM,EACCI,EAAAA,cAAA,OAAKrB,UAAgC,kBAAdiB,EAAyB,aAAaQ,OAAAR,GAAc,aACxEhB,GAGHoB,EAAAA,cAAGA,EAAAA,SAAA,KAAApB,GAIX,IAGFC,EAAQwB,UAAY,CAClBb,GAAIc,IAAAA,YACJ1B,SAAU0B,IAAAA,KACV3B,UAAW2B,IAAAA,OACXZ,MAAOa,EAAAA,GACPZ,YAAaW,IAAAA,MAAgB,CAAC,OAAQ,UACtCV,UAAWU,IAAAA,UAAoB,CAC7BA,IAAAA,KACAA,IAAAA,MAA6D,CAC3D,KACA,KACA,KACA,KACA,MACA,YAGJxB,OAAQwB,IAAAA,UAAoB,CAC1BA,IAAAA,KACAA,IAAAA,MAAmD,CAAC,KAAM,KAAM,KAAM,KAAM,UAE9ET,UAAWS,IAAAA,MAAgB,CAAC,YAAa,eAAgB,gBAG3DzB,EAAQ2B,YAAc,S,4FCxFTrB,GAA0EC,EAAAA,EAAAA,aAGrF,SAACC,EAAsCC,GAApC,IAAAV,EAAQS,EAAAT,SAAEY,EAAEH,EAAAG,GAAEb,EAASU,EAAAV,UAAKmB,GAA9BC,EAAAA,EAAAA,IAAAV,EAAA,+BACKI,EAAc,OAAFD,QAAA,IAAAA,EAAAA,EAAOM,EAAKW,KAAO,IAAM,OAE3C,OACET,EAAAA,cAACP,GAASQ,EAAAA,EAAAA,IAAA,CAACtB,WAAWuB,EAAAA,EAAAA,GAAW,eAAgBvB,IAAgBmB,EAAI,CAAER,IAAKA,IACzEV,EAGP,IAEAO,EAAakB,UAAY,CACvBb,GAAIc,IAAAA,YACJ1B,SAAU0B,IAAAA,KACV3B,UAAW2B,IAAAA,QAGbnB,EAAaqB,YAAc,c","sources":["views/registration/customer.js","../node_modules/@coreui/react/src/components/navbar/CNavbar.tsx","../node_modules/@coreui/react/src/components/navbar/CNavbarBrand.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    CContainer,\r\n    CNavbar,\r\n    CNavbarBrand,\r\n} from '@coreui/react';\r\n\r\n\r\nconst Interlocutor = () => {\r\n    const [showPopUp, setShowPopUp] = useState(false);\r\n\r\n    const handleNavbarClick = () => {\r\n        setShowPopUp(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app-container d-flex flex-column\">\r\n            <CNavbar expand=\"lg\" className=\"border rounded-3\" onClick={handleNavbarClick}>\r\n                <CContainer fluid>\r\n                    <CNavbarBrand>\r\n                        <h3>Харилцагч</h3>\r\n                    </CNavbarBrand>\r\n                </CContainer>\r\n            </CNavbar>\r\n\r\n        \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Interlocutor;\r\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CNavbarProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets if the color of text should be colored for a light or dark background.\n   */\n  colorScheme?: 'dark' | 'light'\n  /**\n   * Defines optional container wrapping children elements.\n   */\n  container?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'fluid'\n  /**\n   * Defines the responsive breakpoint to determine when content collapses.\n   */\n  expand?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Place component in non-static positions.\n   */\n  placement?: 'fixed-top' | 'fixed-bottom' | 'sticky-top'\n}\n\nexport const CNavbar: PolymorphicRefForwardingComponent<'nav', CNavbarProps> = forwardRef<\n  HTMLDivElement,\n  CNavbarProps\n>(\n  (\n    {\n      children,\n      as: Component = 'nav',\n      className,\n      color,\n      colorScheme,\n      container,\n      expand,\n      placement,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <Component\n        className={classNames(\n          'navbar',\n          {\n            [`bg-${color}`]: color,\n            [typeof expand === 'boolean' ? 'navbar-expand' : `navbar-expand-${expand}`]: expand,\n          },\n          placement,\n          className,\n        )}\n        {...(colorScheme && { 'data-coreui-theme': colorScheme })}\n        {...rest}\n        ref={ref}\n      >\n        {container ? (\n          <div className={typeof container === 'string' ? `container-${container}` : 'container'}>\n            {children}\n          </div>\n        ) : (\n          <>{children}</>\n        )}\n      </Component>\n    )\n  },\n)\n\nCNavbar.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  colorScheme: PropTypes.oneOf(['dark', 'light']),\n  container: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'fluid'>([\n      'sm',\n      'md',\n      'lg',\n      'xl',\n      'xxl',\n      'fluid',\n    ]),\n  ]),\n  expand: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  placement: PropTypes.oneOf(['fixed-top', 'fixed-bottom', 'sticky-top']),\n}\n\nCNavbar.displayName = 'CNavbar'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CNavbarBrandProps extends HTMLAttributes<HTMLAnchorElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   *\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * The href attribute specifies the URL of the page the link goes to.\n   */\n  href?: string\n}\n\nexport const CNavbarBrand: PolymorphicRefForwardingComponent<'a', CNavbarBrandProps> = forwardRef<\n  HTMLAnchorElement | HTMLSpanElement,\n  CNavbarBrandProps\n>(({ children, as, className, ...rest }, ref) => {\n  const Component = as ?? (rest.href ? 'a' : 'span')\n\n  return (\n    <Component className={classNames('navbar-brand', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCNavbarBrand.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCNavbarBrand.displayName = 'CNavbarBrand'\n"],"names":["Interlocutor","showPopUp","setShowPopUp","useState","_jsx","className","children","CNavbar","expand","onClick","handleNavbarClick","CContainer","fluid","CNavbarBrand","forwardRef","_a","ref","_c","as","Component","color","colorScheme","container","placement","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","href"],"sourceRoot":""}
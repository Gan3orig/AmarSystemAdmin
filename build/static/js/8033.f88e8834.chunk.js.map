{"version":3,"file":"static/js/8033.f88e8834.chunk.js","mappings":"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","sources":["views/product/addCategory.js","views/product/categories.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx","../node_modules/@coreui/react/src/components/image/CImage.tsx"],"sourcesContent":["import {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCloseButton,\r\n    CCol,\r\n    CForm,\r\n    CFormInput,\r\n    CFormLabel,\r\n    CFormSelect,\r\n    CImage,\r\n    CModal,\r\n    CRow\r\n} from '@coreui/react';\r\nimport { useState } from 'react';\r\nimport dress from './photos/dress.png';\r\nimport jeans from './photos/jeans.png';\r\nimport meat from './photos/meat.png';\r\nimport milk from './photos/milk.png';\r\nimport socks from './photos/socks.png';\r\nimport drink from './photos/soft-drink.png';\r\nimport tshirt from './photos/tshirt.png';\r\n\r\nconst productOptions = [\r\n    { value: 'other', label: 'Бусад', images: [] },\r\n    { value: 'food', label: 'Хүнс', images: [drink, meat, milk] },\r\n    { value: 'clothing', label: 'Хувцас', images: [jeans, dress, tshirt, socks] },\r\n    { value: 'electronics', label: 'Электрон бараа', images: [] },\r\n    { value: 'household', label: 'Гэр ахуй', images: [] },\r\n    { value: 'beauty', label: 'Гоо сайхан', images: [] },\r\n];\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst AddCategory = ({ visibleCat, handleModalCat }) => {\r\n    const [categoryName, setCategoryName] = useState('');\r\n    const [productCategory, setProductCategory] = useState('');\r\n    const [selectedImage, setSelectedImage] = useState(null);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log({\r\n            categoryName: categoryName,\r\n            productCategory: productCategory,\r\n            selectedImage: selectedImage\r\n        });\r\n\r\n        // Clear form fields after submission\r\n        setCategoryName('');\r\n        setProductCategory('');\r\n        setSelectedImage(null);\r\n        handleModalCat(); // Close the modal after submission\r\n    };\r\n\r\n    const getImages = () => {\r\n        const selectedOption = productOptions.find(option => option.value === productCategory);\r\n        return selectedOption ? selectedOption.images : [];\r\n    };\r\n\r\n    const images = getImages();\r\n\r\n    const handleImageClick = (img) => {\r\n        setSelectedImage(img);\r\n    };\r\n\r\n    return (\r\n        <CModal fullscreen=\"sm \" visible={visibleCat} onClose={handleModalCat } alignment='center'>\r\n            <CCard>\r\n                <CCardHeader>\r\n                    Категори нэмэх\r\n                    <CCloseButton className='position-absolute end-0' onClick={handleModalCat} />\r\n                </CCardHeader>\r\n                <CCardBody>\r\n                    <CForm onSubmit={handleSubmit}>\r\n                        <CRow className='mb-3'>\r\n                            <CCol>\r\n                                <CFormLabel>Категори Нэр</CFormLabel>\r\n                                <CFormInput\r\n                                    type='text'\r\n                                    value={categoryName}\r\n                                    onChange={(e) => setCategoryName(e.target.value)}\r\n                                    placeholder='Категори нэрийг оруулна уу'\r\n                                    required\r\n                                />\r\n                            </CCol>\r\n                        </CRow>\r\n                        <CRow className='mb-3'>\r\n                            <CCol>\r\n                                <CFormLabel>Барааны ангилал</CFormLabel>\r\n                                <CFormSelect\r\n                                    value={productCategory}\r\n                                    onChange={(e) => setProductCategory(e.target.value)}\r\n                                    required\r\n                                >\r\n                                    <option value=\"\">Сонгох</option>\r\n                                    {productOptions.map((option) => (\r\n                                        <option key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </option>\r\n                                    ))}\r\n                                </CFormSelect>\r\n                            </CCol>\r\n                        </CRow>\r\n\r\n                        {images.length > 0 && (\r\n                            <CRow className='mb-3'>\r\n                                <CCol>\r\n                                    {images.map((img, index) => (\r\n                                        <CImage \r\n                                            key={index}\r\n                                            src={img} \r\n                                            alt={`Option ${index}`} \r\n                                            style={{ \r\n                                                width: '60px', \r\n                                                marginRight: '10px',\r\n                                                padding: '10px',\r\n                                                cursor: 'pointer',\r\n                                                border: selectedImage === img ? '2px solid blue' : 'none' \r\n                                            }} \r\n                                            onClick={() => handleImageClick(img)}\r\n                                        />\r\n                                    ))}\r\n                                </CCol>\r\n                            </CRow>\r\n                        )}\r\n\r\n                        <CButton type='submit' color='primary'>\r\n                            Хадгалах\r\n                        </CButton>\r\n                    </CForm>\r\n                </CCardBody>\r\n            </CCard>\r\n        </CModal>\r\n    );\r\n};\r\n\r\nexport default AddCategory;\r\n","import {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CFormLabel,\r\n    CImage,\r\n} from '@coreui/react';\r\nimport { useState } from 'react';\r\nimport AddCategory from './addCategory'; // Import the AddCategory component\r\nimport category from './photos/categories.png';\r\n\r\nconst Category = () => {\r\n    const [addModal, setModal] = useState(false);\r\n\r\n    const handleModalCat = () => {\r\n        setModal(!addModal);\r\n    };\r\n\r\n    return (\r\n        <main className='mx-2 mt-2'>\r\n            <CCard>\r\n                <CCardHeader>Категори</CCardHeader>\r\n                <CCardBody className='text-center'>\r\n                    <CImage\r\n                        src={category}\r\n                        rounded\r\n                        thumbnail\r\n                        width={200}\r\n                        height={200}\r\n                        className=\"mb-2\"\r\n                        style={{ border: 'none' }}\r\n                    />\r\n                    <div className='d-flex flex-column align-items-center'>\r\n                        <CFormLabel className='fs-2'>Категор</CFormLabel>\r\n                        <CFormLabel>Категор бараа ангилахад тусална</CFormLabel>\r\n                    </div>\r\n                    <div className='d-flex flex-column align-items-center'>\r\n                        <CButton color='primary' className='my-2' onClick={handleModalCat}>\r\n                            Категори нэмэх\r\n                        </CButton>\r\n                    </div>\r\n                </CCardBody>\r\n            </CCard>\r\n\r\n            {/* AddCategory modal component */}\r\n            {addModal && <AddCategory visibleCat={addModal} handleModalCat={handleModalCat} />} \r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Category;\r\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n","import React, { forwardRef, ImgHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CImageProps extends ImgHTMLAttributes<HTMLOrSVGImageElement> {\n  /**\n   * Set the horizontal aligment.\n   */\n  align?: 'start' | 'center' | 'end'\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Make image responsive.\n   */\n  fluid?: boolean\n  /**\n   * Make image rounded.\n   */\n  rounded?: boolean\n  /**\n   * Give an image a rounded 1px border appearance.\n   */\n  thumbnail?: boolean\n}\n\nexport const CImage = forwardRef<HTMLImageElement, CImageProps>(\n  ({ align, className, fluid, rounded, thumbnail, ...rest }, ref) => {\n    return (\n      <img\n        className={\n          classNames(\n            {\n              [`float-${align}`]: align && (align === 'start' || align === 'end'),\n              'd-block mx-auto': align && align === 'center',\n              'img-fluid': fluid,\n              rounded: rounded,\n              'img-thumbnail': thumbnail,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      />\n    )\n  },\n)\n\nCImage.propTypes = {\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n  className: PropTypes.string,\n  fluid: PropTypes.bool,\n  rounded: PropTypes.bool,\n  thumbnail: PropTypes.bool,\n}\n\nCImage.displayName = 'CImage'\n"],"names":["productOptions","value","label","images","drink","meat","milk","jeans","dress","tshirt","socks","_ref","visibleCat","handleModalCat","categoryName","setCategoryName","useState","productCategory","setProductCategory","selectedImage","setSelectedImage","getImages","selectedOption","find","option","_jsx","CModal","fullscreen","visible","onClose","alignment","children","_jsxs","CCard","CCardHeader","CCloseButton","className","onClick","CCardBody","CForm","onSubmit","e","preventDefault","console","log","CRow","CCol","CFormLabel","CFormInput","type","onChange","target","placeholder","required","CFormSelect","map","length","img","index","CImage","src","alt","concat","style","width","marginRight","padding","cursor","border","handleImageClick","CButton","color","Category","addModal","setModal","category","rounded","thumbnail","height","AddCategory","forwardRef","_a","ref","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","propTypes","PropTypes","colorPropType","displayName","as","Component","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","htmlSize","id","invalid","options","size","text","tooltipFeedback","valid","CFormControlWrapper","describedby","disabled","undefined","key","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","col","xs","sm","md","lg","xl","xxl","cols","gutter","gutterX","gutterY","align","fluid"],"sourceRoot":""}
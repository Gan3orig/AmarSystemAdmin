{"version":3,"file":"static/js/4721.20d20c26.chunk.js","mappings":"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","sources":["views/pages/login/Login.js","../node_modules/@coreui/react/src/components/card/CCardGroup.tsx"],"sourcesContent":["import { cilArrowThickRight, cilLockLocked, cilUser } from '@coreui/icons';\nimport CIcon from '@coreui/icons-react';\nimport {\n  CAlert,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCardImage,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CSpinner\n} from '@coreui/react';\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { validateToken } from 'src/validateToken'; // Validation\nimport { useTranslation } from 'react-i18next';\n\nconst Login = () => {\n  const { t } = useTranslation();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [alertMessage, setAlertMessage] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate(); // Use navigate for redirection\n\n  // Helper function to check if token is expired\n  const isTokenExpired = () => {\n    const expiresIn = localStorage.getItem('expiresIn');\n    if (!expiresIn) return true; // If there's no expiry date, consider it expired\n    const currentTime = new Date().getTime(); // Current time in milliseconds\n    return currentTime > expiresIn; // Token is expired if current time is greater than expiry time\n  };\n\n  useEffect(() => {\n    const isValid = validateToken(); // Validate the token on mount\n    if (isValid && !isTokenExpired()) {\n      navigate('/dashboard');\n    } else {\n      // If token is invalid or expired, clear localStorage and navigate to login\n      localStorage.clear();\n      navigate('/login');\n    }\n  }, [navigate]);\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n    setAlertMessage(''); // Reset alert message\n    if (!username || !password) {\n      setAlertMessage(t('fillCredentials'));\n      return;\n    }\n\n    setIsLoading(true); // Start loading\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify({\n      username,\n      password,\n    });\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: myHeaders,\n      body: raw,\n    };\n\n    try {\n      const response = await fetch(\"https://api.majorsoft.mn/api/login\", requestOptions);\n      const result = await response.json();\n\n      if (response.ok) {\n        if (result.isOK) {\n          const data = JSON.parse(result.json);\n          //const expiryDate = new Date().getTime() + data.expiresIn * 1000; // Calculate expiry time\n\n          localStorage.setItem(\"token\", data.accessToken);\n          localStorage.setItem(\"user-info\", data.userId);\n          localStorage.setItem(\"expiresIn\", data.expiresIn); // Save expiry date in milliseconds\n          localStorage.setItem(\"isAuthenticated\", true);\n          localStorage.setItem(\"role\", data.role);\n          localStorage.setItem(\"userId\", data.userId);\n          sessionStorage.setItem(\"token\", data.accessToken);\n          sessionStorage.setItem(\"expiresIn\", data.expiresIn);\n          sessionStorage.setItem(\"userId\", data.userId);\n\n          navigate('/dashboard');\n        } else {\n          setAlertMessage(result.message);\n        }\n      } else {\n        setAlertMessage(result.message);\n      }\n    } catch (error) {\n      setAlertMessage(\"Хэрэглэгчийн нэр эсвэл нууц үг буруу байна.\");\n      console.log(error.message)\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <div className=\"bg-body-tertiary min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={4}>\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm onSubmit={handleLogin}>\n                    <h2>{t('login')}</h2>\n                    <p className=\"text-body-secondary\">{t('enterCredentials')}</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        <CIcon icon={cilUser} />\n                      </CInputGroupText>\n                      <CFormInput\n                        type=\"text\"\n                        placeholder={t('username')}\n                        autoComplete=\"username\"\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon icon={cilLockLocked} />\n                      </CInputGroupText>\n                      <CFormInput\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder={t('password')}\n                        autoComplete=\"current-password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                      />\n                      <CInputGroupText type=\"button\" onClick={togglePasswordVisibility}>\n                        <FontAwesomeIcon icon={showPassword ? faEyeSlash : faEye} />\n                      </CInputGroupText>\n                    </CInputGroup>\n                    {alertMessage && <CAlert color='danger' dismissible onClose={() => setAlertMessage('')}>{alertMessage}</CAlert>}\n                    <CRow>\n                      <CCol xs={6}>\n                        <CButton type=\"submit\" color=\"primary\" className=\"px-4\" disabled={isLoading}>\n                          {isLoading ? <CSpinner size=\"sm\" /> : t('login')}\n                        </CButton>\n                      </CCol>\n                      <CCol xs={6} className=\"text-right\">\n                        <Link to=\"/reset-password\">\n                          <CButton color=\"link\" className=\"px-0\">\n                            {t('forgotPassword')}\n                          </CButton>\n                        </Link>\n                      </CCol>\n                    </CRow>\n                    <CRow>\n                    <CCol xs={6}>\n                      <Link to=\"/register\">\n                        <CButton color=\"link\" className=\"px-0\">\n                          {t('nowRegister')}\n                        </CButton>\n                      </Link>\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              {/* <CCard className=\"text-white bg-primary py-5\">\n                <CCardBody className=\"text-center\">\n                  <div>\n                    <h2>{t('register.title')}</h2>\n                    <p>{t('registerBusiness')}</p>\n                    <Link to=\"/register\">\n                      <CButton color=\"primary\" className=\"mt-3\">\n                        {t('nowRegister')}\n                      </CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard> */}\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardGroup = forwardRef<HTMLDivElement, CCardGroupProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-group', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardGroup.displayName = 'CCardGroup'\n"],"names":["Login","t","useTranslation","username","setUsername","useState","password","setPassword","alertMessage","setAlertMessage","showPassword","setShowPassword","isLoading","setIsLoading","navigate","useNavigate","useEffect","validateToken","isTokenExpired","expiresIn","localStorage","getItem","Date","getTime","clear","_jsx","className","children","CContainer","CRow","CCol","md","CCardGroup","CCard","CCardBody","_jsxs","CForm","onSubmit","async","e","preventDefault","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","response","fetch","result","json","ok","isOK","data","parse","setItem","accessToken","userId","role","sessionStorage","message","error","console","log","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","type","placeholder","autoComplete","value","onChange","target","cilLockLocked","onClick","togglePasswordVisibility","FontAwesomeIcon","faEyeSlash","faEye","CAlert","color","dismissible","onClose","xs","CButton","disabled","CSpinner","size","Link","to","forwardRef","_a","ref","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName"],"sourceRoot":""}
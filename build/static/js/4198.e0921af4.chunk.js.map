{"version":3,"file":"static/js/4198.e0921af4.chunk.js","mappings":"6RAgBA,MA+DA,EA/DcA,KACV,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,wCAEzCC,EAAkBC,IACpBH,EAAeG,EAAI,EAGvB,OACIC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,qCAAoCC,UAChDC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,MAAO,CAAEC,SAAU,QAASC,MAAO,QAASL,SAAA,EAC/CF,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CAAAN,SAAC,wJAGbF,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CAAAN,UACRC,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CAACC,QAAQ,OAAOT,UAAU,mBAAkBC,SAAA,EAC7CF,EAAAA,EAAAA,KAACW,EAAAA,EAAQ,CAAAT,UACLF,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CAACC,OAAwB,yCAAhBlB,EAA0BmB,QAASA,IAAMhB,EAAe,wCAAUI,SAAC,4CAIzFF,EAAAA,EAAAA,KAACW,EAAAA,EAAQ,CAAAT,UACLF,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CAACC,OAAwB,yCAAhBlB,EAA0BmB,QAASA,IAAMhB,EAAe,wCAAUI,SAAC,iDAMjGF,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACd,UAAU,qCAAoCC,SAAC,mBAG1C,yCAAhBP,IACGQ,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,iFAEDF,EAAAA,EAAAA,KAAA,SAAM,qGAENA,EAAAA,EAAAA,KAAA,SAAM,iEAENA,EAAAA,EAAAA,KAAA,SAAM,qGAENA,EAAAA,EAAAA,KAAA,SAAM,mFAENA,EAAAA,EAAAA,KAAA,SAAM,gIAIG,yCAAhBL,IACGK,EAAAA,EAAAA,KAAA,WAIJA,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,KAGVhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,CAACC,OAAO,KAAKjB,UAAU,wBAAuBC,UAClDF,EAAAA,EAAAA,KAACmB,EAAAA,EAAU,CAACC,OAAK,UAKtB,ECtCf,EAxBqBC,KACjB,MAAOC,EAAWC,IAAgB1B,EAAAA,EAAAA,WAAS,GAM3C,OACIM,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mCAAkCC,SAAA,EAC7CF,EAAAA,EAAAA,KAACiB,EAAAA,EAAO,CAACC,OAAO,KAAKjB,UAAU,mBAAmBa,QANhCU,KACtBD,GAAa,EAAK,EAK+DrB,UACzEF,EAAAA,EAAAA,KAACmB,EAAAA,EAAU,CAACC,OAAK,EAAAlB,UACbF,EAAAA,EAAAA,KAACyB,EAAAA,EAAY,CAAAvB,UACTF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iEAOfoB,IAAatB,EAAAA,EAAAA,KAACN,EAAK,IAAI,MACtB,C,uGCADU,GAAQsB,EAAAA,EAAAA,aACnB,SAACC,EAAiEC,G,MAA/D1B,EAAQyB,EAAAzB,SAAED,EAAS0B,EAAA1B,UAAE4B,EAAKF,EAAAE,MAAEC,EAAWH,EAAAG,YAAEC,EAASJ,EAAAI,UAAKC,GAAIC,EAAAA,EAAAA,IAAAN,EAA7D,4DACC,OACEO,EAAAA,cACE,OAAAC,EAAAA,EAAAA,IAAA,CAAAlC,WAAWmC,EAAAA,EAAAA,GACT,QAAMC,EAAA,GAEJA,EAAC,MAAMC,OAAAT,IAAUA,EACjBQ,EAAC,QAAQC,OAAAP,IAAcA,EACvBM,EAAC,WAAWC,OAAAR,IAAgBA,EAAW,GAEzC7B,IAEE+B,EACJ,CAAAJ,IAAKA,IAEJ1B,EAGP,IAGFE,EAAMmC,UAAY,CAChBrC,SAAUsC,IAAAA,KACVvC,UAAWuC,IAAAA,OACXX,MAAOY,EAAAA,GACPX,YAAaW,EAAAA,GACbV,UAAWS,IAAAA,QAGbpC,EAAMsC,YAAc,O,4FCpDP1B,GAAYU,EAAAA,EAAAA,aACvB,SAACC,EAAkCC,GAAhC,IAAA1B,EAAQyB,EAAAzB,SAAED,EAAS0B,EAAA1B,UAAK+B,GAA1BC,EAAAA,EAAAA,IAAAN,EAAA,0BACC,OACEO,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CAAKlC,WAAWmC,EAAAA,EAAAA,GAAW,YAAanC,IAAgB+B,EAAI,CAAEJ,IAAKA,IAChE1B,EAGP,IAGFc,EAAUuB,UAAY,CACpBrC,SAAUsC,IAAAA,KACVvC,UAAWuC,IAAAA,QAGbxB,EAAU0B,YAAc,W,4FCTXlC,GAA0EkB,EAAAA,EAAAA,aAGrF,SAACC,EAAyDC,GAAvD,IAAA1B,EAAQyB,EAAAzB,SAAEmC,EAAqBV,EAAAgB,GAAjBC,OAAY,IAAAP,EAAA,MAAKA,EAAEpC,EAAS0B,EAAA1B,UAAK+B,GAAIC,EAAAA,EAAAA,IAAAN,EAArD,+BACD,OACEO,EAAAA,cAACU,GAAST,EAAAA,EAAAA,IAAA,CAAClC,WAAWmC,EAAAA,EAAAA,GAAW,cAAenC,IAAgB+B,EAAI,CAAEJ,IAAKA,IACxE1B,EAGP,IAEAM,EAAY+B,UAAY,CACtBI,GAAIH,IAAAA,YACJtC,SAAUsC,IAAAA,KACVvC,UAAWuC,IAAAA,QAGbhC,EAAYkC,YAAc,a,uGCObzB,GAAkES,EAAAA,EAAAA,aAI7E,SACEC,EAWAC,G,MAVE1B,EAAQyB,EAAAzB,SACR2C,EAAAlB,EAAAgB,GAAIC,OAAY,IAAAC,EAAA,MAAKA,EACrB5C,EAAS0B,EAAA1B,UACT4B,EAAKF,EAAAE,MACLiB,EAAWnB,EAAAmB,YACXC,EAASpB,EAAAoB,UACT7B,EAAMS,EAAAT,OACN8B,EAASrB,EAAAqB,UACNhB,GAAIC,EAAAA,EAAAA,IAAAN,EATT,sFAaA,OACEO,EAAAA,cAACU,GAAST,EAAAA,EAAAA,IAAA,CACRlC,WAAWmC,EAAAA,EAAAA,GACT,UAAQC,EAAA,GAENA,EAAC,MAAMC,OAAAT,IAAUA,EACjBQ,EAAmB,mBAAXnB,EAAuB,gBAAkB,iBAAAoB,OAAiBpB,IAAWA,EAAM,GAErF8B,EACA/C,IAEG6C,GAAe,CAAE,oBAAqBA,GACvCd,EAAI,CACRJ,IAAKA,IAEJmB,EACCb,EAAAA,cAAA,OAAKjC,UAAgC,kBAAd8C,EAAyB,aAAaT,OAAAS,GAAc,aACxE7C,GAGHgC,EAAAA,cAAGA,EAAAA,SAAA,KAAAhC,GAIX,IAGFe,EAAQsB,UAAY,CAClBI,GAAIH,IAAAA,YACJtC,SAAUsC,IAAAA,KACVvC,UAAWuC,IAAAA,OACXX,MAAOY,EAAAA,GACPK,YAAaN,IAAAA,MAAgB,CAAC,OAAQ,UACtCO,UAAWP,IAAAA,UAAoB,CAC7BA,IAAAA,KACAA,IAAAA,MAA6D,CAC3D,KACA,KACA,KACA,KACA,MACA,YAGJtB,OAAQsB,IAAAA,UAAoB,CAC1BA,IAAAA,KACAA,IAAAA,MAAmD,CAAC,KAAM,KAAM,KAAM,KAAM,UAE9EQ,UAAWR,IAAAA,MAAgB,CAAC,YAAa,eAAgB,gBAG3DvB,EAAQyB,YAAc,S,4FCxFTjB,GAA0EC,EAAAA,EAAAA,aAGrF,SAACC,EAAsCC,GAApC,IAAA1B,EAAQyB,EAAAzB,SAAEyC,EAAEhB,EAAAgB,GAAE1C,EAAS0B,EAAA1B,UAAK+B,GAA9BC,EAAAA,EAAAA,IAAAN,EAAA,+BACKiB,EAAc,OAAFD,QAAA,IAAAA,EAAAA,EAAOX,EAAKiB,KAAO,IAAM,OAE3C,OACEf,EAAAA,cAACU,GAAST,EAAAA,EAAAA,IAAA,CAAClC,WAAWmC,EAAAA,EAAAA,GAAW,eAAgBnC,IAAgB+B,EAAI,CAAEJ,IAAKA,IACzE1B,EAGP,IAEAuB,EAAac,UAAY,CACvBI,GAAIH,IAAAA,YACJtC,SAAUsC,IAAAA,KACVvC,UAAWuC,IAAAA,QAGbf,EAAaiB,YAAc,c","sources":["views/interlocutor/PopUp.js","views/interlocutor/interlocutor.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/navbar/CNavbar.tsx","../node_modules/@coreui/react/src/components/navbar/CNavbarBrand.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    CCollapse,\r\n    CContainer,\r\n    CNavbar,\r\n    CNavbarNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CNavbarBrand,\r\n    CCardHeader,\r\n    CCardBody,\r\n    CNav,\r\n    CFormLabel,\r\n    CCard\r\n} from '@coreui/react';\r\n\r\nconst PopUp = () => {\r\n    const [selectedTab, setSelectedTab] = useState('Жилээр');\r\n\r\n    const handleTabClick = (tab) => {\r\n        setSelectedTab(tab);\r\n    };\r\n\r\n    return (\r\n        <main className='d-flex justify-content-center mt-2'>\r\n            <CCard style={{ maxWidth: '800px', width: '100%' }}>\r\n                <CCardHeader>\r\n                    Төлбөртэй нэмэлт үйлчилгээ\r\n                </CCardHeader>\r\n                <CCardHeader>\r\n                    <CNav variant=\"tabs\" className=\"card-header-tabs\">\r\n                        <CNavItem>\r\n                            <CNavLink active={selectedTab === 'Жилээр'} onClick={() => handleTabClick('Жилээр')}>\r\n                                Жилээр\r\n                            </CNavLink>\r\n                        </CNavItem>\r\n                        <CNavItem>\r\n                            <CNavLink active={selectedTab === 'Сараар'} onClick={() => handleTabClick('Сараар')}>\r\n                                Сараар\r\n                            </CNavLink>\r\n                        </CNavItem>\r\n                    </CNav>\r\n                </CCardHeader>\r\n                <CFormLabel className='d-flex justify-content-center mt-2'>\r\n                    Amar 2.0 Store\r\n                </CFormLabel>\r\n                {selectedTab === 'Жилээр' && (\r\n                    <div>\r\n                        ₮360,000 / анх суулгах\r\n                        <br />\r\n                        Кассын борлуулалт\r\n                        <br />\r\n                        Үнийн шошго\r\n                        <br />\r\n                        Төлбөрийн төрлүүд\r\n                        <br />\r\n                        Бараа материал\r\n                        <br />\r\n                        Хяналт тооллого тооцоо\r\n                    </div>\r\n                )}\r\n                {selectedTab === 'Сараар' && (\r\n                    <div>\r\n                        {/* Add the content for the \"Сараар\" tab here */}\r\n                    </div>\r\n                )}\r\n                <CCardBody>\r\n                    {/* Add content for CCardBody if needed */}\r\n                </CCardBody>\r\n                <CNavbar expand=\"lg\" className=\"border rounded-3 mt-3\">\r\n                    <CContainer fluid>\r\n                        {/* Add content for CNavbar if needed */}\r\n                    </CContainer>\r\n                </CNavbar>\r\n            </CCard>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default PopUp;\r\n","import React, { useState } from 'react';\r\nimport {\r\n    CCollapse,\r\n    CContainer,\r\n    CNavbar,\r\n    CNavbarNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CNavbarBrand,\r\n    CNavbarToggler,\r\n} from '@coreui/react';\r\nimport PopUp from './PopUp'; // Ensure that PopUp is correctly imported\r\n\r\nconst Interlocutor = () => {\r\n    const [showPopUp, setShowPopUp] = useState(false);\r\n\r\n    const handleNavbarClick = () => {\r\n        setShowPopUp(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app-container d-flex flex-column\">\r\n            <CNavbar expand=\"lg\" className=\"border rounded-3\" onClick={handleNavbarClick}>\r\n                <CContainer fluid>\r\n                    <CNavbarBrand>\r\n                        <h3>\r\n                            Харилцагч\r\n                        </h3>\r\n                    </CNavbarBrand>\r\n                </CContainer>\r\n            </CNavbar>\r\n\r\n            {showPopUp && <PopUp />} {/* Render PopUp when showPopUp is true */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Interlocutor;\r\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CNavbarProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets if the color of text should be colored for a light or dark background.\n   */\n  colorScheme?: 'dark' | 'light'\n  /**\n   * Defines optional container wrapping children elements.\n   */\n  container?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'fluid'\n  /**\n   * Defines the responsive breakpoint to determine when content collapses.\n   */\n  expand?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Place component in non-static positions.\n   */\n  placement?: 'fixed-top' | 'fixed-bottom' | 'sticky-top'\n}\n\nexport const CNavbar: PolymorphicRefForwardingComponent<'nav', CNavbarProps> = forwardRef<\n  HTMLDivElement,\n  CNavbarProps\n>(\n  (\n    {\n      children,\n      as: Component = 'nav',\n      className,\n      color,\n      colorScheme,\n      container,\n      expand,\n      placement,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <Component\n        className={classNames(\n          'navbar',\n          {\n            [`bg-${color}`]: color,\n            [typeof expand === 'boolean' ? 'navbar-expand' : `navbar-expand-${expand}`]: expand,\n          },\n          placement,\n          className,\n        )}\n        {...(colorScheme && { 'data-coreui-theme': colorScheme })}\n        {...rest}\n        ref={ref}\n      >\n        {container ? (\n          <div className={typeof container === 'string' ? `container-${container}` : 'container'}>\n            {children}\n          </div>\n        ) : (\n          <>{children}</>\n        )}\n      </Component>\n    )\n  },\n)\n\nCNavbar.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  colorScheme: PropTypes.oneOf(['dark', 'light']),\n  container: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'fluid'>([\n      'sm',\n      'md',\n      'lg',\n      'xl',\n      'xxl',\n      'fluid',\n    ]),\n  ]),\n  expand: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  placement: PropTypes.oneOf(['fixed-top', 'fixed-bottom', 'sticky-top']),\n}\n\nCNavbar.displayName = 'CNavbar'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CNavbarBrandProps extends HTMLAttributes<HTMLAnchorElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   *\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * The href attribute specifies the URL of the page the link goes to.\n   */\n  href?: string\n}\n\nexport const CNavbarBrand: PolymorphicRefForwardingComponent<'a', CNavbarBrandProps> = forwardRef<\n  HTMLAnchorElement | HTMLSpanElement,\n  CNavbarBrandProps\n>(({ children, as, className, ...rest }, ref) => {\n  const Component = as ?? (rest.href ? 'a' : 'span')\n\n  return (\n    <Component className={classNames('navbar-brand', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCNavbarBrand.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCNavbarBrand.displayName = 'CNavbarBrand'\n"],"names":["PopUp","selectedTab","setSelectedTab","useState","handleTabClick","tab","_jsx","className","children","_jsxs","CCard","style","maxWidth","width","CCardHeader","CNav","variant","CNavItem","CNavLink","active","onClick","CFormLabel","CCardBody","CNavbar","expand","CContainer","fluid","Interlocutor","showPopUp","setShowPopUp","handleNavbarClick","CNavbarBrand","forwardRef","_a","ref","color","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","as","Component","_c","colorScheme","container","placement","href"],"sourceRoot":""}
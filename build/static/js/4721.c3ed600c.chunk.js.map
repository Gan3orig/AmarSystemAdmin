{"version":3,"file":"static/js/4721.c3ed600c.chunk.js","mappings":"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","sources":["views/pages/login/Login.js","../node_modules/@coreui/react/src/components/card/CCardGroup.tsx"],"sourcesContent":["import { cilLockLocked, cilUser, cilGlobeAlt } from '@coreui/icons';\r\nimport CIcon from '@coreui/icons-react';\r\nimport {\r\n  CAlert,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CFormInput,\r\n  CInputGroup,\r\n  CInputGroupText,\r\n  CRow,\r\n  CSpinner\r\n} from '@coreui/react';\r\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { validateToken } from 'src/validateToken'; // Validation\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst Login = () => {\r\n  const { t } = useTranslation();\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const navigate = useNavigate(); // Use navigate for redirection\r\n\r\n  useEffect(() => {\r\n    const isValid = validateToken(); // Validate the token on mount\r\n    if (isValid) {\r\n      navigate('/dashboard'); \r\n    }\r\n  }, [navigate]);\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    setAlertMessage(''); // Reset alert message\r\n    if (!username || !password) {\r\n      setAlertMessage(t('fillCredentials'));\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true); // Start loading\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    \r\n    const raw = JSON.stringify({\r\n      username,\r\n      password,\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\"https://api.majorsoft.mn/api/login\", requestOptions);\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        if (result.isOK) {\r\n          const data = JSON.parse(result.json);\r\n          const expiryDate = data.expiresIn;\r\n            console.log(data)\r\n          localStorage.setItem(\"token\", data.accessToken);\r\n          localStorage.setItem(\"user-info\", data.userId);\r\n          localStorage.setItem(\"expiryDate\", expiryDate);\r\n          localStorage.setItem(\"isAuthenticated\", true);\r\n          //localStorage.setItem(\"role\", \"admin\");\r\n          localStorage.setItem(\"role\", data.role);\r\n          localStorage.setItem(\"userId\",data.userId);\r\n          navigate('/dashboard'); \r\n        } else {\r\n          setAlertMessage(result.message);\r\n        }\r\n      } else {\r\n        setAlertMessage(result.message);\r\n      }\r\n    } catch (error) {\r\n      setAlertMessage(error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"bg-body-tertiary min-vh-100 d-flex flex-row align-items-center\">\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md={8}>\r\n            <CCardGroup>\r\n              <CCard className=\"p-4\">\r\n                <CCardBody>\r\n                  <CForm onSubmit={handleLogin}>\r\n                    <h2>{t('login')}</h2>\r\n                    <p className=\"text-body-secondary\">{t('enterCredentials')}</p>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupText>\r\n                        <CIcon icon={cilUser} />\r\n                      </CInputGroupText>\r\n                      <CFormInput\r\n                        type=\"text\"\r\n                        placeholder={t('username')}\r\n                        autoComplete=\"username\"\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                      />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-4\">\r\n                      <CInputGroupText>\r\n                        <CIcon icon={cilLockLocked} />\r\n                      </CInputGroupText>\r\n                      <CFormInput\r\n                        type={showPassword ? \"text\" : \"password\"}\r\n                        placeholder={t('password')}\r\n                        autoComplete=\"current-password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                      />\r\n                      <CInputGroupText type=\"button\" onClick={togglePasswordVisibility}>\r\n                        <FontAwesomeIcon icon={showPassword ? faEyeSlash : faEye} />\r\n                      </CInputGroupText>\r\n                    </CInputGroup>\r\n                    {alertMessage && <CAlert color='danger' dismissible onClose={() => setAlertMessage('')}>{alertMessage}</CAlert>}\r\n                    <CRow>\r\n                      <CCol xs={6}>\r\n                        <CButton type=\"submit\" color=\"primary\" className=\"px-4\" disabled={isLoading}>\r\n                          {isLoading ? <CSpinner size=\"sm\" /> : t('login')}\r\n                        </CButton>\r\n                      </CCol>\r\n                      <CCol xs={6} className=\"text-right\">\r\n                        <Link to=\"/reset-password\">\r\n                          <CButton color=\"link\" className=\"px-0\">\r\n                            {t('forgotPassword')}\r\n                          </CButton>\r\n                        </Link>\r\n                    \r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                </CCardBody>\r\n              </CCard>\r\n              <CCard className=\"text-white bg-primary py-5\">\r\n                <CCardBody className=\"text-center\">\r\n                  <div>\r\n                    <h2>{t('register.title')}</h2>\r\n                    <p>{t('registerBusiness')}</p>\r\n                    <Link to=\"/register\">\r\n                      <CButton color=\"primary\" className=\"mt-3\">\r\n                        {t('nowRegister')}\r\n                      </CButton>\r\n                    </Link>\r\n                  </div>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCardGroup>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Login;\r\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardGroup = forwardRef<HTMLDivElement, CCardGroupProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-group', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardGroup.displayName = 'CCardGroup'\n"],"names":["Login","t","useTranslation","username","setUsername","useState","password","setPassword","alertMessage","setAlertMessage","showPassword","setShowPassword","isLoading","setIsLoading","navigate","useNavigate","useEffect","validateToken","_jsx","className","children","CContainer","CRow","CCol","md","_jsxs","CCardGroup","CCard","CCardBody","CForm","onSubmit","async","e","preventDefault","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","response","fetch","result","json","ok","isOK","data","parse","expiryDate","expiresIn","console","log","localStorage","setItem","accessToken","userId","role","message","error","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","type","placeholder","autoComplete","value","onChange","target","cilLockLocked","onClick","togglePasswordVisibility","FontAwesomeIcon","faEyeSlash","faEye","CAlert","color","dismissible","onClose","xs","CButton","disabled","CSpinner","size","Link","to","forwardRef","_a","ref","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName"],"sourceRoot":""}
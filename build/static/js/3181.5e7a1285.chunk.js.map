{"version":3,"file":"static/js/3181.5e7a1285.chunk.js","mappings":"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","sources":["views/pages/register/Register.js","../node_modules/@coreui/icons/src/free/cil-phone.ts"],"sourcesContent":["import { cilLockLocked, cilPhone, cilUser } from '@coreui/icons';\nimport CIcon from '@coreui/icons-react';\nimport {\n  CAlert,\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow\n} from '@coreui/react';\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useState } from 'react';\nimport { Link,useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next'; // Import i18n hook\n\nconst Register = () => {\n  const { t } = useTranslation(); // Initialize translation hook\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [phone, setPhone] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const navigate = useNavigate();\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleSignUp = async (e) => {\n    e.preventDefault();\n\n    if (!name || !email || !password || !confirmPassword) {\n      setError(t('error.fieldsRequired'));\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      setError(t('error.passwordMismatch'));\n      return;\n    }\n\n    setError('');\n    const data = {\n      name,\n      email,\n      phone,\n      password,\n      deviceIdentityInfo: \"string\",\n      userAgent: navigator.userAgent,\n    };\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    };\n\n    try {\n      const response = await fetch('https://api.majorsoft.mn/api/login/createUser', requestOptions);\n\n      // If the response is not successful (4xx or 5xx errors)\n      if (!response.ok) {\n        // Parse the response body for an error message\n        const errorData = await response.json();\n        const backendMessage = errorData.message || t('error.general'); // Use backend message or fallback\n        throw new Error(backendMessage); // Throw to be caught below\n      }\n\n      const result = await response.json();\n\n      if (result.Success) {\n        setSuccess(result.message || \"Бүртгэгдлээ, E-Mail хаягаа баталгаажуулаарай\"); // Use backend success message or default\n        resetForm();\n        setTimeout(() => {\n          navigate('/login');\n        }, 1000);\n      } else {\n        setError(result.message || t('error.general')); // Display backend message on failure\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setError(error.message || t('error.general')); // Display error message from backend or a general one\n    }\n  };\n\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setPhone('');\n    setPassword('');\n    setConfirmPassword('');\n  };\n\n  const togglePassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <div className=\"bg-body-tertiary min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n      {/* {success && (\n        <CAlert color=\"success\">\n          {success}\n        </CAlert>\n      )} */}\n        <CRow className=\"justify-content-center\">\n          <CCol md={9} lg={7} xl={6}>\n            <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4\">\n                <CForm onSubmit={handleSignUp}>\n                  <h1>{t('register.title')}</h1>\n                  <p className=\"text-body-secondary\">{t('register.subtitle')}</p>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>\n                      <CIcon icon={cilUser} />\n                    </CInputGroupText>\n                    <CFormInput\n                      placeholder={t('register.namePlaceholder')} // Translation for \"Нэр\"\n                      autoComplete=\"username\"\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>@</CInputGroupText>\n                    <CFormInput\n                      placeholder={t('register.emailPlaceholder')} // Translation for \"Email\"\n                      autoComplete=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>\n                      <CIcon icon={cilPhone} />\n                    </CInputGroupText>\n                    <CFormInput\n                      placeholder={t('register.phonePlaceholder')}\n                      autoComplete=\"Phone_number\"\n                      value={phone}\n                      onChange={(e) => setPhone(e.target.value)}\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>\n                      <CIcon icon={cilLockLocked} />\n                    </CInputGroupText>\n                    <CFormInput\n                      type={showPassword ? 'text' : 'password'}\n                      placeholder={t('register.passwordPlaceholder')}\n                      autoComplete=\"new-password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-4\">\n                    <CInputGroupText>\n                      <CIcon icon={cilLockLocked} />\n                    </CInputGroupText>\n                    <CFormInput\n                      type={showPassword ? 'text' : 'password'}\n                      placeholder={t('register.confirmPasswordPlaceholder')}\n                      autoComplete=\"new-password\"\n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                    />\n                    <CInputGroupText onClick={togglePassword} style={{ cursor: 'pointer' }}>\n                      <FontAwesomeIcon icon={showPassword ? faEyeSlash : faEye} />\n                    </CInputGroupText>\n                  </CInputGroup>\n                  {success && (\n                    <CAlert color=\"success\" dismissible onClose={() => setSuccess('')}>\n                      {success}\n                    </CAlert>\n                  )}\n                  {error && (\n                    <CAlert color=\"danger\" dismissible onClose={() => setError('')}>\n                      {error}\n                    </CAlert>\n                  )}\n                  <div className=\"d-grid\">\n                    <CButton color=\"primary\" type=\"submit\">\n                      {t('register.submitButton')}\n                    </CButton>\n                  </div>\n                  <div className=\"d-grid\">\n                    <Link to=\"/login\">\n                        <CButton color=\"link\" className=\"px-0\">\n                          {t('backToLogin')}\n                        </CButton>\n                    </Link>\n                  </div>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Register;\n","export var cilPhone = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M449.366,89.648l-.685-.428L362.088,46.559,268.625,171.176l43,57.337a88.529,88.529,0,0,1-83.115,83.114l-57.336-43L46.558,362.088l42.306,85.869.356.725.429.684a25.085,25.085,0,0,0,21.393,11.857h22.344A327.836,327.836,0,0,0,461.222,133.386V111.041A25.084,25.084,0,0,0,449.366,89.648Zm-20.144,43.738c0,163.125-132.712,295.837-295.836,295.837h-18.08L87,371.76l84.18-63.135,46.867,35.149h5.333a120.535,120.535,0,0,0,120.4-120.4v-5.333l-35.149-46.866L371.759,87l57.463,28.311Z' class='ci-primary'/>\"];\n"],"names":["Register","t","useTranslation","name","setName","useState","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","phone","setPhone","error","setError","success","setSuccess","navigate","useNavigate","showPassword","setShowPassword","resetForm","_jsx","className","children","CContainer","CRow","CCol","md","lg","xl","CCard","CCardBody","_jsxs","CForm","onSubmit","async","e","preventDefault","data","deviceIdentityInfo","userAgent","navigator","requestOptions","method","headers","body","JSON","stringify","response","fetch","ok","backendMessage","json","message","Error","result","Success","setTimeout","console","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","placeholder","autoComplete","value","onChange","target","cilPhone","cilLockLocked","type","onClick","togglePassword","style","cursor","FontAwesomeIcon","faEyeSlash","faEye","CAlert","color","dismissible","onClose","CButton","Link","to"],"sourceRoot":""}
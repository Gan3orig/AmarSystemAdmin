{"version":3,"file":"static/js/4721.8c27e58f.chunk.js","mappings":"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","sources":["views/pages/login/Login.js","../node_modules/@coreui/react/src/components/card/CCardGroup.tsx"],"sourcesContent":["import { cilLockLocked, cilUser, cilGlobeAlt } from '@coreui/icons';\r\nimport CIcon from '@coreui/icons-react';\r\nimport {\r\n  CAlert,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CFormInput,\r\n  CInputGroup,\r\n  CInputGroupText,\r\n  CRow,\r\n  CSpinner\r\n} from '@coreui/react';\r\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { validateToken } from 'src/validateToken'; // Validation\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst Login = () => {\r\n  const { t, i18n } = useTranslation();\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const isValid = validateToken(); // Validate the token\r\n  const navigate = useNavigate(); // Use navigate for redirection\r\n\r\n  useEffect(() => {\r\n    if (isValid) {\r\n      navigate('/'); // Redirect if already authenticated\r\n    }\r\n  }, [isValid, navigate]);\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    setAlertMessage(''); // Reset alert message\r\n    if (!username || !password) {\r\n      setAlertMessage(t('fillCredentials'));\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true); // Start loading\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    \r\n    const raw = JSON.stringify({\r\n      username,\r\n      password,\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\"https://api.majorsoft.mn/api/login\", requestOptions);\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        if (result.isOK) {\r\n          const data = JSON.parse(result.json);\r\n          const expiryDate = data.expiresIn;\r\n\r\n          localStorage.setItem(\"token\", data.accessToken);\r\n          localStorage.setItem(\"user-info\", data.userId);\r\n          localStorage.setItem(\"expiryDate\", expiryDate);\r\n          localStorage.setItem(\"isAuthenticated\", true);\r\n\r\n          navigate('/'); // Redirect to home on successful login\r\n        } else {\r\n          setAlertMessage(result.message);\r\n        }\r\n      } else {\r\n        setAlertMessage(result.message);\r\n      }\r\n    } catch (error) {\r\n      setAlertMessage(error.message);\r\n    } finally {\r\n      setIsLoading(false); // End loading\r\n    }\r\n  };\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleLanguageChange = (lang) => {\r\n    i18n.changeLanguage(lang); // Change the language\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-body-tertiary min-vh-100 d-flex flex-row align-items-center\">\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md={8}>\r\n            <CCardGroup>\r\n              <CCard className=\"p-4\">\r\n                <CCardBody>\r\n                  <CForm onSubmit={handleLogin}>\r\n                    <h2>{t('login')}</h2>\r\n                    <p className=\"text-body-secondary\">{t('enterCredentials')}</p>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupText>\r\n                        <CIcon icon={cilUser} />\r\n                      </CInputGroupText>\r\n                      <CFormInput\r\n                        type=\"text\"\r\n                        placeholder={t('username')}\r\n                        autoComplete=\"username\"\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                      />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-4\">\r\n                      <CInputGroupText>\r\n                        <CIcon icon={cilLockLocked} />\r\n                      </CInputGroupText>\r\n                      <CFormInput\r\n                        type={showPassword ? \"text\" : \"password\"}\r\n                        placeholder={t('password')}\r\n                        autoComplete=\"current-password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                      />\r\n                      <CInputGroupText type=\"button\" onClick={togglePasswordVisibility}>\r\n                        <FontAwesomeIcon icon={showPassword ? faEyeSlash : faEye} />\r\n                      </CInputGroupText>\r\n                    </CInputGroup>\r\n                    {alertMessage && <CAlert color='danger' dismissible onClose={() => setAlertMessage('')}>{alertMessage}</CAlert>}\r\n                    <CRow>\r\n                      <CCol xs={6}>\r\n                        <CButton type=\"submit\" color=\"primary\" className=\"px-4\" disabled={isLoading}>\r\n                          {isLoading ? <CSpinner size=\"sm\" /> : t('login')}\r\n                        </CButton>\r\n                      </CCol>\r\n                      <CCol xs={6} className=\"text-right\">\r\n                        <Link to=\"/reset-password\">\r\n                          <CButton color=\"link\" className=\"px-0\">\r\n                            {t('forgotPassword')}\r\n                          </CButton>\r\n                        </Link>\r\n                        {/* <CInputGroup className=\"mt-2\">\r\n                          <CInputGroupText caret={false} className=\"d-flex align-items-center\">\r\n                            <CIcon icon={cilGlobeAlt} size=\"lg\" />\r\n                            <span className=\"ms-2\">\r\n                              {i18n.language === 'mn' ? t('language.mongolian') : t('language.english')}\r\n                            </span>\r\n                          </CInputGroupText>\r\n                          <CInputGroup onClick={() => handleLanguageChange('mn')} className=\"cursor-pointer\">\r\n                            {t('language.mongolian')}\r\n                          </CInputGroup>\r\n                          <CInputGroup onClick={() => handleLanguageChange('en')} className=\"cursor-pointer\">\r\n                            {t('language.english')}\r\n                          </CInputGroup>\r\n                        </CInputGroup> */}\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                </CCardBody>\r\n              </CCard>\r\n              <CCard className=\"text-white bg-primary py-5\">\r\n                <CCardBody className=\"text-center\">\r\n                  <div>\r\n                    <h2>{t('register')}</h2>\r\n                    <p>{t('registerBusiness')}</p>\r\n                    <Link to=\"/register\">\r\n                      <CButton color=\"primary\" className=\"mt-3\">\r\n                        {t('nowRegister')}\r\n                      </CButton>\r\n                    </Link>\r\n                  </div>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCardGroup>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Uncomment and update propTypes if needed\r\n// Login.propTypes = { setAuthenticated: PropTypes.bool.isRequired };\r\n\r\nexport default Login;\r\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardGroup = forwardRef<HTMLDivElement, CCardGroupProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-group', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardGroup.displayName = 'CCardGroup'\n"],"names":["Login","t","i18n","useTranslation","username","setUsername","useState","password","setPassword","alertMessage","setAlertMessage","showPassword","setShowPassword","isLoading","setIsLoading","isValid","validateToken","navigate","useNavigate","useEffect","_jsx","className","children","CContainer","CRow","CCol","md","_jsxs","CCardGroup","CCard","CCardBody","CForm","onSubmit","async","e","preventDefault","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","response","fetch","result","json","ok","isOK","data","parse","expiryDate","expiresIn","localStorage","setItem","accessToken","userId","message","error","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","type","placeholder","autoComplete","value","onChange","target","cilLockLocked","onClick","togglePasswordVisibility","FontAwesomeIcon","faEyeSlash","faEye","CAlert","color","dismissible","onClose","xs","CButton","disabled","CSpinner","size","Link","to","forwardRef","_a","ref","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName"],"sourceRoot":""}
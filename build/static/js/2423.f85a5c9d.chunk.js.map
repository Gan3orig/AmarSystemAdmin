{"version":3,"file":"static/js/2423.f85a5c9d.chunk.js","mappings":"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","sources":["../node_modules/react-leaflet/lib/hooks.js","views/settings/addBranch.js","views/settings/branch.js","../node_modules/@coreui/icons/src/free/cil-location-pin.ts","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx","../node_modules/@coreui/react/src/components/image/CImage.tsx","../node_modules/@coreui/react/src/components/modal/CModalTitle.tsx"],"sourcesContent":["import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n    return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n    const map = useMap();\n    useEffect(function addMapEventHandler() {\n        // @ts-ignore event type\n        map.on(type, handler);\n        return function removeMapEventHandler() {\n            // @ts-ignore event type\n            map.off(type, handler);\n        };\n    }, [\n        map,\n        type,\n        handler\n    ]);\n    return map;\n}\nexport function useMapEvents(handlers) {\n    const map = useMap();\n    useEffect(function addMapEventHandlers() {\n        map.on(handlers);\n        return function removeMapEventHandlers() {\n            map.off(handlers);\n        };\n    }, [\n        map,\n        handlers\n    ]);\n    return map;\n}\n","/* eslint-disable no-undef */\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CForm,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormSelect,\r\n  CRow,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CInputGroup,\r\n  CFormFeedback,\r\n} from \"@coreui/react\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { cilAirplay, cilLocationPin } from \"@coreui/icons\";\r\nimport {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n  useMapEvents,\r\n} from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\nimport markerIconPng from \"leaflet/dist/images/marker-icon.png\";\r\nimport markerShadowPng from \"leaflet/dist/images/marker-shadow.png\";\r\nimport PropTypes from \"prop-types\";\r\nimport uploadPhoto from \"../settings/photos/upload.png\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./main.css\";\r\nimport \"./branch\";\r\nimport { logo } from \"src/assets/brand/logo\";\r\nconst defaultIcon = L.icon({\r\n  iconUrl: markerIconPng,\r\n  shadowUrl: markerShadowPng,\r\n  iconAnchor: [12, 41], // Adjust as needed\r\n});\r\n\r\n// Geocode the zip code to latitude and longitude\r\nconst geocodeZipCode = async (zipCode) => {\r\n  const url = `https://nominatim.openstreetmap.org/search?postalcode=${zipCode}&format=json&addressdetails=1`;\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    if (data && data.length > 0) {\r\n      const { lat, lon } = data[0];\r\n      return [parseFloat(lat), parseFloat(lon)];\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error(\"Error fetching location data:\", error);\r\n    return null;\r\n  }\r\n};\r\nconst LocationMarker = ({\r\n  setPosition,\r\n  setNewBranchLocationLat,\r\n  setNewBranchLocationLng,\r\n}) => {\r\n  const [markerPosition, setMarkerPosition] = useState(null);\r\n\r\n  useMapEvents({\r\n    click(e) {\r\n      const { lat, lng } = e.latlng;\r\n      setMarkerPosition([lat, lng]);\r\n      setPosition([lat, lng]);\r\n      setNewBranchLocationLat(lat);\r\n      setNewBranchLocationLng(lng);\r\n    },\r\n  });\r\n\r\n  return markerPosition ? (\r\n    <Marker position={markerPosition} icon={defaultIcon}>\r\n      <Popup>You selected this location</Popup>\r\n    </Marker>\r\n  ) : null;\r\n};\r\n// Add PropTypes validation\r\nLocationMarker.propTypes = {\r\n  setPosition: PropTypes.func.isRequired,\r\n  setNewBranchLocationLat: PropTypes.func.isRequired,\r\n  setNewBranchLocationLng: PropTypes.func.isRequired,\r\n};\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst AddBranch = ({ visible, setVisible, edit, editBranch, refresh }) => {\r\n  const [branches, setBranches] = useState([]);\r\n  const [subBranches, setSubBranches] = useState([]);\r\n  const [selectedBranch, setSelectedBranch] = useState(\"\");\r\n  const [selectedSubBranch, setSelectedSubBranch] = useState(\"\");\r\n  const [newBranchName, setNewBranchName] = useState(\"\");\r\n  const [newBranchLocationLat, setNewBranchLocationLat] = useState(\"\");\r\n  const [newBranchLocationLng, setNewBranchLocationLng] = useState(\"\");\r\n  const [newBranchContact, setNewBranchContact] = useState(\"\");\r\n  const [newBranchAddress, setNewBranchAddress] = useState(\"\");\r\n  const [newBranchType, setNewBranchType] = useState(\"\");\r\n  const [branchPosition, setBranchPosition] = useState([51.505, -0.09]);\r\n  const [subBranchPosition, setSubBranchPosition] = useState([51.505, -0.09]);\r\n  const [showMapModal, setShowMapModal] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [filepath, setFilePath] = useState(\"\");\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [editData, setEditData] = useState([]);\r\n  const userId = localStorage.getItem(\"userId\");\r\n  const [validated, setValidated] = useState(false);\r\n  const [selectedValue, setSelectedValue] = useState('');\r\n\r\n  // Fetch branch data from API\r\n  useEffect(() => {\r\n    if (editBranch) {\r\n      setEditData(editBranch);\r\n    }\r\n\r\n    //brunch uusgeh\r\n    const fetchBranches = async () => {\r\n      const url = \"https://api.ebarimt.mn/api/info/check/getBranchInfo\";\r\n      const options = {\r\n        method: \"GET\",\r\n        headers: { Accept: \"application/json\" },\r\n      };\r\n\r\n      try {\r\n        const response = await fetch(url, options);\r\n        const data = await response.json();\r\n        const dataArray = Array.isArray(data) ? data : data.data || [];\r\n\r\n        if (Array.isArray(dataArray)) {\r\n          const groupedBranches = dataArray.reduce((acc, curr) => {\r\n            const {\r\n              branchName,\r\n              branchCode,\r\n              subBranchCode,\r\n              subBranchName,\r\n              latitude,\r\n              longitude,\r\n              zipCode,\r\n            } = curr;\r\n            if (!acc[branchCode]) {\r\n              acc[branchCode] = {\r\n                branchCode,\r\n                branchName,\r\n                subBranchCode,\r\n                location: { latitude, longitude },\r\n                zipCode,\r\n                subBranches: [],\r\n              };\r\n            }\r\n            acc[branchCode].subBranches.push({\r\n              subBranchCode,\r\n              subBranchName,\r\n              location: { latitude, longitude },\r\n              zipCode,\r\n            });\r\n            return acc;\r\n          }, {});\r\n          setBranches(Object.values(groupedBranches));\r\n        } else {\r\n          console.error(\"Unexpected data format:\", dataArray);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching branch data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchBranches();\r\n  }, []);\r\n  useEffect(() => {\r\n    if (editData) {\r\n      const branch = branches.find((b) => b.branchCode === editData.branchCode);\r\n      if (branch && branch.subBranches) {\r\n        setSubBranches(branch.subBranches);\r\n      }\r\n    }\r\n  }, [editData, branches]);\r\n\r\n  const handleBranchChange = (e) => {\r\n    const selectedBranchCode = e.target.value;\r\n    const branch = branches.find((b) => b.branchCode === selectedBranchCode);\r\n    if (branch && branch.subBranches) {\r\n      setSubBranches(branch.subBranches);\r\n      setSelectedBranch(selectedBranchCode);\r\n    } else {\r\n      setSubBranches([]);\r\n    }\r\n  };\r\n\r\n  const handleSubBranchChange = (e) => {\r\n    const subBranchId = e.target.value;\r\n    setSelectedSubBranch(subBranchId);\r\n  };\r\n  const handlePhotoUpload = async (e) => {\r\n    const file = e.target.files[0];\r\n\r\n    if (file) {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", file);\r\n      const token = localStorage.getItem(\"token\");\r\n\r\n      try {\r\n        const response = await fetch(\r\n          \"https://api.majorsoft.mn/api/branchService/uploadLogo\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n            body: formData,\r\n          },\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Error uploading photo\");\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        console.log(\"Upload success\", data);\r\n        const filePath = data.imageUrl;\r\n        setFilePath(filePath);\r\n      } catch (error) {\r\n        console.error(\"Error uploading photo:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAddBranch = async (event) => {\r\n    event.preventDefault();\r\n\r\n\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.stopPropagation();\r\n      setValidated(true);\r\n      return; \r\n    }\r\n  \r\n\r\n    setValidated(true);\r\n    const token = localStorage.getItem(\"token\");\r\n    const branchData = {\r\n      branchId: editData.branchId,\r\n      merchantId: editData.merchantId,\r\n      branchName: newBranchName || editData.branchName,\r\n      businessTypeId: newBranchType || editData.businessTypeId,\r\n      branchCode: selectedBranch || editData.branchCode,\r\n      subBranchCode: selectedSubBranch || editData.subBranchCode,\r\n      locationLat: String(newBranchLocationLat) || editData.locationLat,\r\n      locationLng: String(newBranchLocationLng) || editData.locationlng,\r\n      phone: newBranchContact || editData.phone,\r\n      address: newBranchAddress || editData.address,\r\n      logoSmall: filepath || editData.logoSmall || '',\r\n      createUserId: userId,\r\n    };\r\n    if (edit) {\r\n      const formData = new FormData();\r\n      Object.keys(branchData).forEach((key) => {\r\n        formData.append(key, branchData[key]);\r\n      });\r\n\r\n      const requestOptions = {\r\n        method: \"PUT\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(branchData),\r\n      };\r\n\r\n      try {\r\n        const response = await fetch(\r\n          `https://api.majorsoft.mn/api/branchService`,\r\n          requestOptions,\r\n        );\r\n        const result = await response.json();\r\n\r\n        if (result.success) {\r\n          setVisible();\r\n          refresh();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error updating branch data:\", error);\r\n      }\r\n    } else {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://api.majorsoft.mn/api/branchService\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n            },\r\n            body: JSON.stringify(branchData),\r\n          },\r\n        );\r\n\r\n        if (!response.ok) {\r\n          const errorDetails = await response.text();\r\n          console.error(\"Error creating branch service:\", errorDetails);\r\n          \r\n\r\n          return;\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log(\"Branch Service Created:\", data);\r\n\r\n        setVisible();\r\n        refresh();\r\n      } catch (error) {\r\n        console.error(\"Error creating branch service:\", error);\r\n      }\r\n    }\r\n  };\r\n  const handleIconClick = () => {\r\n    setShowMapModal(true);\r\n  };\r\n  const handleModalClose = () => {\r\n    setShowMapModal(false);\r\n  };\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setSelectedImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n  if (!visible) return null;\r\n\r\n  const positions = [branchPosition, subBranchPosition].filter(\r\n    (pos) => pos[0] !== 51.505 && pos[1] !== -0.09,\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <CCard className=\"w-4\">\r\n        <CCardHeader>\r\n          {edit ? <h4>Салбар засах</h4> : <h4>Салбар нэмэх</h4>}\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CForm\r\n            className=\"row g-3 needs-validation\"\r\n            noValidate\r\n            validated={validated}\r\n            onSubmit={handleAddBranch}\r\n          >\r\n            <CRow>\r\n              <CCol md={6}>\r\n                <CRow md={4}>\r\n                  <CFormLabel htmlFor=\"branchName\">Салбарын нэр</CFormLabel>\r\n                  <CFormInput\r\n                    type=\"text\"\r\n                    id=\"branchName\"\r\n                    feedbackValid=\"Looks good!\"\r\n                    value={newBranchName || editData.branchName}\r\n                    onChange={(e) => setNewBranchName(e.target.value)}\r\n                    required\r\n                  />\r\n                  <CFormFeedback invalid>Салбарын нэрийг оруулна уу.</CFormFeedback> \r\n                </CRow>\r\n                <CRow md={4}>\r\n                  <CFormSelect\r\n                    id=\"branchType\"\r\n                    label=\"Бизнес төрөл\"\r\n                    value={newBranchType || editData.businessTypeId }\r\n                    onChange={(e) => setNewBranchType(e.target.value)}\r\n                    feedbackValid=\"Looks good!\"\r\n                    required\r\n                  >\r\n                    <option selected=\"\" value=\"\" disabled=\"\" >\r\n                      Сонгох..\r\n                    </option>\r\n                    <option value=\"0\">Дэлгүүр</option>\r\n                    <option value=\"1\">Ресторан</option>\r\n                    <option value=\"2\">Түргэн хоол</option>\r\n                    <option value=\"3\">Салон</option>\r\n                    <option value=\"4\">Эмийн сан</option>\r\n                    <option value=\"5\">Зочид Буудал</option>\r\n                  </CFormSelect>\r\n                  <CFormFeedback invalid>Салбарын төрлийг сонгоно уу.</CFormFeedback> \r\n                </CRow>\r\n              </CCol>\r\n              <CCol md={6}>\r\n                <CRow className=\"d-flex justify-content-center align-items-center\">\r\n                  <div\r\n                    className=\"d-flex justify-content-center align-items-center\"\r\n                    style={{ height: \"100%\" }}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        editData.logoSmall\r\n                          ? editData.logoSmall // If the logo is already present (edit mode)\r\n                          : filepath\r\n                            ? filepath\r\n                            : uploadPhoto\r\n                      }\r\n                      alt=\"Branch preview\"\r\n                      className=\"rounded\"\r\n                      style={{\r\n                        width: \"150px\",\r\n                        height: \"150px\",\r\n                        objectFit: \"cover\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={() =>\r\n                        document.getElementById(handleFileChange).click()\r\n                      } // Trigger file input click\r\n                    />\r\n                  </div>\r\n\r\n                  <CFormInput\r\n                    type=\"file\"\r\n                    id=\"branchPhoto\"\r\n                    style={{ display: \"none\" }}\r\n                    onChange={handlePhotoUpload} // Handle file input change\r\n                  />\r\n\r\n                  <CButton\r\n                    color=\"primary\"\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                      document.getElementById(\"branchPhoto\").click()\r\n                    }\r\n                    className=\"mt-2\"\r\n                  >\r\n                    Лого оруулах\r\n                  </CButton>\r\n                </CRow>\r\n              </CCol>\r\n            </CRow>\r\n\r\n            <CRow md={4}>\r\n              <CFormSelect\r\n                id=\"branchSelect\"\r\n                label=\"Аймаг/Хот\"\r\n                value={selectedBranch || editData?.branchCode || \"\"}\r\n                onChange={handleBranchChange}\r\n                feedbackValid=\"Looks good!\"\r\n                    required\r\n              >\r\n                <option value=\"\" disabled>\r\n                  Салбарын байршил сонгох\r\n                </option>\r\n                {branches.map((branch) => (\r\n                  <option key={branch.branchCode} value={branch.branchCode}>\r\n                    {branch.branchName}\r\n                  </option>\r\n                ))}\r\n              </CFormSelect>\r\n              <CFormFeedback invalid>Аймаг хотыг сонгоно уу.</CFormFeedback> \r\n              <CFormSelect\r\n                id=\"subBranchSelect\"\r\n                label=\"Дүүрэг/Сум\"\r\n                value={selectedSubBranch || editData?.subBranchCode || \"\"}\r\n                onChange={handleSubBranchChange}\r\n                feedbackValid=\"Looks good!\"\r\n                required\r\n              >\r\n                <option value=\"\" disabled>\r\n                  Дүүрэг/Сум сонгох\r\n                </option>\r\n                {subBranches.map((subBranch) => (\r\n                  <option\r\n                    key={subBranch.subBranchCode}\r\n                    value={subBranch.subBranchCode}\r\n                  >\r\n                    {subBranch.subBranchName}\r\n                  </option>\r\n                ))}\r\n              </CFormSelect>\r\n              <CFormFeedback invalid>Сум дүүргийг сонгоно уу.</CFormFeedback> \r\n            </CRow>\r\n            <CRow md={4}>\r\n              <CFormLabel htmlFor=\"branchAddress\">Хаяг</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"branchAddress\"\r\n                value={newBranchAddress || editData.address}\r\n                onChange={(e) => setNewBranchAddress(e.target.value)}\r\n                 feedbackValid=\"Looks good!\"\r\n                 required\r\n              />\r\n              <CFormFeedback invalid>Салбарын хаягыг оруулна уу.</CFormFeedback> \r\n            </CRow>\r\n            <CRow md={4}>\r\n              <CFormLabel htmlFor=\"branchLocation\">Байршил</CFormLabel>\r\n              <CInputGroup>\r\n                <CFormInput\r\n                  placeholder=\" \"\r\n                  type=\"text\"\r\n                  id=\"branchLocation\"\r\n                  required\r\n                  value={`${newBranchLocationLat || editData.locationLat || \" \"} ${newBranchLocationLng || editData.locationlng || \" \"}`}\r\n                />\r\n                <span className=\"input-group-text\">\r\n                  <CIcon icon={cilLocationPin} onClick={handleIconClick} />\r\n                </span>\r\n              </CInputGroup>\r\n              <CFormFeedback invalid>Салбарын байршлыг оруулна уу.</CFormFeedback> \r\n              \r\n            </CRow>\r\n            <CRow md={4}>\r\n              <CFormLabel htmlFor=\"branchPhoneNumber\">Утасны дугаар</CFormLabel>\r\n              <CFormInput\r\n                type=\"text\"\r\n                id=\"branchPhoneNumber\"\r\n                pattern=\"^\\d{8}$\"\r\n                maxLength=\"8\"\r\n                feedbackValid=\"Looks good!\"\r\n                value={newBranchContact || editData.phone}\r\n                onChange={(e) => setNewBranchContact(e.target.value)}\r\n                \r\n                required\r\n              />\r\n              <CFormFeedback invalid>Утасны дугаар 8 оронтой тоо байх ёстой.</CFormFeedback>\r\n            </CRow>\r\n            <div className=\"d-grid gap-2\">\r\n              <CButton color=\"primary\" onClick={handleAddBranch}>\r\n                {edit ? \"Засах\" : \"Нэмэх\"}\r\n              </CButton>\r\n\r\n              <CButton color=\"secondary\" onClick={() => setVisible(false)}>\r\n                Хаах\r\n              </CButton>\r\n            </div>\r\n          </CForm>\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      {/* Map Modal */}\r\n      <CModal size=\"lg\" visible={showMapModal} onClose={handleModalClose}>\r\n        <CModalHeader onClose={handleModalClose}>\r\n          <CModalTitle>\r\n            <CIcon icon={cilLocationPin}></CIcon> Байршил оруулах\r\n          </CModalTitle>\r\n        </CModalHeader>\r\n        <CModalBody>\r\n          <MapContainer\r\n            center={[47.92123, 106.918556]}\r\n            zoom={13}\r\n            style={{ height: \"400px\", width: \"100%\" }}\r\n          >\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            {/* Render existing markers */}\r\n            {positions.map((position, idx) => (\r\n              <Marker key={idx} position={position} icon={defaultIcon}>\r\n                <Popup>Branch Location {idx + 1}</Popup>\r\n              </Marker>\r\n            ))}\r\n            {/* Allow user to add a new marker */}\r\n            <LocationMarker\r\n              setPosition={setBranchPosition}\r\n              setNewBranchLocationLat={setNewBranchLocationLat}\r\n              setNewBranchLocationLng={setNewBranchLocationLng}\r\n            />\r\n          </MapContainer>\r\n          <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\r\n            <CButton color=\"primary\" onClick={handleModalClose}>\r\n              Болих\r\n            </CButton>\r\n            <CButton color=\"outline-primary\" onClick={handleModalClose}>\r\n              Хадгалах\r\n            </CButton>\r\n          </div>\r\n        </CModalBody>\r\n      </CModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddBranch;\r\n","import { useEffect, useState } from 'react';\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CFormLabel,\r\n    CImage,\r\n    CTable,\r\n    CTableBody,\r\n    CTableHeaderCell,\r\n    CTableRow,\r\n    CTableDataCell,\r\n    CTableHead,\r\n} from '@coreui/react';\r\nimport branchImage from '../settings/photos/subbranch.png'; \r\nimport AddBranch from './addBranch'; \r\nimport EditBranch from './editBranch';\r\n\r\nconst Branch = () => {\r\n    const [showAddBranch, setShowAddBranch] = useState(false);\r\n    const [branches, setBranches] = useState([]);\r\n    const [selectedBranch, setSelectedBranch] = useState([]);\r\n    const [edit, setEdit] = useState(false); // Renamed to setEdit for clarity\r\n\r\n    const businessTypeMap = {\r\n        0: 'Дэлгүүр',\r\n        1: 'Ресторан',\r\n        2: 'Түргэн хоол',\r\n        3: 'Салон',\r\n        4: 'Эмийн сан',\r\n        5: 'Зочид Буудал'\r\n    };\r\n\r\n    const handleToggleAddBranch = (branch) => {\r\n        if (branch) {\r\n            setSelectedBranch(branch);\r\n            setEdit(true); // Set edit mode\r\n        } else {\r\n            setSelectedBranch(null);\r\n            setEdit(false); // Add new branch mode\r\n        }\r\n        setShowAddBranch(!showAddBranch);\r\n    };\r\n\r\n    const handleDeleteBranch = (branchId) => {\r\n        const token = localStorage.getItem('token');\r\n        const userId = localStorage.getItem('userId');\r\n\r\n        const requestOptions = {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            redirect: \"follow\"\r\n        };\r\n\r\n        fetch(`https://api.majorsoft.mn/api/branchService?branchId=${branchId}&userId=${userId}`, requestOptions)\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(() => {\r\n                setBranches(prevBranches => prevBranches.filter(branch => branch.branchId !== branchId));\r\n                console.log(`Branch with id ${branchId} deleted successfully.`);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error deleting branch:\", error);\r\n            });\r\n    };\r\n\r\n    const  getDatas = () => {\r\n        const token = localStorage.getItem('token');\r\n        const merchantId = localStorage.getItem(\"merchantId\");\r\n\r\n        const requestOptions = {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            redirect: \"follow\"\r\n        };\r\n\r\n        fetch(`https://api.majorsoft.mn/api/branchService?merchantId=${merchantId}`, requestOptions)\r\n            .then((response) => {\r\n                console.log('Response status:', response.status);\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((result) => {\r\n                console.log(\"Fetched branch data:\", result);\r\n                setBranches(result.data);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching branch data:\", error);\r\n            });\r\n    } \r\n    useEffect(() => {\r\n       getDatas()\r\n    }, []);\r\n\r\n    return (\r\n        <main className='mx-2 mt-1'>\r\n            {!showAddBranch ? (\r\n                <CCard>\r\n                    <CCardHeader>Салбар</CCardHeader>\r\n                    <CCardBody className='text-center'>\r\n                        {branches.length > 0 ? (\r\n                            <CTable striped bordered hover responsive>\r\n                                <CTableHead>\r\n                                    <CTableRow>\r\n                                        <CTableHeaderCell>Салбарын нэр</CTableHeaderCell>\r\n                                        <CTableHeaderCell>Салбарын төрөл</CTableHeaderCell>\r\n                                        <CTableHeaderCell>Салбар</CTableHeaderCell>\r\n                                    </CTableRow>\r\n                                </CTableHead>\r\n                                <CTableBody>\r\n                                    {branches.map((branch) => (\r\n                                        <CTableRow key={branch.branchId || branch.branchName}>\r\n                                            <CTableDataCell>{branch.branchName}</CTableDataCell>\r\n                                            <CTableDataCell>{businessTypeMap[branch.businessTypeId] || 'Тодорхойгүй'}</CTableDataCell>\r\n                                            <CTableDataCell> \r\n                                                <CButton color=\"light\" onClick={() => handleToggleAddBranch(branch)}>Засах</CButton>\r\n                                                <CButton color=\"secondary\" onClick={() => handleDeleteBranch(branch.branchId)}>Устгах</CButton>\r\n                                            </CTableDataCell>\r\n                                        </CTableRow>\r\n                                    ))}\r\n                                    <CButton color='primary' className='my-2' onClick={() => handleToggleAddBranch()}>\r\n                                        Салбар нэмэх\r\n                                    </CButton>\r\n                                </CTableBody>\r\n                            </CTable>\r\n                        ) : (\r\n                            <>\r\n                                <CImage\r\n                                    src={branchImage}\r\n                                    rounded\r\n                                    thumbnail\r\n                                    width={200}\r\n                                    height={200}\r\n                                    className=\"mb-2\"\r\n                                    style={{ border: 'none' }}\r\n                                />\r\n                                <div className='d-flex flex-column align-items-center'>\r\n                                    <CFormLabel className='fs-2'>Салбар</CFormLabel>\r\n                                    <CFormLabel>Эндээс та салбараа удирдах боломжтой</CFormLabel>\r\n                                </div>\r\n                                <div className='d-flex flex-column align-items-center'>\r\n                                    <CButton color='primary' className='my-2' onClick={() => handleToggleAddBranch()}>\r\n                                        Салбар нэмэх\r\n                                    </CButton>\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                    </CCardBody>\r\n                </CCard>\r\n            ) : (\r\n                <AddBranch\r\n                    visible={showAddBranch}\r\n                    setVisible={setShowAddBranch}\r\n                    edit={edit}\r\n                    editBranch={selectedBranch}\r\n                    refresh = {getDatas}\r\n                />\r\n            )}\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Branch;\r\n","export var cilLocationPin = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M253.924,127.592a64,64,0,1,0,64,64A64.073,64.073,0,0,0,253.924,127.592Zm0,96a32,32,0,1,1,32-32A32.037,32.037,0,0,1,253.924,223.592Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M376.906,68.515A173.922,173.922,0,0,0,108.2,286.426L229.107,472.039a29.619,29.619,0,0,0,49.635,0L399.653,286.426A173.921,173.921,0,0,0,376.906,68.515Zm-4.065,200.444L253.925,451.509,135.008,268.959C98.608,213.08,106.415,138.3,153.571,91.142a141.92,141.92,0,0,1,200.708,0C401.435,138.3,409.241,213.08,372.841,268.959Z' class='ci-primary'/>\"];\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n","import React, { forwardRef, ImgHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CImageProps extends ImgHTMLAttributes<HTMLOrSVGImageElement> {\n  /**\n   * Set the horizontal aligment.\n   */\n  align?: 'start' | 'center' | 'end'\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Make image responsive.\n   */\n  fluid?: boolean\n  /**\n   * Make image rounded.\n   */\n  rounded?: boolean\n  /**\n   * Give an image a rounded 1px border appearance.\n   */\n  thumbnail?: boolean\n}\n\nexport const CImage = forwardRef<HTMLImageElement, CImageProps>(\n  ({ align, className, fluid, rounded, thumbnail, ...rest }, ref) => {\n    return (\n      <img\n        className={\n          classNames(\n            {\n              [`float-${align}`]: align && (align === 'start' || align === 'end'),\n              'd-block mx-auto': align && align === 'center',\n              'img-fluid': fluid,\n              rounded: rounded,\n              'img-thumbnail': thumbnail,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      />\n    )\n  },\n)\n\nCImage.propTypes = {\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n  className: PropTypes.string,\n  fluid: PropTypes.bool,\n  rounded: PropTypes.bool,\n  thumbnail: PropTypes.bool,\n}\n\nCImage.displayName = 'CImage'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CModalTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n}\n\nexport const CModalTitle: PolymorphicRefForwardingComponent<'h5', CModalTitleProps> = forwardRef<\n  HTMLHeadElement,\n  CModalTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('modal-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCModalTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalTitle.displayName = 'CModalTitle'\n"],"names":["useMap","useLeafletContext","map","defaultIcon","L","iconUrl","shadowUrl","markerShadowPng","iconAnchor","LocationMarker","_ref","setPosition","setNewBranchLocationLat","setNewBranchLocationLng","markerPosition","setMarkerPosition","useState","handlers","useEffect","on","off","useMapEvents","click","e","lat","lng","latlng","_jsx","Marker","position","icon","children","Popup","_ref2","visible","setVisible","edit","editBranch","refresh","branches","setBranches","subBranches","setSubBranches","selectedBranch","setSelectedBranch","selectedSubBranch","setSelectedSubBranch","newBranchName","setNewBranchName","newBranchLocationLat","newBranchLocationLng","newBranchContact","setNewBranchContact","newBranchAddress","setNewBranchAddress","newBranchType","setNewBranchType","branchPosition","setBranchPosition","subBranchPosition","setSubBranchPosition","showMapModal","setShowMapModal","filepath","setFilePath","useNavigate","selectedImage","setSelectedImage","editData","setEditData","userId","localStorage","getItem","validated","setValidated","selectedValue","setSelectedValue","async","options","method","headers","Accept","response","fetch","data","json","dataArray","Array","isArray","groupedBranches","reduce","acc","curr","branchName","branchCode","subBranchCode","subBranchName","latitude","longitude","zipCode","location","push","Object","values","console","error","fetchBranches","branch","find","b","handleAddBranch","event","preventDefault","currentTarget","checkValidity","stopPropagation","token","branchData","branchId","merchantId","businessTypeId","locationLat","String","locationLng","locationlng","phone","address","logoSmall","createUserId","formData","FormData","keys","forEach","key","append","requestOptions","Authorization","concat","body","JSON","stringify","success","ok","errorDetails","text","log","handleModalClose","handleFileChange","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","positions","filter","pos","_jsxs","_Fragment","CCard","className","CCardHeader","CCardBody","CForm","noValidate","onSubmit","CRow","CCol","md","CFormLabel","htmlFor","CFormInput","type","id","feedbackValid","value","onChange","required","CFormFeedback","invalid","CFormSelect","label","selected","disabled","style","height","src","uploadPhoto","alt","width","objectFit","cursor","onClick","document","getElementById","display","Error","filePath","imageUrl","CButton","color","variant","selectedBranchCode","subBranchId","subBranch","CInputGroup","placeholder","CIcon","cilLocationPin","handleIconClick","pattern","maxLength","CModal","size","onClose","CModalHeader","CModalTitle","CModalBody","MapContainer","center","zoom","TileLayer","url","attribution","idx","Branch","showAddBranch","setShowAddBranch","setEdit","businessTypeMap","handleToggleAddBranch","getDatas","redirect","then","status","catch","AddBranch","length","CTable","striped","bordered","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","CTableDataCell","prevBranches","handleDeleteBranch","CImage","rounded","thumbnail","border","forwardRef","_a","ref","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","propTypes","PropTypes","colorPropType","displayName","as","Component","feedback","feedbackInvalid","floatingClassName","floatingLabel","htmlSize","tooltipFeedback","valid","CFormControlWrapper","describedby","option","index","undefined","BREAKPOINTS","repsonsiveClassNames","bp","breakpoint","infix","span","order","offset","col","xs","sm","lg","xl","xxl","cols","gutter","gutterX","gutterY","align","fluid"],"sourceRoot":""}
{"version":3,"file":"static/js/4198.5989df4a.chunk.js","mappings":"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","sources":["views/interlocutor/PopUp.js","views/interlocutor/interlocutor.js","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/navbar/CNavbar.tsx","../node_modules/@coreui/react/src/components/navbar/CNavbarBrand.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    CCollapse,\r\n    CContainer,\r\n    CNavbar,\r\n    CNavbarNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CNavbarBrand,\r\n    CCardHeader,\r\n    CCardBody,\r\n    CNav,\r\n    CFormLabel\r\n} from '@coreui/react';\r\n\r\nconst PopUp = () => {\r\n    const [selectedTab, setSelectedTab] = useState('Жилээр');\r\n\r\n    const handleTabClick = (tab) => {\r\n        setSelectedTab(tab);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app-container d-flex flex-column\">\r\n            <CCardHeader>\r\n                Төлбөртэй нэмэлт үйлчилгээ\r\n            </CCardHeader>\r\n            <CCardHeader>\r\n                <CNav variant=\"tabs\" className=\"card-header-tabs\">\r\n                    <CNavItem>\r\n                        <CNavLink active={selectedTab === 'Жилээр'} onClick={() => handleTabClick('Жилээр')}>\r\n                            Жилээр\r\n                        </CNavLink>\r\n                    </CNavItem>\r\n                    <CNavItem>\r\n                        <CNavLink active={selectedTab === 'Сараар'} onClick={() => handleTabClick('Сараар')}>\r\n                            Сараар\r\n                        </CNavLink>\r\n                    </CNavItem>\r\n                </CNav>\r\n            </CCardHeader>\r\n            <CFormLabel>Amar 2.0 Store</CFormLabel>\r\n            {selectedTab === 'Жилээр' && (\r\n                <div>\r\n                    ₮360,000 / анх суулгах\r\n                    <br />\r\n                    Кассын борлуулалт\r\n                    <br />\r\n                    Үнийн шошго\r\n                    <br />\r\n                    Төлбөрийн төрлүүд\r\n                    <br />\r\n                    Бараа материал\r\n                    <br />\r\n                    Хяналт тооллого тооцоо\r\n                </div>\r\n            )}\r\n            {selectedTab === 'Сараар' && (\r\n                <div>\r\n                    {/* Add the content for the \"Сараар\" tab here */}\r\n                </div>\r\n            )}\r\n\r\n            <CCardBody>\r\n                {/* Add content for CCardBody if needed */}\r\n            </CCardBody>\r\n\r\n            <CNavbar expand=\"lg\" className=\"border rounded-3\">\r\n                <CContainer fluid>\r\n                    {/* Add content for CNavbar if needed */}\r\n                </CContainer>\r\n            </CNavbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PopUp;\r\n","import React, { useState } from 'react';\r\nimport {\r\n    CCollapse,\r\n    CContainer,\r\n    CNavbar,\r\n    CNavbarNav,\r\n    CNavItem,\r\n    CNavLink,\r\n    CNavbarBrand,\r\n    CNavbarToggler,\r\n} from '@coreui/react';\r\nimport PopUp from './PopUp'; // Ensure that PopUp is correctly imported\r\n\r\nconst Interlocutor = () => {\r\n    const [showPopUp, setShowPopUp] = useState(false);\r\n\r\n    const handleNavbarClick = () => {\r\n        setShowPopUp(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app-container d-flex flex-column\">\r\n            <CNavbar expand=\"lg\" className=\"border rounded-3\" onClick={handleNavbarClick}>\r\n                <CContainer fluid>\r\n                    <CNavbarBrand>\r\n                        <h3>\r\n                            Харилцагч\r\n                        </h3>\r\n                    </CNavbarBrand>\r\n                </CContainer>\r\n            </CNavbar>\r\n\r\n            {showPopUp && <PopUp />} {/* Render PopUp when showPopUp is true */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Interlocutor;\r\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CNavbarProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets if the color of text should be colored for a light or dark background.\n   */\n  colorScheme?: 'dark' | 'light'\n  /**\n   * Defines optional container wrapping children elements.\n   */\n  container?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'fluid'\n  /**\n   * Defines the responsive breakpoint to determine when content collapses.\n   */\n  expand?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Place component in non-static positions.\n   */\n  placement?: 'fixed-top' | 'fixed-bottom' | 'sticky-top'\n}\n\nexport const CNavbar: PolymorphicRefForwardingComponent<'nav', CNavbarProps> = forwardRef<\n  HTMLDivElement,\n  CNavbarProps\n>(\n  (\n    {\n      children,\n      as: Component = 'nav',\n      className,\n      color,\n      colorScheme,\n      container,\n      expand,\n      placement,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <Component\n        className={classNames(\n          'navbar',\n          {\n            [`bg-${color}`]: color,\n            [typeof expand === 'boolean' ? 'navbar-expand' : `navbar-expand-${expand}`]: expand,\n          },\n          placement,\n          className,\n        )}\n        {...(colorScheme && { 'data-coreui-theme': colorScheme })}\n        {...rest}\n        ref={ref}\n      >\n        {container ? (\n          <div className={typeof container === 'string' ? `container-${container}` : 'container'}>\n            {children}\n          </div>\n        ) : (\n          <>{children}</>\n        )}\n      </Component>\n    )\n  },\n)\n\nCNavbar.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  colorScheme: PropTypes.oneOf(['dark', 'light']),\n  container: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'fluid'>([\n      'sm',\n      'md',\n      'lg',\n      'xl',\n      'xxl',\n      'fluid',\n    ]),\n  ]),\n  expand: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  placement: PropTypes.oneOf(['fixed-top', 'fixed-bottom', 'sticky-top']),\n}\n\nCNavbar.displayName = 'CNavbar'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CNavbarBrandProps extends HTMLAttributes<HTMLAnchorElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   *\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * The href attribute specifies the URL of the page the link goes to.\n   */\n  href?: string\n}\n\nexport const CNavbarBrand: PolymorphicRefForwardingComponent<'a', CNavbarBrandProps> = forwardRef<\n  HTMLAnchorElement | HTMLSpanElement,\n  CNavbarBrandProps\n>(({ children, as, className, ...rest }, ref) => {\n  const Component = as ?? (rest.href ? 'a' : 'span')\n\n  return (\n    <Component className={classNames('navbar-brand', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCNavbarBrand.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCNavbarBrand.displayName = 'CNavbarBrand'\n"],"names":["PopUp","selectedTab","setSelectedTab","useState","handleTabClick","tab","_jsxs","className","children","_jsx","CCardHeader","CNav","variant","CNavItem","CNavLink","active","onClick","CFormLabel","CCardBody","CNavbar","expand","CContainer","fluid","Interlocutor","showPopUp","setShowPopUp","handleNavbarClick","CNavbarBrand","forwardRef","_a","ref","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","_b","as","Component","_c","color","colorScheme","container","placement","concat","colorPropType","href"],"sourceRoot":""}